{
  "{\"sourceMaps\":\"both\",\"sourceRoot\":\"/Users/appy/QI/js-samples/algos2/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/appy/QI/js-samples/algos2\",\"filename\":\"/Users/appy/QI/js-samples/algos2/bubbleSort.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/appy/QI/js-samples/algos2\",\"plugins\":[{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.10.1": {
    "metadata": {},
    "options": {
      "sourceMaps": "both",
      "sourceRoot": "/Users/appy/QI/js-samples/algos2/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/appy/QI/js-samples/algos2",
      "filename": "/Users/appy/QI/js-samples/algos2/bubbleSort.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/appy/QI/js-samples/algos2",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-escapes",
          "visitor": {
            "Identifier": {
              "enter": [
                null
              ]
            },
            "TemplateElement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/appy/QI/js-samples/algos2/bubbleSort.js",
        "plugins": [
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/appy/QI/js-samples/algos2/bubbleSort.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/appy/QI/js-samples/algos2/",
        "sourceFileName": "bubbleSort.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = sort;\n\nvar UTILS = _interopRequireWildcard(require(\"./utils\"));\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction sort() {\n  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : data.length;\n\n  var _ref = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},\n      _ref$compare = _ref.compare,\n      compare = _ref$compare === void 0 ? UTILS.compare : _ref$compare,\n      _ref$swap = _ref.swap,\n      swap = _ref$swap === void 0 ? UTILS.swap : _ref$swap;\n\n  var stats = {\n    nComps: 0,\n    nWrites: 0\n  };\n\n  for (var i = start; i < end; i++) {\n    var swapped = false;\n\n    for (var j = i + 1; j < end; j++) {\n      if (compare(data[i], data[j]) > 0) {\n        swap(data, i, j);\n        swapped = true;\n        stats.nWrites += 2;\n      }\n    }\n\n    stats.nComps += end - i - 1; // P if ( !swapped ) { break; }\n  }\n\n  return stats;\n}\n\nfunction test() {\n  var origArr = UTILS.makeArray();\n\n  var arr = _toConsumableArray(origArr);\n\n  console.time(\"BubbleSort\");\n  var stats = sort(arr);\n  console.timeEnd(\"BubbleSort\");\n  console.log(arr.slice(0, 5) + \" ... \" + arr.slice(-5));\n  console.log(\"Sorted:\" + UTILS.checkSorted(arr, origArr));\n  console.log(\"Stats:\", stats);\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJ1YmJsZVNvcnQuanMiXSwibmFtZXMiOlsic29ydCIsImRhdGEiLCJzdGFydCIsImVuZCIsImxlbmd0aCIsImNvbXBhcmUiLCJVVElMUyIsInN3YXAiLCJzdGF0cyIsIm5Db21wcyIsIm5Xcml0ZXMiLCJpIiwic3dhcHBlZCIsImoiLCJ0ZXN0Iiwib3JpZ0FyciIsIm1ha2VBcnJheSIsImFyciIsImNvbnNvbGUiLCJ0aW1lIiwidGltZUVuZCIsImxvZyIsInNsaWNlIiwiY2hlY2tTb3J0ZWQiXSwibWFwcGluZ3MiOiJBQUNBOzs7Ozs7Ozs7QUFFQTs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBR2UsU0FBU0EsSUFBVCxHQUF1RztBQUFBLE1BQXhGQyxJQUF3Rix1RUFBbkYsRUFBbUY7QUFBQSxNQUEvRUMsS0FBK0UsdUVBQXpFLENBQXlFO0FBQUEsTUFBdEVDLEdBQXNFLHVFQUFsRUYsSUFBSSxDQUFDRyxNQUE2RDs7QUFBQSxpRkFBTCxFQUFLO0FBQUEsMEJBQW5EQyxPQUFtRDtBQUFBLE1BQW5EQSxPQUFtRCw2QkFBMUNDLEtBQUssQ0FBQ0QsT0FBb0M7QUFBQSx1QkFBM0JFLElBQTJCO0FBQUEsTUFBM0JBLElBQTJCLDBCQUFwQkQsS0FBSyxDQUFDQyxJQUFjOztBQUVySCxNQUFJQyxLQUFLLEdBQUc7QUFBRUMsSUFBQUEsTUFBTSxFQUFFLENBQVY7QUFBYUMsSUFBQUEsT0FBTyxFQUFFO0FBQXRCLEdBQVo7O0FBQ0EsT0FBTSxJQUFJQyxDQUFDLEdBQUdULEtBQWQsRUFBcUJTLENBQUMsR0FBR1IsR0FBekIsRUFBOEJRLENBQUMsRUFBL0IsRUFBb0M7QUFDbkMsUUFBSUMsT0FBTyxHQUFHLEtBQWQ7O0FBQ0EsU0FBTSxJQUFJQyxDQUFDLEdBQUdGLENBQUMsR0FBRyxDQUFsQixFQUFxQkUsQ0FBQyxHQUFHVixHQUF6QixFQUE4QlUsQ0FBQyxFQUEvQixFQUFvQztBQUNuQyxVQUFLUixPQUFPLENBQUVKLElBQUksQ0FBRVUsQ0FBRixDQUFOLEVBQWFWLElBQUksQ0FBRVksQ0FBRixDQUFqQixDQUFQLEdBQWtDLENBQXZDLEVBQTJDO0FBQzFDTixRQUFBQSxJQUFJLENBQUVOLElBQUYsRUFBUVUsQ0FBUixFQUFXRSxDQUFYLENBQUo7QUFDQUQsUUFBQUEsT0FBTyxHQUFHLElBQVY7QUFDQUosUUFBQUEsS0FBSyxDQUFDRSxPQUFOLElBQWlCLENBQWpCO0FBQ0E7QUFDRDs7QUFDREYsSUFBQUEsS0FBSyxDQUFDQyxNQUFOLElBQWdCTixHQUFHLEdBQUdRLENBQU4sR0FBVSxDQUExQixDQVRtQyxDQVduQztBQUNBOztBQUNELFNBQU9ILEtBQVA7QUFDQTs7QUFFRCxTQUFTTSxJQUFULEdBQWdCO0FBQ2YsTUFBSUMsT0FBTyxHQUFHVCxLQUFLLENBQUNVLFNBQU4sRUFBZDs7QUFDQSxNQUFJQyxHQUFHLHNCQUFPRixPQUFQLENBQVA7O0FBQ0FHLEVBQUFBLE9BQU8sQ0FBQ0MsSUFBUixDQUFjLFlBQWQ7QUFDQSxNQUFNWCxLQUFLLEdBQUdSLElBQUksQ0FBRWlCLEdBQUYsQ0FBbEI7QUFDQUMsRUFBQUEsT0FBTyxDQUFDRSxPQUFSLENBQWlCLFlBQWpCO0FBRUFGLEVBQUFBLE9BQU8sQ0FBQ0csR0FBUixDQUFhSixHQUFHLENBQUNLLEtBQUosQ0FBVyxDQUFYLEVBQWMsQ0FBZCxJQUFvQixPQUFwQixHQUE4QkwsR0FBRyxDQUFDSyxLQUFKLENBQVcsQ0FBQyxDQUFaLENBQTNDO0FBQ0FKLEVBQUFBLE9BQU8sQ0FBQ0csR0FBUixDQUFhLFlBQVlmLEtBQUssQ0FBQ2lCLFdBQU4sQ0FBbUJOLEdBQW5CLEVBQXdCRixPQUF4QixDQUF6QjtBQUNBRyxFQUFBQSxPQUFPLENBQUNHLEdBQVIsQ0FBYSxRQUFiLEVBQXVCYixLQUF2QjtBQUNBIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9hcHB5L1FJL2pzLXNhbXBsZXMvYWxnb3MyLyIsInNvdXJjZXNDb250ZW50IjpbIlxuXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCAqIGFzIFVUSUxTIGZyb20gXCIuL3V0aWxzXCI7XG5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc29ydCggZGF0YT1bXSwgc3RhcnQ9MCwgZW5kPWRhdGEubGVuZ3RoLCB7IGNvbXBhcmU9IFVUSUxTLmNvbXBhcmUsIHN3YXAgPSBVVElMUy5zd2FwIH0gPSB7fSApIHtcblxuXHRsZXQgc3RhdHMgPSB7IG5Db21wczogMCwgbldyaXRlczogMCB9O1xuXHRmb3IgKCBsZXQgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKysgKSB7XG5cdFx0bGV0IHN3YXBwZWQgPSBmYWxzZTtcblx0XHRmb3IgKCBsZXQgaiA9IGkgKyAxOyBqIDwgZW5kOyBqKysgKSB7XG5cdFx0XHRpZiAoIGNvbXBhcmUoIGRhdGFbIGkgXSwgZGF0YVsgaiBdICkgPiAwICkge1xuXHRcdFx0XHRzd2FwKCBkYXRhLCBpLCBqICk7XG5cdFx0XHRcdHN3YXBwZWQgPSB0cnVlO1xuXHRcdFx0XHRzdGF0cy5uV3JpdGVzICs9IDI7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHN0YXRzLm5Db21wcyArPSBlbmQgLSBpIC0gMTtcblxuXHRcdC8vIFAgaWYgKCAhc3dhcHBlZCApIHsgYnJlYWs7IH1cblx0fVxuXHRyZXR1cm4gc3RhdHM7XG59XG5cbmZ1bmN0aW9uIHRlc3QoKSB7XG5cdGxldCBvcmlnQXJyID0gVVRJTFMubWFrZUFycmF5KCk7XG5cdGxldCBhcnIgPSBbLi4ub3JpZ0Fycl07XG5cdGNvbnNvbGUudGltZSggXCJCdWJibGVTb3J0XCIgKTtcblx0Y29uc3Qgc3RhdHMgPSBzb3J0KCBhcnIgKTtcblx0Y29uc29sZS50aW1lRW5kKCBcIkJ1YmJsZVNvcnRcIiApO1xuXG5cdGNvbnNvbGUubG9nKCBhcnIuc2xpY2UoIDAsIDUgKSArIFwiIC4uLiBcIiArIGFyci5zbGljZSggLTUgKSApO1xuXHRjb25zb2xlLmxvZyggXCJTb3J0ZWQ6XCIgKyBVVElMUy5jaGVja1NvcnRlZCggYXJyLCBvcmlnQXJyICkgKTtcblx0Y29uc29sZS5sb2coIFwiU3RhdHM6XCIsIHN0YXRzICk7XG59Il19",
    "map": {
      "version": 3,
      "sources": [
        "bubbleSort.js"
      ],
      "names": [
        "sort",
        "data",
        "start",
        "end",
        "length",
        "compare",
        "UTILS",
        "swap",
        "stats",
        "nComps",
        "nWrites",
        "i",
        "swapped",
        "j",
        "test",
        "origArr",
        "makeArray",
        "arr",
        "console",
        "time",
        "timeEnd",
        "log",
        "slice",
        "checkSorted"
      ],
      "mappings": "AACA;;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;AAGe,SAASA,IAAT,GAAuG;AAAA,MAAxFC,IAAwF,uEAAnF,EAAmF;AAAA,MAA/EC,KAA+E,uEAAzE,CAAyE;AAAA,MAAtEC,GAAsE,uEAAlEF,IAAI,CAACG,MAA6D;;AAAA,iFAAL,EAAK;AAAA,0BAAnDC,OAAmD;AAAA,MAAnDA,OAAmD,6BAA1CC,KAAK,CAACD,OAAoC;AAAA,uBAA3BE,IAA2B;AAAA,MAA3BA,IAA2B,0BAApBD,KAAK,CAACC,IAAc;;AAErH,MAAIC,KAAK,GAAG;AAAEC,IAAAA,MAAM,EAAE,CAAV;AAAaC,IAAAA,OAAO,EAAE;AAAtB,GAAZ;;AACA,OAAM,IAAIC,CAAC,GAAGT,KAAd,EAAqBS,CAAC,GAAGR,GAAzB,EAA8BQ,CAAC,EAA/B,EAAoC;AACnC,QAAIC,OAAO,GAAG,KAAd;;AACA,SAAM,IAAIC,CAAC,GAAGF,CAAC,GAAG,CAAlB,EAAqBE,CAAC,GAAGV,GAAzB,EAA8BU,CAAC,EAA/B,EAAoC;AACnC,UAAKR,OAAO,CAAEJ,IAAI,CAAEU,CAAF,CAAN,EAAaV,IAAI,CAAEY,CAAF,CAAjB,CAAP,GAAkC,CAAvC,EAA2C;AAC1CN,QAAAA,IAAI,CAAEN,IAAF,EAAQU,CAAR,EAAWE,CAAX,CAAJ;AACAD,QAAAA,OAAO,GAAG,IAAV;AACAJ,QAAAA,KAAK,CAACE,OAAN,IAAiB,CAAjB;AACA;AACD;;AACDF,IAAAA,KAAK,CAACC,MAAN,IAAgBN,GAAG,GAAGQ,CAAN,GAAU,CAA1B,CATmC,CAWnC;AACA;;AACD,SAAOH,KAAP;AACA;;AAED,SAASM,IAAT,GAAgB;AACf,MAAIC,OAAO,GAAGT,KAAK,CAACU,SAAN,EAAd;;AACA,MAAIC,GAAG,sBAAOF,OAAP,CAAP;;AACAG,EAAAA,OAAO,CAACC,IAAR,CAAc,YAAd;AACA,MAAMX,KAAK,GAAGR,IAAI,CAAEiB,GAAF,CAAlB;AACAC,EAAAA,OAAO,CAACE,OAAR,CAAiB,YAAjB;AAEAF,EAAAA,OAAO,CAACG,GAAR,CAAaJ,GAAG,CAACK,KAAJ,CAAW,CAAX,EAAc,CAAd,IAAoB,OAApB,GAA8BL,GAAG,CAACK,KAAJ,CAAW,CAAC,CAAZ,CAA3C;AACAJ,EAAAA,OAAO,CAACG,GAAR,CAAa,YAAYf,KAAK,CAACiB,WAAN,CAAmBN,GAAnB,EAAwBF,OAAxB,CAAzB;AACAG,EAAAA,OAAO,CAACG,GAAR,CAAa,QAAb,EAAuBb,KAAvB;AACA",
      "sourceRoot": "/Users/appy/QI/js-samples/algos2/",
      "sourcesContent": [
        "\n\"use strict\";\n\nimport * as UTILS from \"./utils\";\n\n\nexport default function sort( data=[], start=0, end=data.length, { compare= UTILS.compare, swap = UTILS.swap } = {} ) {\n\n\tlet stats = { nComps: 0, nWrites: 0 };\n\tfor ( let i = start; i < end; i++ ) {\n\t\tlet swapped = false;\n\t\tfor ( let j = i + 1; j < end; j++ ) {\n\t\t\tif ( compare( data[ i ], data[ j ] ) > 0 ) {\n\t\t\t\tswap( data, i, j );\n\t\t\t\tswapped = true;\n\t\t\t\tstats.nWrites += 2;\n\t\t\t}\n\t\t}\n\t\tstats.nComps += end - i - 1;\n\n\t\t// P if ( !swapped ) { break; }\n\t}\n\treturn stats;\n}\n\nfunction test() {\n\tlet origArr = UTILS.makeArray();\n\tlet arr = [...origArr];\n\tconsole.time( \"BubbleSort\" );\n\tconst stats = sort( arr );\n\tconsole.timeEnd( \"BubbleSort\" );\n\n\tconsole.log( arr.slice( 0, 5 ) + \" ... \" + arr.slice( -5 ) );\n\tconsole.log( \"Sorted:\" + UTILS.checkSorted( arr, origArr ) );\n\tconsole.log( \"Stats:\", stats );\n}"
      ]
    },
    "sourceType": "script",
    "mtime": 1591070598995
  },
  "{\"sourceMaps\":\"both\",\"sourceRoot\":\"/Users/appy/QI/js-samples/algos2/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/appy/QI/js-samples/algos2\",\"filename\":\"/Users/appy/QI/js-samples/algos2/utils.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/appy/QI/js-samples/algos2\",\"plugins\":[{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.10.1": {
    "metadata": {},
    "options": {
      "sourceMaps": "both",
      "sourceRoot": "/Users/appy/QI/js-samples/algos2/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/appy/QI/js-samples/algos2",
      "filename": "/Users/appy/QI/js-samples/algos2/utils.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/appy/QI/js-samples/algos2",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-escapes",
          "visitor": {
            "Identifier": {
              "enter": [
                null
              ]
            },
            "TemplateElement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/appy/QI/js-samples/algos2/utils.js",
        "plugins": [
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/appy/QI/js-samples/algos2/utils.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/appy/QI/js-samples/algos2/",
        "sourceFileName": "utils.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.swap = swap;\nexports.isGreater = isGreater;\nexports.compare = compare;\nexports.checkSorted = checkSorted;\nexports.makeArray = makeArray;\nexports.makeXwd = makeXwd;\nexports.hideString = hideString;\nexports.rotateRight = rotateRight;\n\nfunction swap(ar, i, j) {\n  var tmp = ar[i];\n  ar[i] = ar[j];\n  ar[j] = tmp;\n}\n\nfunction isGreater(a, b) {\n  return a - b;\n}\n\nfunction compare(a, b) {\n  return a - b;\n}\n\nfunction checkSorted(data) {\n  var origArr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var compare = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : isGreater;\n\n  if (origArr.length <= 0) {\n    var last = data.length - 1;\n\n    for (var i = 0; i < last; i++) {\n      if (isGreater(data[i], data[i + 1]) > 0) {\n        throw \"Data is NOT sorted @ index \" + i;\n      }\n    }\n  } else {\n    if (origArr.length === data.length) {\n      origArr.sort(compare);\n\n      for (var _i = 0; _i < data.length; _i++) {\n        if (data[_i] !== origArr[_i]) {\n          console.log(origArr.slice(0, 5) + \" ... \" + origArr.slice(-5));\n          throw \"Data is NOT sorted @ index \" + _i;\n        }\n      }\n    } else {\n      throw \"Data size does not match origArray \".concat(data.length, \". Expected = \").concat(origArr.length);\n    }\n  }\n\n  return true;\n}\n\nfunction makeArray() {\n  var small = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  return small ? [1, 83, 3, 97, 31, 4, 6, 1, 10] : Array(30000).fill(0).map(function () {\n    return Math.floor(Math.random() * 10000);\n  });\n}\n\nfunction makeXwd(n, m, init) {\n  var xwd = new Array(n);\n\n  for (var i = 0; i < n; i++) {\n    xwd[i] = new Array(m);\n\n    if (init) {\n      for (var j = 0; j < m; j++) {\n        xwd[i][j] = init[Math.floor(Math.random() * init.length)];\n      }\n    }\n  } //console.log( xwd );\n\n\n  return xwd;\n} //B console.log(makeArray());\n\n\nfunction hideString(xwd, search) {\n  var totRows = xwd.length;\n  var totCols = xwd[0].length;\n  var maxRowOff = totRows - search.length; //To accommodate search string\n\n  var maxColOff = totCols - search.length; //To accommodate search string\n\n  var reverse = Math.floor(Math.random() * 2); // 0 => Normal , 1=> Reverse\n\n  var dir = Math.floor(Math.random() * 4) + 1;\n\n  switch (dir) {\n    case 1:\n      {\n        //Horizontal Left\n        var row = Math.floor(Math.random() * totRows);\n        var col = Math.floor(Math.random() * maxColOff);\n\n        for (var i = 0; i < search.length; i++) {\n          xwd[row][col + i] = search[reverse ? search.length - 1 - i : i];\n        }\n      }\n      break;\n\n    case 2:\n      {\n        //Vertical Down\n        var _row = Math.floor(Math.random() * maxRowOff);\n\n        var _col = Math.floor(Math.random() * totCols);\n\n        for (var _i2 = 0; _i2 < search.length; _i2++) {\n          xwd[_row + _i2][_col] = search[reverse ? search.length - 1 - _i2 : _i2];\n        }\n      }\n      break;\n\n    case 3:\n      {\n        // Diagonal Down Right\n        var _row2 = Math.floor(Math.random() * maxRowOff);\n\n        var _col2 = Math.floor(Math.random() * maxColOff);\n\n        for (var _i3 = 0; _i3 < search.length; _i3++) {\n          xwd[_row2 + _i3][_col2 + _i3] = search[reverse ? search.length - 1 - _i3 : _i3];\n        }\n      }\n      break;\n\n    case 4:\n      {\n        // Diagonal  Down Left\n        var _row3 = Math.floor(Math.random() * maxRowOff);\n\n        var _col3 = Math.floor(Math.random() * maxColOff) + search.length;\n\n        for (var _i4 = 0; _i4 < search.length; _i4++) {\n          xwd[_row3 + _i4][_col3 - _i4] = search[reverse ? search.length - 1 - _i4 : _i4];\n        }\n      }\n      break;\n\n    default:\n      throw \"Invalid Direction\";\n  }\n}\n\nfunction rotateRight(ar, start, end) {\n  //end is inclusive\n  var tmp = ar[end];\n\n  for (var i = end; i > start; i--) {\n    ar[i] = ar[i - 1];\n  }\n\n  ar[start] = tmp;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "utils.js"
      ],
      "names": [
        "swap",
        "ar",
        "i",
        "j",
        "tmp",
        "isGreater",
        "a",
        "b",
        "compare",
        "checkSorted",
        "data",
        "origArr",
        "length",
        "last",
        "sort",
        "console",
        "log",
        "slice",
        "makeArray",
        "small",
        "Array",
        "fill",
        "map",
        "Math",
        "floor",
        "random",
        "makeXwd",
        "n",
        "m",
        "init",
        "xwd",
        "hideString",
        "search",
        "totRows",
        "totCols",
        "maxRowOff",
        "maxColOff",
        "reverse",
        "dir",
        "row",
        "col",
        "rotateRight",
        "start",
        "end"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/appy/QI/js-samples/algos2/",
      "sourcesContent": [
        "\nexport function swap( ar, i, j ) {\n\tconst tmp = ar[ i ];\n\tar[ i ] = ar[ j ];\n\tar[ j ] = tmp;\n}\n\nexport function isGreater( a, b ) {\n\treturn a - b;\n}\n\nexport function compare( a, b ) {\n\treturn a - b;\n}\n\nexport function checkSorted( data, origArr=[],  compare = isGreater ) {\n\n\tif ( origArr.length <= 0 ) {\n\t\tconst last = data.length - 1;\n\t\tfor ( let i = 0; i < last; i++ ) {\n\t\t\tif ( isGreater( data[ i ], data[ i + 1 ] ) > 0 ) {\n\t\t\t\tthrow \"Data is NOT sorted @ index \" + i;\n\t\t\t}\n\t\t}\n\t} else {\n\t\tif ( origArr.length === data.length ) {\n\t\t\torigArr.sort( compare );\n\t\t\tfor ( let i = 0; i < data.length; i++ ) {\n\t\t\t\tif ( data[ i ] !== origArr[ i ] ) {\n\t\t\t\t\tconsole.log( origArr.slice( 0, 5 ) + \" ... \" + origArr.slice( -5 ) );\n\t\t\t\t\tthrow \"Data is NOT sorted @ index \" + i;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthrow `Data size does not match origArray ${data.length}. Expected = ${origArr.length}`;\n\t\t}\n\t}\n\treturn true;\n}\n\nexport function makeArray( small=false ) {\n\treturn small ?\n\t\t[ 1, 83, 3, 97, 31, 4, 6, 1, 10 ] :\n\t\tArray( 30000).fill( 0 ).map( () => Math.floor( Math.random() * 10000 ) );\n}\n\nexport function makeXwd( n, m, init ) {\n\tlet xwd = new Array( n );\n\tfor ( let i = 0; i < n; i++ ) {\n\t\txwd[ i ] = new Array( m );\n\t\tif ( init ) {\n\t\t\tfor ( let j = 0; j < m; j++ ) {\n\t\t\t\txwd[ i ][ j ] = init[ ( Math.floor( Math.random() * init.length ) ) ];\n\t\t\t}\n\t\t}\n\t}\n\t//console.log( xwd );\n\treturn xwd;\n}\n\n//B console.log(makeArray());\nexport function hideString( xwd, search ) {\n\tconst totRows = xwd.length;\n\tconst totCols = xwd[ 0 ].length;\n\n\tconst maxRowOff = totRows - search.length; //To accommodate search string\n\tconst maxColOff = totCols - search.length; //To accommodate search string\n\n\tconst reverse = Math.floor( Math.random() * 2 );  // 0 => Normal , 1=> Reverse\n\tconst dir = Math.floor( Math.random() * 4 ) + 1;\n\n\tswitch ( dir ) {\n\t\tcase 1: { //Horizontal Left\n\t\t\tconst row = Math.floor( Math.random() * totRows );\n\t\t\tconst col = Math.floor( Math.random() * maxColOff );\n\t\t\tfor ( let i = 0; i < search.length; i++ ) {\n\t\t\t\txwd[ row ][ col + i ] = search[ reverse ? search.length - 1 - i : i ];\n\t\t\t}\n\t\t}\n\t\t\tbreak;\n\t\tcase 2 : { //Vertical Down\n\t\t\tconst row = Math.floor( Math.random() * maxRowOff );\n\t\t\tconst col = Math.floor( Math.random() * totCols );\n\t\t\tfor ( let i = 0; i < search.length; i++ ) {\n\t\t\t\txwd[ row + i ][ col ] = search[ reverse ? search.length - 1 - i : i ];\n\t\t\t}\n\t\t}\n\t\t\tbreak;\n\t\tcase 3: { // Diagonal Down Right\n\t\t\tconst row = Math.floor( Math.random() * maxRowOff );\n\t\t\tconst col = Math.floor( Math.random() * maxColOff );\n\t\t\tfor ( let i = 0; i < search.length; i++ ) {\n\t\t\t\txwd[ row + i ][ col + i ] = search[ reverse ? search.length - 1 - i : i ];\n\t\t\t}\n\t\t}\n\t\t\tbreak;\n\t\tcase 4: { // Diagonal  Down Left\n\t\t\tconst row = Math.floor( Math.random() * maxRowOff );\n\t\t\tconst col = Math.floor( Math.random() * maxColOff ) + search.length;\n\t\t\tfor ( let i = 0; i < search.length; i++ ) {\n\t\t\t\txwd[ row + i ][ col - i ] = search[ reverse ? search.length - 1 - i : i ];\n\t\t\t}\n\t\t}\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow \"Invalid Direction\";\n\t}\n}\n\nexport function rotateRight( ar, start, end ) { //end is inclusive\n\tlet tmp = ar[ end ];\n\tfor ( let i = end; i > start; i-- ) {\n\t\tar[ i ] = ar[ i - 1 ];\n\t}\n\tar[ start ] = tmp;\n}"
      ]
    },
    "sourceType": "script",
    "mtime": 1591084692898
  },
  "{\"sourceMaps\":\"both\",\"sourceRoot\":\"/Users/appy/QI/js-samples/algos2/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/appy/QI/js-samples/algos2\",\"filename\":\"/Users/appy/QI/js-samples/algos2/mergeSort.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/appy/QI/js-samples/algos2\",\"plugins\":[{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.10.1": {
    "metadata": {},
    "options": {
      "sourceMaps": "both",
      "sourceRoot": "/Users/appy/QI/js-samples/algos2/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/appy/QI/js-samples/algos2",
      "filename": "/Users/appy/QI/js-samples/algos2/mergeSort.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/appy/QI/js-samples/algos2",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-escapes",
          "visitor": {
            "Identifier": {
              "enter": [
                null
              ]
            },
            "TemplateElement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/appy/QI/js-samples/algos2/mergeSort.js",
        "plugins": [
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/appy/QI/js-samples/algos2/mergeSort.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/appy/QI/js-samples/algos2/",
        "sourceFileName": "mergeSort.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = sort;\n\nvar UTILS = _interopRequireWildcard(require(\"./utils\"));\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n\"use strict\";\n\nfunction merge(data, start, mid, end, compare, swap, stats) {\n  var lhs = start,\n      rhs = mid;\n\n  for (var i = start; i < end && lhs < mid; i++) {\n    if (rhs < end) {\n      stats.nComps++;\n      stats.temp[i] = compare(data[lhs], data[rhs]) > 0 ? data[rhs++] : data[lhs++];\n    } else {\n      stats.temp[i] = data[lhs++];\n    }\n  }\n\n  for (var _i = start; _i < rhs; _i++) {\n    data[_i] = stats.temp[_i];\n  }\n\n  stats.nWrites += 2 * (rhs - start);\n}\n\nfunction sort() {\n  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : data.length;\n\n  var _ref = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},\n      _ref$compare = _ref.compare,\n      compare = _ref$compare === void 0 ? UTILS.compare : _ref$compare,\n      _ref$swap = _ref.swap,\n      swap = _ref$swap === void 0 ? UTILS.swap : _ref$swap;\n\n  var stats = stats || {\n    nComps: 0,\n    nWrites: 0,\n    temp: Array(data.length)\n  }; //C console.log( \"sort( \" + start + \", \" + end + \")\" );\n\n  var len = end - start;\n\n  if (len > 1) {\n    var mid = end + start >>> 1;\n    sort(data, start, mid, {\n      compare: compare,\n      swap: swap\n    });\n    sort(data, mid, end, {\n      compare: compare,\n      swap: swap\n    });\n    merge(data, start, mid, end, compare, swap, stats);\n  }\n\n  return stats;\n}\n\nfunction test() {\n  var origArr = UTILS.makeArray();\n\n  var arr = _toConsumableArray(origArr);\n\n  console.time(\"MergeSort\");\n  var stats = sort(arr);\n  console.timeEnd(\"MergeSort\");\n  console.log(arr.slice(0, 5) + \" ... \" + arr.slice(-5));\n  console.log(\"Sorted:\" + UTILS.checkSorted(arr, origArr));\n  console.log(\"Stats:\", stats);\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1lcmdlU29ydC5qcyJdLCJuYW1lcyI6WyJtZXJnZSIsImRhdGEiLCJzdGFydCIsIm1pZCIsImVuZCIsImNvbXBhcmUiLCJzd2FwIiwic3RhdHMiLCJsaHMiLCJyaHMiLCJpIiwibkNvbXBzIiwidGVtcCIsIm5Xcml0ZXMiLCJzb3J0IiwibGVuZ3RoIiwiVVRJTFMiLCJBcnJheSIsImxlbiIsInRlc3QiLCJvcmlnQXJyIiwibWFrZUFycmF5IiwiYXJyIiwiY29uc29sZSIsInRpbWUiLCJ0aW1lRW5kIiwibG9nIiwic2xpY2UiLCJjaGVja1NvcnRlZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVBOztBQUVBLFNBQVNBLEtBQVQsQ0FBZ0JDLElBQWhCLEVBQXNCQyxLQUF0QixFQUE2QkMsR0FBN0IsRUFBa0NDLEdBQWxDLEVBQXVDQyxPQUF2QyxFQUFnREMsSUFBaEQsRUFBc0RDLEtBQXRELEVBQThEO0FBQzdELE1BQUlDLEdBQUcsR0FBR04sS0FBVjtBQUFBLE1BQWlCTyxHQUFHLEdBQUdOLEdBQXZCOztBQUVBLE9BQU0sSUFBSU8sQ0FBQyxHQUFHUixLQUFkLEVBQXFCUSxDQUFDLEdBQUdOLEdBQUosSUFBYUksR0FBRyxHQUFHTCxHQUF4QyxFQUE2Q08sQ0FBQyxFQUE5QyxFQUFtRDtBQUNsRCxRQUFLRCxHQUFHLEdBQUdMLEdBQVgsRUFBaUI7QUFDaEJHLE1BQUFBLEtBQUssQ0FBQ0ksTUFBTjtBQUNBSixNQUFBQSxLQUFLLENBQUNLLElBQU4sQ0FBWUYsQ0FBWixJQUFrQkwsT0FBTyxDQUFFSixJQUFJLENBQUVPLEdBQUYsQ0FBTixFQUFlUCxJQUFJLENBQUVRLEdBQUYsQ0FBbkIsQ0FBUCxHQUFzQyxDQUF0QyxHQUEwQ1IsSUFBSSxDQUFFUSxHQUFHLEVBQUwsQ0FBOUMsR0FBMERSLElBQUksQ0FBRU8sR0FBRyxFQUFMLENBQWhGO0FBQ0EsS0FIRCxNQUdPO0FBQ05ELE1BQUFBLEtBQUssQ0FBQ0ssSUFBTixDQUFZRixDQUFaLElBQWtCVCxJQUFJLENBQUVPLEdBQUcsRUFBTCxDQUF0QjtBQUNBO0FBQ0Q7O0FBRUQsT0FBTSxJQUFJRSxFQUFDLEdBQUdSLEtBQWQsRUFBcUJRLEVBQUMsR0FBR0QsR0FBekIsRUFBOEJDLEVBQUMsRUFBL0IsRUFBb0M7QUFDbkNULElBQUFBLElBQUksQ0FBRVMsRUFBRixDQUFKLEdBQVlILEtBQUssQ0FBQ0ssSUFBTixDQUFZRixFQUFaLENBQVo7QUFDQTs7QUFDREgsRUFBQUEsS0FBSyxDQUFDTSxPQUFOLElBQWlCLEtBQU1KLEdBQUcsR0FBR1AsS0FBWixDQUFqQjtBQUNBOztBQUVjLFNBQVNZLElBQVQsR0FBdUc7QUFBQSxNQUF4RmIsSUFBd0YsdUVBQW5GLEVBQW1GO0FBQUEsTUFBL0VDLEtBQStFLHVFQUF6RSxDQUF5RTtBQUFBLE1BQXRFRSxHQUFzRSx1RUFBbEVILElBQUksQ0FBQ2MsTUFBNkQ7O0FBQUEsaUZBQUwsRUFBSztBQUFBLDBCQUFuRFYsT0FBbUQ7QUFBQSxNQUFuREEsT0FBbUQsNkJBQTFDVyxLQUFLLENBQUNYLE9BQW9DO0FBQUEsdUJBQTNCQyxJQUEyQjtBQUFBLE1BQTNCQSxJQUEyQiwwQkFBcEJVLEtBQUssQ0FBQ1YsSUFBYzs7QUFFckgsTUFBSUMsS0FBSyxHQUFHQSxLQUFLLElBQUk7QUFBRUksSUFBQUEsTUFBTSxFQUFFLENBQVY7QUFBYUUsSUFBQUEsT0FBTyxFQUFFLENBQXRCO0FBQXlCRCxJQUFBQSxJQUFJLEVBQUVLLEtBQUssQ0FBRWhCLElBQUksQ0FBQ2MsTUFBUDtBQUFwQyxHQUFyQixDQUZxSCxDQUlySDs7QUFFQSxNQUFJRyxHQUFHLEdBQUdkLEdBQUcsR0FBR0YsS0FBaEI7O0FBQ0EsTUFBS2dCLEdBQUcsR0FBRyxDQUFYLEVBQWU7QUFDZCxRQUFNZixHQUFHLEdBQUtDLEdBQUcsR0FBR0YsS0FBUixLQUFvQixDQUFoQztBQUVBWSxJQUFBQSxJQUFJLENBQUViLElBQUYsRUFBUUMsS0FBUixFQUFlQyxHQUFmLEVBQW9CO0FBQUVFLE1BQUFBLE9BQU8sRUFBRUEsT0FBWDtBQUFvQkMsTUFBQUEsSUFBSSxFQUFFQTtBQUExQixLQUFwQixDQUFKO0FBQ0FRLElBQUFBLElBQUksQ0FBRWIsSUFBRixFQUFRRSxHQUFSLEVBQWFDLEdBQWIsRUFBa0I7QUFBRUMsTUFBQUEsT0FBTyxFQUFFQSxPQUFYO0FBQW9CQyxNQUFBQSxJQUFJLEVBQUVBO0FBQTFCLEtBQWxCLENBQUo7QUFDQU4sSUFBQUEsS0FBSyxDQUFFQyxJQUFGLEVBQVFDLEtBQVIsRUFBZUMsR0FBZixFQUFvQkMsR0FBcEIsRUFBeUJDLE9BQXpCLEVBQWtDQyxJQUFsQyxFQUF3Q0MsS0FBeEMsQ0FBTDtBQUNBOztBQUVELFNBQU9BLEtBQVA7QUFDQTs7QUFFRCxTQUFTWSxJQUFULEdBQWdCO0FBQ2YsTUFBSUMsT0FBTyxHQUFHSixLQUFLLENBQUNLLFNBQU4sRUFBZDs7QUFDQSxNQUFJQyxHQUFHLHNCQUFPRixPQUFQLENBQVA7O0FBQ0FHLEVBQUFBLE9BQU8sQ0FBQ0MsSUFBUixDQUFjLFdBQWQ7QUFDQSxNQUFNakIsS0FBSyxHQUFHTyxJQUFJLENBQUVRLEdBQUYsQ0FBbEI7QUFDQUMsRUFBQUEsT0FBTyxDQUFDRSxPQUFSLENBQWlCLFdBQWpCO0FBRUFGLEVBQUFBLE9BQU8sQ0FBQ0csR0FBUixDQUFhSixHQUFHLENBQUNLLEtBQUosQ0FBVyxDQUFYLEVBQWMsQ0FBZCxJQUFvQixPQUFwQixHQUE4QkwsR0FBRyxDQUFDSyxLQUFKLENBQVcsQ0FBQyxDQUFaLENBQTNDO0FBQ0FKLEVBQUFBLE9BQU8sQ0FBQ0csR0FBUixDQUFhLFlBQVlWLEtBQUssQ0FBQ1ksV0FBTixDQUFtQk4sR0FBbkIsRUFBd0JGLE9BQXhCLENBQXpCO0FBQ0FHLEVBQUFBLE9BQU8sQ0FBQ0csR0FBUixDQUFhLFFBQWIsRUFBdUJuQixLQUF2QjtBQUNBIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9hcHB5L1FJL2pzLXNhbXBsZXMvYWxnb3MyLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFVUSUxTIGZyb20gXCIuL3V0aWxzXCI7XG5cblwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBtZXJnZSggZGF0YSwgc3RhcnQsIG1pZCwgZW5kLCBjb21wYXJlLCBzd2FwLCBzdGF0cyApIHtcblx0bGV0IGxocyA9IHN0YXJ0LCByaHMgPSBtaWQ7XG5cblx0Zm9yICggbGV0IGkgPSBzdGFydDsgaSA8IGVuZCAgJiYgIGxocyA8IG1pZDsgaSsrICkge1xuXHRcdGlmICggcmhzIDwgZW5kICkge1xuXHRcdFx0c3RhdHMubkNvbXBzKys7XG5cdFx0XHRzdGF0cy50ZW1wWyBpIF0gPSBjb21wYXJlKCBkYXRhWyBsaHMgXSwgZGF0YVsgcmhzIF0gKSA+IDAgPyBkYXRhWyByaHMrKyBdIDogZGF0YVsgbGhzKysgXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0c3RhdHMudGVtcFsgaSBdID0gZGF0YVsgbGhzKysgXTtcblx0XHR9XG5cdH1cblxuXHRmb3IgKCBsZXQgaSA9IHN0YXJ0OyBpIDwgcmhzOyBpKysgKSB7XG5cdFx0ZGF0YVsgaSBdID0gc3RhdHMudGVtcFsgaSBdO1xuXHR9XG5cdHN0YXRzLm5Xcml0ZXMgKz0gMiAqICggcmhzIC0gc3RhcnQgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc29ydCggZGF0YT1bXSwgc3RhcnQ9MCwgZW5kPWRhdGEubGVuZ3RoLCB7IGNvbXBhcmU9IFVUSUxTLmNvbXBhcmUsIHN3YXAgPSBVVElMUy5zd2FwIH0gPSB7fSApIHtcblxuXHRsZXQgc3RhdHMgPSBzdGF0cyB8fCB7IG5Db21wczogMCwgbldyaXRlczogMCwgdGVtcDogQXJyYXkoIGRhdGEubGVuZ3RoICkgfTtcblxuXHQvL0MgY29uc29sZS5sb2coIFwic29ydCggXCIgKyBzdGFydCArIFwiLCBcIiArIGVuZCArIFwiKVwiICk7XG5cblx0bGV0IGxlbiA9IGVuZCAtIHN0YXJ0O1xuXHRpZiAoIGxlbiA+IDEgKSB7XG5cdFx0Y29uc3QgbWlkID0gKCBlbmQgKyBzdGFydCApID4+PiAxO1xuXG5cdFx0c29ydCggZGF0YSwgc3RhcnQsIG1pZCwgeyBjb21wYXJlOiBjb21wYXJlLCBzd2FwOiBzd2FwIH0gKTtcblx0XHRzb3J0KCBkYXRhLCBtaWQsIGVuZCwgeyBjb21wYXJlOiBjb21wYXJlLCBzd2FwOiBzd2FwIH0gKTtcblx0XHRtZXJnZSggZGF0YSwgc3RhcnQsIG1pZCwgZW5kLCBjb21wYXJlLCBzd2FwLCBzdGF0cyApO1xuXHR9XG5cblx0cmV0dXJuIHN0YXRzO1xufVxuXG5mdW5jdGlvbiB0ZXN0KCkge1xuXHRsZXQgb3JpZ0FyciA9IFVUSUxTLm1ha2VBcnJheSgpO1xuXHRsZXQgYXJyID0gWy4uLm9yaWdBcnJdO1xuXHRjb25zb2xlLnRpbWUoIFwiTWVyZ2VTb3J0XCIgKTtcblx0Y29uc3Qgc3RhdHMgPSBzb3J0KCBhcnIgKTtcblx0Y29uc29sZS50aW1lRW5kKCBcIk1lcmdlU29ydFwiICk7XG5cblx0Y29uc29sZS5sb2coIGFyci5zbGljZSggMCwgNSApICsgXCIgLi4uIFwiICsgYXJyLnNsaWNlKCAtNSApICk7XG5cdGNvbnNvbGUubG9nKCBcIlNvcnRlZDpcIiArIFVUSUxTLmNoZWNrU29ydGVkKCBhcnIsIG9yaWdBcnIgKSApO1xuXHRjb25zb2xlLmxvZyggXCJTdGF0czpcIiwgc3RhdHMgKTtcbn0iXX0=",
    "map": {
      "version": 3,
      "sources": [
        "mergeSort.js"
      ],
      "names": [
        "merge",
        "data",
        "start",
        "mid",
        "end",
        "compare",
        "swap",
        "stats",
        "lhs",
        "rhs",
        "i",
        "nComps",
        "temp",
        "nWrites",
        "sort",
        "length",
        "UTILS",
        "Array",
        "len",
        "test",
        "origArr",
        "makeArray",
        "arr",
        "console",
        "time",
        "timeEnd",
        "log",
        "slice",
        "checkSorted"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/appy/QI/js-samples/algos2/",
      "sourcesContent": [
        "import * as UTILS from \"./utils\";\n\n\"use strict\";\n\nfunction merge( data, start, mid, end, compare, swap, stats ) {\n\tlet lhs = start, rhs = mid;\n\n\tfor ( let i = start; i < end  &&  lhs < mid; i++ ) {\n\t\tif ( rhs < end ) {\n\t\t\tstats.nComps++;\n\t\t\tstats.temp[ i ] = compare( data[ lhs ], data[ rhs ] ) > 0 ? data[ rhs++ ] : data[ lhs++ ];\n\t\t} else {\n\t\t\tstats.temp[ i ] = data[ lhs++ ];\n\t\t}\n\t}\n\n\tfor ( let i = start; i < rhs; i++ ) {\n\t\tdata[ i ] = stats.temp[ i ];\n\t}\n\tstats.nWrites += 2 * ( rhs - start );\n}\n\nexport default function sort( data=[], start=0, end=data.length, { compare= UTILS.compare, swap = UTILS.swap } = {} ) {\n\n\tlet stats = stats || { nComps: 0, nWrites: 0, temp: Array( data.length ) };\n\n\t//C console.log( \"sort( \" + start + \", \" + end + \")\" );\n\n\tlet len = end - start;\n\tif ( len > 1 ) {\n\t\tconst mid = ( end + start ) >>> 1;\n\n\t\tsort( data, start, mid, { compare: compare, swap: swap } );\n\t\tsort( data, mid, end, { compare: compare, swap: swap } );\n\t\tmerge( data, start, mid, end, compare, swap, stats );\n\t}\n\n\treturn stats;\n}\n\nfunction test() {\n\tlet origArr = UTILS.makeArray();\n\tlet arr = [...origArr];\n\tconsole.time( \"MergeSort\" );\n\tconst stats = sort( arr );\n\tconsole.timeEnd( \"MergeSort\" );\n\n\tconsole.log( arr.slice( 0, 5 ) + \" ... \" + arr.slice( -5 ) );\n\tconsole.log( \"Sorted:\" + UTILS.checkSorted( arr, origArr ) );\n\tconsole.log( \"Stats:\", stats );\n}"
      ]
    },
    "sourceType": "script",
    "mtime": 1591070598998
  },
  "{\"sourceMaps\":\"both\",\"sourceRoot\":\"/Users/appy/QI/js-samples/algos2/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/appy/QI/js-samples/algos2\",\"filename\":\"/Users/appy/QI/js-samples/algos2/quickSort.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/appy/QI/js-samples/algos2\",\"plugins\":[{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.10.1": {
    "metadata": {},
    "options": {
      "sourceMaps": "both",
      "sourceRoot": "/Users/appy/QI/js-samples/algos2/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/appy/QI/js-samples/algos2",
      "filename": "/Users/appy/QI/js-samples/algos2/quickSort.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/appy/QI/js-samples/algos2",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-escapes",
          "visitor": {
            "Identifier": {
              "enter": [
                null
              ]
            },
            "TemplateElement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/appy/QI/js-samples/algos2/quickSort.js",
        "plugins": [
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/appy/QI/js-samples/algos2/quickSort.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/appy/QI/js-samples/algos2/",
        "sourceFileName": "quickSort.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = sort;\n\nvar UTILS = _interopRequireWildcard(require(\"./utils\"));\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n\"use strict\";\n\nfunction partition(data, start, end, compare, swap, stats) {\n  var pivot = data[end - 1]; //Last Element as Pivot\n  //pivot = data[ Math.floor( ( start + end ) / 2 ) ];\n\n  var pIndex = start;\n\n  for (var i = start; i < end; i++) {\n    if (compare(data[i], pivot) <= 0) {\n      swap(data, i, pIndex++);\n      stats.nWrites += 2;\n    }\n  }\n\n  stats.nComps += end - start; //console.log( stats );\n\n  return pIndex - 1; //The new pivot index\n}\n\nfunction sort() {\n  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : data.length;\n\n  var _ref = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},\n      _ref$compare = _ref.compare,\n      compare = _ref$compare === void 0 ? UTILS.compare : _ref$compare,\n      _ref$swap = _ref.swap,\n      swap = _ref$swap === void 0 ? UTILS.swap : _ref$swap,\n      _ref$stats = _ref.stats,\n      stats = _ref$stats === void 0 ? {\n    nComps: 0,\n    nWrites: 0\n  } : _ref$stats;\n\n  if (start >= end) {\n    return;\n  } //stats = stats || { nComps: 0, nWrites: 0 };\n\n\n  var pIndex = partition(data, start, end, compare, swap, stats);\n  sort(data, start, pIndex, {\n    compare: compare,\n    swap: swap,\n    stats: stats\n  });\n  sort(data, pIndex + 1, end, {\n    compare: compare,\n    swap: swap,\n    stats: stats\n  });\n  return stats;\n}\n\nfunction test() {\n  var origArr = UTILS.makeArray();\n\n  var arr = _toConsumableArray(origArr);\n\n  console.time(\"QuickSort\");\n  var stats = sort(arr);\n  console.timeEnd(\"QuickSort\");\n  console.log(arr.slice(0, 5) + \" ... \" + arr.slice(-5));\n  console.log(\"Sorted:\" + UTILS.checkSorted(arr, origArr));\n  console.log(\"Stats:\", stats);\n} //test();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInF1aWNrU29ydC5qcyJdLCJuYW1lcyI6WyJwYXJ0aXRpb24iLCJkYXRhIiwic3RhcnQiLCJlbmQiLCJjb21wYXJlIiwic3dhcCIsInN0YXRzIiwicGl2b3QiLCJwSW5kZXgiLCJpIiwibldyaXRlcyIsIm5Db21wcyIsInNvcnQiLCJsZW5ndGgiLCJVVElMUyIsInRlc3QiLCJvcmlnQXJyIiwibWFrZUFycmF5IiwiYXJyIiwiY29uc29sZSIsInRpbWUiLCJ0aW1lRW5kIiwibG9nIiwic2xpY2UiLCJjaGVja1NvcnRlZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVBOztBQUVBLFNBQVNBLFNBQVQsQ0FBb0JDLElBQXBCLEVBQTBCQyxLQUExQixFQUFpQ0MsR0FBakMsRUFBc0NDLE9BQXRDLEVBQStDQyxJQUEvQyxFQUFxREMsS0FBckQsRUFBNkQ7QUFFNUQsTUFBSUMsS0FBSyxHQUFHTixJQUFJLENBQUVFLEdBQUcsR0FBRyxDQUFSLENBQWhCLENBRjRELENBRS9CO0FBQzdCOztBQUVBLE1BQUlLLE1BQU0sR0FBR04sS0FBYjs7QUFDQSxPQUFNLElBQUlPLENBQUMsR0FBR1AsS0FBZCxFQUFxQk8sQ0FBQyxHQUFHTixHQUF6QixFQUE4Qk0sQ0FBQyxFQUEvQixFQUFvQztBQUNuQyxRQUFLTCxPQUFPLENBQUVILElBQUksQ0FBRVEsQ0FBRixDQUFOLEVBQWFGLEtBQWIsQ0FBUCxJQUErQixDQUFwQyxFQUF3QztBQUN2Q0YsTUFBQUEsSUFBSSxDQUFFSixJQUFGLEVBQVFRLENBQVIsRUFBV0QsTUFBTSxFQUFqQixDQUFKO0FBQ0FGLE1BQUFBLEtBQUssQ0FBQ0ksT0FBTixJQUFpQixDQUFqQjtBQUNBO0FBQ0Q7O0FBQ0RKLEVBQUFBLEtBQUssQ0FBQ0ssTUFBTixJQUFnQlIsR0FBRyxHQUFHRCxLQUF0QixDQVo0RCxDQWE1RDs7QUFDQSxTQUFPTSxNQUFNLEdBQUcsQ0FBaEIsQ0FkNEQsQ0FjekM7QUFDbkI7O0FBRWMsU0FBU0ksSUFBVCxHQUN3RztBQUFBLE1BRHpGWCxJQUN5Rix1RUFEcEYsRUFDb0Y7QUFBQSxNQURoRkMsS0FDZ0YsdUVBRDFFLENBQzBFO0FBQUEsTUFEdkVDLEdBQ3VFLHVFQURuRUYsSUFBSSxDQUFDWSxNQUM4RDs7QUFBQSxpRkFBTCxFQUFLO0FBQUEsMEJBQXZGVCxPQUF1RjtBQUFBLE1BQXZGQSxPQUF1Riw2QkFBOUVVLEtBQUssQ0FBQ1YsT0FBd0U7QUFBQSx1QkFBL0RDLElBQStEO0FBQUEsTUFBL0RBLElBQStELDBCQUF4RFMsS0FBSyxDQUFDVCxJQUFrRDtBQUFBLHdCQUE1Q0MsS0FBNEM7QUFBQSxNQUE1Q0EsS0FBNEMsMkJBQW5DO0FBQUVLLElBQUFBLE1BQU0sRUFBRSxDQUFWO0FBQWFELElBQUFBLE9BQU8sRUFBRTtBQUF0QixHQUFtQzs7QUFDdEgsTUFBS1IsS0FBSyxJQUFJQyxHQUFkLEVBQW9CO0FBQ25CO0FBQ0EsR0FIcUgsQ0FLdEg7OztBQUNBLE1BQU1LLE1BQU0sR0FBR1IsU0FBUyxDQUFFQyxJQUFGLEVBQVFDLEtBQVIsRUFBZUMsR0FBZixFQUFvQkMsT0FBcEIsRUFBNkJDLElBQTdCLEVBQW1DQyxLQUFuQyxDQUF4QjtBQUNBTSxFQUFBQSxJQUFJLENBQUVYLElBQUYsRUFBUUMsS0FBUixFQUFlTSxNQUFmLEVBQXVCO0FBQUVKLElBQUFBLE9BQU8sRUFBQ0EsT0FBVjtBQUFtQkMsSUFBQUEsSUFBSSxFQUFDQSxJQUF4QjtBQUE4QkMsSUFBQUEsS0FBSyxFQUFDQTtBQUFwQyxHQUF2QixDQUFKO0FBQ0FNLEVBQUFBLElBQUksQ0FBRVgsSUFBRixFQUFRTyxNQUFNLEdBQUcsQ0FBakIsRUFBb0JMLEdBQXBCLEVBQXlCO0FBQUVDLElBQUFBLE9BQU8sRUFBQ0EsT0FBVjtBQUFtQkMsSUFBQUEsSUFBSSxFQUFDQSxJQUF4QjtBQUE4QkMsSUFBQUEsS0FBSyxFQUFDQTtBQUFwQyxHQUF6QixDQUFKO0FBRUEsU0FBT0EsS0FBUDtBQUNBOztBQUVELFNBQVNTLElBQVQsR0FBZ0I7QUFDZixNQUFJQyxPQUFPLEdBQUdGLEtBQUssQ0FBQ0csU0FBTixFQUFkOztBQUNBLE1BQUlDLEdBQUcsc0JBQU9GLE9BQVAsQ0FBUDs7QUFDQUcsRUFBQUEsT0FBTyxDQUFDQyxJQUFSLENBQWMsV0FBZDtBQUNBLE1BQU1kLEtBQUssR0FBR00sSUFBSSxDQUFFTSxHQUFGLENBQWxCO0FBQ0FDLEVBQUFBLE9BQU8sQ0FBQ0UsT0FBUixDQUFpQixXQUFqQjtBQUVBRixFQUFBQSxPQUFPLENBQUNHLEdBQVIsQ0FBYUosR0FBRyxDQUFDSyxLQUFKLENBQVcsQ0FBWCxFQUFjLENBQWQsSUFBb0IsT0FBcEIsR0FBOEJMLEdBQUcsQ0FBQ0ssS0FBSixDQUFXLENBQUMsQ0FBWixDQUEzQztBQUNBSixFQUFBQSxPQUFPLENBQUNHLEdBQVIsQ0FBYSxZQUFZUixLQUFLLENBQUNVLFdBQU4sQ0FBbUJOLEdBQW5CLEVBQXdCRixPQUF4QixDQUF6QjtBQUNBRyxFQUFBQSxPQUFPLENBQUNHLEdBQVIsQ0FBYSxRQUFiLEVBQXVCaEIsS0FBdkI7QUFDQSxDLENBRUQiLCJzb3VyY2VSb290IjoiL1VzZXJzL2FwcHkvUUkvanMtc2FtcGxlcy9hbGdvczIvIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgVVRJTFMgZnJvbSBcIi4vdXRpbHNcIjtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIHBhcnRpdGlvbiggZGF0YSwgc3RhcnQsIGVuZCwgY29tcGFyZSwgc3dhcCwgc3RhdHMgKSB7XG5cblx0bGV0IHBpdm90ID0gZGF0YVsgZW5kIC0gMSBdOyAvL0xhc3QgRWxlbWVudCBhcyBQaXZvdFxuXHQvL3Bpdm90ID0gZGF0YVsgTWF0aC5mbG9vciggKCBzdGFydCArIGVuZCApIC8gMiApIF07XG5cblx0bGV0IHBJbmRleCA9IHN0YXJ0O1xuXHRmb3IgKCBsZXQgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKysgKSB7XG5cdFx0aWYgKCBjb21wYXJlKCBkYXRhWyBpIF0sIHBpdm90ICkgPD0gMCApIHtcblx0XHRcdHN3YXAoIGRhdGEsIGksIHBJbmRleCsrICk7XG5cdFx0XHRzdGF0cy5uV3JpdGVzICs9IDI7XG5cdFx0fVxuXHR9XG5cdHN0YXRzLm5Db21wcyArPSBlbmQgLSBzdGFydDtcblx0Ly9jb25zb2xlLmxvZyggc3RhdHMgKTtcblx0cmV0dXJuIHBJbmRleCAtIDE7IC8vVGhlIG5ldyBwaXZvdCBpbmRleFxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzb3J0KCBkYXRhPVtdLCBzdGFydD0wLCBlbmQ9ZGF0YS5sZW5ndGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IGNvbXBhcmU9IFVUSUxTLmNvbXBhcmUsIHN3YXAgPSBVVElMUy5zd2FwLCBzdGF0cyA9ICB7IG5Db21wczogMCwgbldyaXRlczogMCB9IH0gPSB7fSApIHtcblx0aWYgKCBzdGFydCA+PSBlbmQgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly9zdGF0cyA9IHN0YXRzIHx8IHsgbkNvbXBzOiAwLCBuV3JpdGVzOiAwIH07XG5cdGNvbnN0IHBJbmRleCA9IHBhcnRpdGlvbiggZGF0YSwgc3RhcnQsIGVuZCwgY29tcGFyZSwgc3dhcCwgc3RhdHMgKTtcblx0c29ydCggZGF0YSwgc3RhcnQsIHBJbmRleCwgeyBjb21wYXJlOmNvbXBhcmUsIHN3YXA6c3dhcCwgc3RhdHM6c3RhdHMgfSApO1xuXHRzb3J0KCBkYXRhLCBwSW5kZXggKyAxLCBlbmQsIHsgY29tcGFyZTpjb21wYXJlLCBzd2FwOnN3YXAsIHN0YXRzOnN0YXRzfSk7XG5cblx0cmV0dXJuIHN0YXRzO1xufVxuXG5mdW5jdGlvbiB0ZXN0KCkge1xuXHRsZXQgb3JpZ0FyciA9IFVUSUxTLm1ha2VBcnJheSgpO1xuXHRsZXQgYXJyID0gWy4uLm9yaWdBcnJdO1xuXHRjb25zb2xlLnRpbWUoIFwiUXVpY2tTb3J0XCIgKTtcblx0Y29uc3Qgc3RhdHMgPSBzb3J0KCBhcnIgKTtcblx0Y29uc29sZS50aW1lRW5kKCBcIlF1aWNrU29ydFwiICk7XG5cblx0Y29uc29sZS5sb2coIGFyci5zbGljZSggMCwgNSApICsgXCIgLi4uIFwiICsgYXJyLnNsaWNlKCAtNSApICk7XG5cdGNvbnNvbGUubG9nKCBcIlNvcnRlZDpcIiArIFVUSUxTLmNoZWNrU29ydGVkKCBhcnIsIG9yaWdBcnIgKSApO1xuXHRjb25zb2xlLmxvZyggXCJTdGF0czpcIiwgc3RhdHMgKTtcbn1cblxuLy90ZXN0KCk7Il19",
    "map": {
      "version": 3,
      "sources": [
        "quickSort.js"
      ],
      "names": [
        "partition",
        "data",
        "start",
        "end",
        "compare",
        "swap",
        "stats",
        "pivot",
        "pIndex",
        "i",
        "nWrites",
        "nComps",
        "sort",
        "length",
        "UTILS",
        "test",
        "origArr",
        "makeArray",
        "arr",
        "console",
        "time",
        "timeEnd",
        "log",
        "slice",
        "checkSorted"
      ],
      "mappings": ";;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;AAEA;;AAEA,SAASA,SAAT,CAAoBC,IAApB,EAA0BC,KAA1B,EAAiCC,GAAjC,EAAsCC,OAAtC,EAA+CC,IAA/C,EAAqDC,KAArD,EAA6D;AAE5D,MAAIC,KAAK,GAAGN,IAAI,CAAEE,GAAG,GAAG,CAAR,CAAhB,CAF4D,CAE/B;AAC7B;;AAEA,MAAIK,MAAM,GAAGN,KAAb;;AACA,OAAM,IAAIO,CAAC,GAAGP,KAAd,EAAqBO,CAAC,GAAGN,GAAzB,EAA8BM,CAAC,EAA/B,EAAoC;AACnC,QAAKL,OAAO,CAAEH,IAAI,CAAEQ,CAAF,CAAN,EAAaF,KAAb,CAAP,IAA+B,CAApC,EAAwC;AACvCF,MAAAA,IAAI,CAAEJ,IAAF,EAAQQ,CAAR,EAAWD,MAAM,EAAjB,CAAJ;AACAF,MAAAA,KAAK,CAACI,OAAN,IAAiB,CAAjB;AACA;AACD;;AACDJ,EAAAA,KAAK,CAACK,MAAN,IAAgBR,GAAG,GAAGD,KAAtB,CAZ4D,CAa5D;;AACA,SAAOM,MAAM,GAAG,CAAhB,CAd4D,CAczC;AACnB;;AAEc,SAASI,IAAT,GACwG;AAAA,MADzFX,IACyF,uEADpF,EACoF;AAAA,MADhFC,KACgF,uEAD1E,CAC0E;AAAA,MADvEC,GACuE,uEADnEF,IAAI,CAACY,MAC8D;;AAAA,iFAAL,EAAK;AAAA,0BAAvFT,OAAuF;AAAA,MAAvFA,OAAuF,6BAA9EU,KAAK,CAACV,OAAwE;AAAA,uBAA/DC,IAA+D;AAAA,MAA/DA,IAA+D,0BAAxDS,KAAK,CAACT,IAAkD;AAAA,wBAA5CC,KAA4C;AAAA,MAA5CA,KAA4C,2BAAnC;AAAEK,IAAAA,MAAM,EAAE,CAAV;AAAaD,IAAAA,OAAO,EAAE;AAAtB,GAAmC;;AACtH,MAAKR,KAAK,IAAIC,GAAd,EAAoB;AACnB;AACA,GAHqH,CAKtH;;;AACA,MAAMK,MAAM,GAAGR,SAAS,CAAEC,IAAF,EAAQC,KAAR,EAAeC,GAAf,EAAoBC,OAApB,EAA6BC,IAA7B,EAAmCC,KAAnC,CAAxB;AACAM,EAAAA,IAAI,CAAEX,IAAF,EAAQC,KAAR,EAAeM,MAAf,EAAuB;AAAEJ,IAAAA,OAAO,EAACA,OAAV;AAAmBC,IAAAA,IAAI,EAACA,IAAxB;AAA8BC,IAAAA,KAAK,EAACA;AAApC,GAAvB,CAAJ;AACAM,EAAAA,IAAI,CAAEX,IAAF,EAAQO,MAAM,GAAG,CAAjB,EAAoBL,GAApB,EAAyB;AAAEC,IAAAA,OAAO,EAACA,OAAV;AAAmBC,IAAAA,IAAI,EAACA,IAAxB;AAA8BC,IAAAA,KAAK,EAACA;AAApC,GAAzB,CAAJ;AAEA,SAAOA,KAAP;AACA;;AAED,SAASS,IAAT,GAAgB;AACf,MAAIC,OAAO,GAAGF,KAAK,CAACG,SAAN,EAAd;;AACA,MAAIC,GAAG,sBAAOF,OAAP,CAAP;;AACAG,EAAAA,OAAO,CAACC,IAAR,CAAc,WAAd;AACA,MAAMd,KAAK,GAAGM,IAAI,CAAEM,GAAF,CAAlB;AACAC,EAAAA,OAAO,CAACE,OAAR,CAAiB,WAAjB;AAEAF,EAAAA,OAAO,CAACG,GAAR,CAAaJ,GAAG,CAACK,KAAJ,CAAW,CAAX,EAAc,CAAd,IAAoB,OAApB,GAA8BL,GAAG,CAACK,KAAJ,CAAW,CAAC,CAAZ,CAA3C;AACAJ,EAAAA,OAAO,CAACG,GAAR,CAAa,YAAYR,KAAK,CAACU,WAAN,CAAmBN,GAAnB,EAAwBF,OAAxB,CAAzB;AACAG,EAAAA,OAAO,CAACG,GAAR,CAAa,QAAb,EAAuBhB,KAAvB;AACA,C,CAED",
      "sourceRoot": "/Users/appy/QI/js-samples/algos2/",
      "sourcesContent": [
        "import * as UTILS from \"./utils\";\n\n\"use strict\";\n\nfunction partition( data, start, end, compare, swap, stats ) {\n\n\tlet pivot = data[ end - 1 ]; //Last Element as Pivot\n\t//pivot = data[ Math.floor( ( start + end ) / 2 ) ];\n\n\tlet pIndex = start;\n\tfor ( let i = start; i < end; i++ ) {\n\t\tif ( compare( data[ i ], pivot ) <= 0 ) {\n\t\t\tswap( data, i, pIndex++ );\n\t\t\tstats.nWrites += 2;\n\t\t}\n\t}\n\tstats.nComps += end - start;\n\t//console.log( stats );\n\treturn pIndex - 1; //The new pivot index\n}\n\nexport default function sort( data=[], start=0, end=data.length,\n                              { compare= UTILS.compare, swap = UTILS.swap, stats =  { nComps: 0, nWrites: 0 } } = {} ) {\n\tif ( start >= end ) {\n\t\treturn;\n\t}\n\n\t//stats = stats || { nComps: 0, nWrites: 0 };\n\tconst pIndex = partition( data, start, end, compare, swap, stats );\n\tsort( data, start, pIndex, { compare:compare, swap:swap, stats:stats } );\n\tsort( data, pIndex + 1, end, { compare:compare, swap:swap, stats:stats});\n\n\treturn stats;\n}\n\nfunction test() {\n\tlet origArr = UTILS.makeArray();\n\tlet arr = [...origArr];\n\tconsole.time( \"QuickSort\" );\n\tconst stats = sort( arr );\n\tconsole.timeEnd( \"QuickSort\" );\n\n\tconsole.log( arr.slice( 0, 5 ) + \" ... \" + arr.slice( -5 ) );\n\tconsole.log( \"Sorted:\" + UTILS.checkSorted( arr, origArr ) );\n\tconsole.log( \"Stats:\", stats );\n}\n\n//test();"
      ]
    },
    "sourceType": "script",
    "mtime": 1591087143131
  },
  "{\"sourceMaps\":\"both\",\"sourceRoot\":\"/Users/appy/QI/js-samples/algos2/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/appy/QI/js-samples/algos2\",\"filename\":\"/Users/appy/QI/js-samples/algos2/heap.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/appy/QI/js-samples/algos2\",\"plugins\":[{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.10.1": {
    "metadata": {},
    "options": {
      "sourceMaps": "both",
      "sourceRoot": "/Users/appy/QI/js-samples/algos2/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/appy/QI/js-samples/algos2",
      "filename": "/Users/appy/QI/js-samples/algos2/heap.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/appy/QI/js-samples/algos2",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-escapes",
          "visitor": {
            "Identifier": {
              "enter": [
                null
              ]
            },
            "TemplateElement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/appy/QI/js-samples/algos2/heap.js",
        "plugins": [
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/appy/QI/js-samples/algos2/heap.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/appy/QI/js-samples/algos2/",
        "sourceFileName": "heap.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Heap = void 0;\n\nvar UTILS = _interopRequireWildcard(require(\"./utils\"));\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Heap = /*#__PURE__*/function () {\n  function Heap(arr, compare, swap, stats) {\n    _classCallCheck(this, Heap);\n\n    this.heap = arr;\n    this.size = this.heap.length;\n    this.swap = swap || UTILS.swap;\n    this.compare = compare || UTILS.compare;\n    this.stats = stats || {\n      nWrites: 0,\n      nComps: 0\n    };\n    this.buildHeap();\n  }\n\n  _createClass(Heap, [{\n    key: \"getMax\",\n    value: function getMax() {\n      return this.heap[0];\n    }\n  }, {\n    key: \"parent\",\n    value: function parent(i) {\n      return i - 1 >>> 1;\n    }\n  }, {\n    key: \"leftChild\",\n    value: function leftChild(i) {\n      return i * 2 + 1;\n    }\n  }, {\n    key: \"rightChild\",\n    value: function rightChild(i) {\n      return i * 2 + 2;\n    }\n  }, {\n    key: \"insert\",\n    value: function insert(node) {\n      this.heap[this.size] = node;\n      this.size++;\n      var cur = this.size - 1;\n\n      while (cur > 0) {\n        var par = this.parent(cur);\n\n        if (this.compare(this.heap[cur], this.heap[par]) > 0) {\n          // cur.value is > par.value\n          this.swap(this.heap, cur, par);\n          this.stats.nWrites += 2;\n        }\n\n        this.stats.nComps += 2;\n        cur = par;\n      }\n    }\n  }, {\n    key: \"buildHeap\",\n    value: function buildHeap() {\n      for (var i = this.size >>> 1; i >= 0; i--) {\n        this.heapify(i); //this.print();\n      }\n    }\n  }, {\n    key: \"str\",\n    value: function str(i) {\n      return \"[\" + i + \"]=\" + (i < this.size ? this.heap[i] : 'null');\n    }\n  }, {\n    key: \"heapify\",\n    value: function heapify(nth) {\n      if (nth >= 0 && nth < this.size) {\n        var lc = this.leftChild(nth);\n        var rc = this.rightChild(nth);\n        var maxIdx = lc < this.size && this.compare(this.heap[lc], this.heap[nth]) > 0 ? lc : nth;\n        maxIdx = rc < this.size && this.compare(this.heap[rc], this.heap[maxIdx]) > 0 ? rc : maxIdx; //console.log( \"heapify \" + this.str( nth ) + \" lc:\" + this.str( lc ) + \" rc:\" + this.str( rc ) + \"  maxIdx=\" + maxIdx );\n\n        if (maxIdx > nth) {\n          this.swap(this.heap, nth, maxIdx);\n          this.stats.nWrites += 2;\n          this.heapify(maxIdx);\n        }\n\n        this.stats.nComps += 2;\n      }\n    }\n  }, {\n    key: \"sort\",\n    value: function sort() {\n      for (var i = this.size; i > 0; i--) {\n        this.size--;\n        this.swap(this.heap, this.size, 0); //Swap 1st and last element\n\n        this.heapify(0); //this.print();\n      }\n    }\n  }, {\n    key: \"print\",\n    value: function print() {\n      console.log(\"Size=\" + this.size + \"  HEAP=\" + this.heap);\n    }\n  }, {\n    key: \"validate\",\n    value: function validate(i) {\n      if (i < 0 || i >= this.size) {\n        return false;\n      }\n\n      var lc = this.leftChild(i);\n      var rc = this.rightChild(i);\n\n      if (this.compare(this.heap[lc], this.heap[i]) > 0) {\n        throw \"Invalid Heat at  [\" + i + \"]=\" + this.heap[i] + \" and [\" + lc + \"]\" + this.heap[lc];\n      }\n\n      if (this.compare(this.heap[rc], this.heap[i]) > 0) {\n        throw \"Invalid Heat at  [\" + i + \"]=\" + this.heap[i] + \" and [\" + rc + \"]\" + this.heap[rc];\n      }\n\n      this.validate(lc);\n      this.validate(rc);\n      return true;\n    }\n  }]);\n\n  return Heap;\n}();\n/*\nlet arr = UTILS.makeArray();\nvar heap = new Heap( arr );\n\n//arr.forEach( x => heap.insert( x ) );\n\nconsole.log( \"Valid Heap=\" + heap.validate( 0 ) );\nheap.sort();\n*/\n\n\nexports.Heap = Heap;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "heap.js"
      ],
      "names": [
        "Heap",
        "arr",
        "compare",
        "swap",
        "stats",
        "heap",
        "size",
        "length",
        "UTILS",
        "nWrites",
        "nComps",
        "buildHeap",
        "i",
        "node",
        "cur",
        "par",
        "parent",
        "heapify",
        "nth",
        "lc",
        "leftChild",
        "rc",
        "rightChild",
        "maxIdx",
        "console",
        "log",
        "validate"
      ],
      "mappings": ";;;;;;;;;AAAA;;;;;;;;;;;;IAEaA,I;AAEZ,gBAAaC,GAAb,EAAkBC,OAAlB,EAA2BC,IAA3B,EAAiCC,KAAjC,EAAyC;AAAA;;AACxC,SAAKC,IAAL,GAAYJ,GAAZ;AACA,SAAKK,IAAL,GAAY,KAAKD,IAAL,CAAUE,MAAtB;AACA,SAAKJ,IAAL,GAAYA,IAAI,IAAIK,KAAK,CAACL,IAA1B;AACA,SAAKD,OAAL,GAAeA,OAAO,IAAIM,KAAK,CAACN,OAAhC;AACA,SAAKE,KAAL,GAAaA,KAAK,IAAI;AAAEK,MAAAA,OAAO,EAAC,CAAV;AAAaC,MAAAA,MAAM,EAAC;AAApB,KAAtB;AACA,SAAKC,SAAL;AACA;;;;6BAEQ;AACR,aAAO,KAAKN,IAAL,CAAW,CAAX,CAAP;AACA;;;2BAEOO,C,EAAI;AACX,aAASA,CAAC,GAAG,CAAN,KAAc,CAArB;AACA;;;8BAEUA,C,EAAI;AACd,aAAOA,CAAC,GAAG,CAAJ,GAAQ,CAAf;AACA;;;+BAEWA,C,EAAI;AACf,aAAOA,CAAC,GAAG,CAAJ,GAAQ,CAAf;AACA;;;2BAEOC,I,EAAO;AACd,WAAKR,IAAL,CAAW,KAAKC,IAAhB,IAAyBO,IAAzB;AACA,WAAKP,IAAL;AAEA,UAAIQ,GAAG,GAAG,KAAKR,IAAL,GAAY,CAAtB;;AACA,aAAQQ,GAAG,GAAG,CAAd,EAAkB;AACjB,YAAIC,GAAG,GAAG,KAAKC,MAAL,CAAaF,GAAb,CAAV;;AACA,YAAK,KAAKZ,OAAL,CAAc,KAAKG,IAAL,CAAWS,GAAX,CAAd,EAAgC,KAAKT,IAAL,CAAWU,GAAX,CAAhC,IAAqD,CAA1D,EAA8D;AAC7D;AACA,eAAKZ,IAAL,CAAW,KAAKE,IAAhB,EAAsBS,GAAtB,EAA2BC,GAA3B;AACA,eAAKX,KAAL,CAAWK,OAAX,IAAsB,CAAtB;AACA;;AACD,aAAKL,KAAL,CAAWM,MAAX,IAAqB,CAArB;AACAI,QAAAA,GAAG,GAAGC,GAAN;AACA;AACD;;;gCAEW;AACX,WAAM,IAAIH,CAAC,GAAK,KAAKN,IAAL,KAAc,CAA9B,EAAmCM,CAAC,IAAI,CAAxC,EAA2CA,CAAC,EAA5C,EAAiD;AAChD,aAAKK,OAAL,CAAcL,CAAd,EADgD,CAEhD;AACA;AACD;;;wBAEIA,C,EAAI;AACR,aAAO,MAAMA,CAAN,GAAU,IAAV,IAAmBA,CAAC,GAAG,KAAKN,IAAT,GAAiB,KAAKD,IAAL,CAAWO,CAAX,CAAjB,GAAkC,MAArD,CAAP;AACA;;;4BAEQM,G,EAAM;AACd,UAAKA,GAAG,IAAI,CAAP,IAAYA,GAAG,GAAG,KAAKZ,IAA5B,EAAmC;AAClC,YAAIa,EAAE,GAAG,KAAKC,SAAL,CAAgBF,GAAhB,CAAT;AACA,YAAIG,EAAE,GAAG,KAAKC,UAAL,CAAiBJ,GAAjB,CAAT;AACA,YAAIK,MAAM,GAAKJ,EAAE,GAAG,KAAKb,IAAV,IAAkB,KAAKJ,OAAL,CAAc,KAAKG,IAAL,CAAWc,EAAX,CAAd,EAA+B,KAAKd,IAAL,CAAWa,GAAX,CAA/B,IAAoD,CAAxE,GAA8EC,EAA9E,GAAmFD,GAAhG;AACAK,QAAAA,MAAM,GAAKF,EAAE,GAAG,KAAKf,IAAV,IAAkB,KAAKJ,OAAL,CAAc,KAAKG,IAAL,CAAWgB,EAAX,CAAd,EAA+B,KAAKhB,IAAL,CAAWkB,MAAX,CAA/B,IAAuD,CAA3E,GAAiFF,EAAjF,GAAsFE,MAA/F,CAJkC,CAMlC;;AACA,YAAKA,MAAM,GAAGL,GAAd,EAAoB;AACnB,eAAKf,IAAL,CAAW,KAAKE,IAAhB,EAAsBa,GAAtB,EAA2BK,MAA3B;AACA,eAAKnB,KAAL,CAAWK,OAAX,IAAsB,CAAtB;AACA,eAAKQ,OAAL,CAAcM,MAAd;AACA;;AACD,aAAKnB,KAAL,CAAWM,MAAX,IAAqB,CAArB;AACA;AACD;;;2BAEK;AACL,WAAM,IAAIE,CAAC,GAAG,KAAKN,IAAnB,EAAyBM,CAAC,GAAG,CAA7B,EAAgCA,CAAC,EAAjC,EAAsC;AACrC,aAAKN,IAAL;AACA,aAAKH,IAAL,CAAW,KAAKE,IAAhB,EAAsB,KAAKC,IAA3B,EAAiC,CAAjC,EAFqC,CAEC;;AACtC,aAAKW,OAAL,CAAc,CAAd,EAHqC,CAIrC;AACA;AACD;;;4BAEO;AACPO,MAAAA,OAAO,CAACC,GAAR,CAAa,UAAU,KAAKnB,IAAf,GAAsB,SAAtB,GAAkC,KAAKD,IAApD;AACA;;;6BAESO,C,EAAI;AACb,UAAKA,CAAC,GAAG,CAAJ,IAASA,CAAC,IAAI,KAAKN,IAAxB,EAA+B;AAC9B,eAAO,KAAP;AACA;;AAED,UAAIa,EAAE,GAAG,KAAKC,SAAL,CAAgBR,CAAhB,CAAT;AACA,UAAIS,EAAE,GAAG,KAAKC,UAAL,CAAiBV,CAAjB,CAAT;;AAEA,UAAK,KAAKV,OAAL,CAAc,KAAKG,IAAL,CAAWc,EAAX,CAAd,EAA+B,KAAKd,IAAL,CAAWO,CAAX,CAA/B,IAAkD,CAAvD,EAA2D;AAC1D,cAAM,uBAAuBA,CAAvB,GAA2B,IAA3B,GAAkC,KAAKP,IAAL,CAAWO,CAAX,CAAlC,GAAmD,QAAnD,GAA8DO,EAA9D,GAAmE,GAAnE,GAAyE,KAAKd,IAAL,CAAWc,EAAX,CAA/E;AACA;;AACD,UAAK,KAAKjB,OAAL,CAAc,KAAKG,IAAL,CAAWgB,EAAX,CAAd,EAA+B,KAAKhB,IAAL,CAAWO,CAAX,CAA/B,IAAkD,CAAvD,EAA2D;AAC1D,cAAM,uBAAuBA,CAAvB,GAA2B,IAA3B,GAAkC,KAAKP,IAAL,CAAWO,CAAX,CAAlC,GAAmD,QAAnD,GAA8DS,EAA9D,GAAmE,GAAnE,GAAyE,KAAKhB,IAAL,CAAWgB,EAAX,CAA/E;AACA;;AACD,WAAKK,QAAL,CAAeP,EAAf;AACA,WAAKO,QAAL,CAAeL,EAAf;AACA,aAAO,IAAP;AACA;;;;;AAGF",
      "sourceRoot": "/Users/appy/QI/js-samples/algos2/",
      "sourcesContent": [
        "import * as UTILS from \"./utils\";\n\nexport class Heap {\n\n\tconstructor( arr, compare, swap, stats ) {\n\t\tthis.heap = arr;\n\t\tthis.size = this.heap.length;\n\t\tthis.swap = swap || UTILS.swap;\n\t\tthis.compare = compare || UTILS.compare;\n\t\tthis.stats = stats || { nWrites:0, nComps:0 };\n\t\tthis.buildHeap();\n\t}\n\n\tgetMax() {\n\t\treturn this.heap[ 0 ];\n\t}\n\n\tparent( i ) {\n\t\treturn ( i - 1 ) >>> 1;\n\t}\n\n\tleftChild( i ) {\n\t\treturn i * 2 + 1;\n\t}\n\n\trightChild( i ) {\n\t\treturn i * 2 + 2;\n\t}\n\n\tinsert( node ) {\n\t\tthis.heap[ this.size ] = node;\n\t\tthis.size++;\n\n\t\tlet cur = this.size - 1;\n\t\twhile ( cur > 0 ) {\n\t\t\tlet par = this.parent( cur );\n\t\t\tif ( this.compare( this.heap[ cur ], this.heap[ par ] ) > 0 ) {\n\t\t\t\t// cur.value is > par.value\n\t\t\t\tthis.swap( this.heap, cur, par );\n\t\t\t\tthis.stats.nWrites += 2;\n\t\t\t}\n\t\t\tthis.stats.nComps += 2;\n\t\t\tcur = par;\n\t\t}\n\t}\n\n\tbuildHeap() {\n\t\tfor ( let i = ( this.size >>> 1 ); i >= 0; i-- ) {\n\t\t\tthis.heapify( i );\n\t\t\t//this.print();\n\t\t}\n\t}\n\n\tstr( i ) {\n\t\treturn \"[\" + i + \"]=\" + ( i < this.size  ? this.heap[ i ] : 'null' );\n\t}\n\n\theapify( nth ) {\n\t\tif ( nth >= 0 && nth < this.size ) {\n\t\t\tlet lc = this.leftChild( nth );\n\t\t\tlet rc = this.rightChild( nth );\n\t\t\tlet maxIdx = ( lc < this.size && this.compare( this.heap[ lc ], this.heap[ nth ] ) > 0 ) ? lc : nth;\n\t\t\tmaxIdx = ( rc < this.size && this.compare( this.heap[ rc ], this.heap[ maxIdx ] ) > 0 ) ? rc : maxIdx;\n\n\t\t\t//console.log( \"heapify \" + this.str( nth ) + \" lc:\" + this.str( lc ) + \" rc:\" + this.str( rc ) + \"  maxIdx=\" + maxIdx );\n\t\t\tif ( maxIdx > nth ) {\n\t\t\t\tthis.swap( this.heap, nth, maxIdx );\n\t\t\t\tthis.stats.nWrites += 2;\n\t\t\t\tthis.heapify( maxIdx );\n\t\t\t}\n\t\t\tthis.stats.nComps += 2;\n\t\t}\n\t}\n\n\tsort(){\n\t\tfor ( let i = this.size; i > 0; i-- ) {\n\t\t\tthis.size--;\n\t\t\tthis.swap( this.heap, this.size, 0 ); //Swap 1st and last element\n\t\t\tthis.heapify( 0 );\n\t\t\t//this.print();\n\t\t}\n\t}\n\n\tprint() {\n\t\tconsole.log( \"Size=\" + this.size + \"  HEAP=\" + this.heap );\n\t}\n\n\tvalidate( i ) {\n\t\tif ( i < 0 || i >= this.size ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tlet lc = this.leftChild( i );\n\t\tlet rc = this.rightChild( i );\n\n\t\tif ( this.compare( this.heap[ lc ], this.heap[ i ] ) > 0 ) {\n\t\t\tthrow \"Invalid Heat at  [\" + i + \"]=\" + this.heap[ i ] + \" and [\" + lc + \"]\" + this.heap[ lc ];\n\t\t}\n\t\tif ( this.compare( this.heap[ rc ], this.heap[ i ] ) > 0 ) {\n\t\t\tthrow \"Invalid Heat at  [\" + i + \"]=\" + this.heap[ i ] + \" and [\" + rc + \"]\" + this.heap[ rc ];\n\t\t}\n\t\tthis.validate( lc );\n\t\tthis.validate( rc );\n\t\treturn true;\n\t}\n}\n\n/*\nlet arr = UTILS.makeArray();\nvar heap = new Heap( arr );\n\n//arr.forEach( x => heap.insert( x ) );\n\nconsole.log( \"Valid Heap=\" + heap.validate( 0 ) );\nheap.sort();\n*/\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1590655721698
  },
  "{\"sourceMaps\":\"both\",\"sourceRoot\":\"/Users/appy/QI/js-samples/algos2/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/appy/QI/js-samples/algos2\",\"filename\":\"/Users/appy/QI/js-samples/algos2/heapSort.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/appy/QI/js-samples/algos2\",\"plugins\":[{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.10.1": {
    "metadata": {},
    "options": {
      "sourceMaps": "both",
      "sourceRoot": "/Users/appy/QI/js-samples/algos2/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/appy/QI/js-samples/algos2",
      "filename": "/Users/appy/QI/js-samples/algos2/heapSort.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/appy/QI/js-samples/algos2",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-escapes",
          "visitor": {
            "Identifier": {
              "enter": [
                null
              ]
            },
            "TemplateElement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/appy/QI/js-samples/algos2/heapSort.js",
        "plugins": [
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/appy/QI/js-samples/algos2/heapSort.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/appy/QI/js-samples/algos2/",
        "sourceFileName": "heapSort.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = sort;\n\nvar UTILS = _interopRequireWildcard(require(\"./utils\"));\n\nvar _heap = require(\"./heap\");\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n\"use strict\";\n\nfunction sort() {\n  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : data.length;\n\n  var _ref = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},\n      _ref$compare = _ref.compare,\n      compare = _ref$compare === void 0 ? UTILS.compare : _ref$compare,\n      _ref$swap = _ref.swap,\n      swap = _ref$swap === void 0 ? UTILS.swap : _ref$swap;\n\n  var stats = {\n    nComps: 0,\n    nWrites: 0\n  };\n  var h = new _heap.Heap(data, compare, swap, stats);\n\n  for (var i = h.size; i > 0; i--) {\n    h.size--;\n    swap(h.heap, h.size, 0); //Swap 1st and last element\n\n    h.heapify(0); //h.print();\n  }\n\n  return stats;\n}\n\nfunction test() {\n  var origArr = UTILS.makeArray();\n\n  var arr = _toConsumableArray(origArr);\n\n  console.time(\"HeapSort\");\n  var stats = sort(arr);\n  console.timeEnd(\"HeapSort\");\n  console.log(arr.slice(0, 5) + \" ... \" + arr.slice(-5));\n  console.log(\"Sorted:\" + UTILS.checkSorted(arr, origArr));\n  console.log(\"Stats:\", stats);\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhlYXBTb3J0LmpzIl0sIm5hbWVzIjpbInNvcnQiLCJkYXRhIiwic3RhcnQiLCJlbmQiLCJsZW5ndGgiLCJjb21wYXJlIiwiVVRJTFMiLCJzd2FwIiwic3RhdHMiLCJuQ29tcHMiLCJuV3JpdGVzIiwiaCIsIkhlYXAiLCJpIiwic2l6ZSIsImhlYXAiLCJoZWFwaWZ5IiwidGVzdCIsIm9yaWdBcnIiLCJtYWtlQXJyYXkiLCJhcnIiLCJjb25zb2xlIiwidGltZSIsInRpbWVFbmQiLCJsb2ciLCJzbGljZSIsImNoZWNrU29ydGVkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUE7O0FBRWUsU0FBU0EsSUFBVCxHQUF1RztBQUFBLE1BQXhGQyxJQUF3Rix1RUFBbkYsRUFBbUY7QUFBQSxNQUEvRUMsS0FBK0UsdUVBQXpFLENBQXlFO0FBQUEsTUFBdEVDLEdBQXNFLHVFQUFsRUYsSUFBSSxDQUFDRyxNQUE2RDs7QUFBQSxpRkFBTCxFQUFLO0FBQUEsMEJBQW5EQyxPQUFtRDtBQUFBLE1BQW5EQSxPQUFtRCw2QkFBMUNDLEtBQUssQ0FBQ0QsT0FBb0M7QUFBQSx1QkFBM0JFLElBQTJCO0FBQUEsTUFBM0JBLElBQTJCLDBCQUFwQkQsS0FBSyxDQUFDQyxJQUFjOztBQUVySCxNQUFJQyxLQUFLLEdBQUc7QUFBRUMsSUFBQUEsTUFBTSxFQUFFLENBQVY7QUFBYUMsSUFBQUEsT0FBTyxFQUFFO0FBQXRCLEdBQVo7QUFDQSxNQUFJQyxDQUFDLEdBQUcsSUFBSUMsVUFBSixDQUFVWCxJQUFWLEVBQWdCSSxPQUFoQixFQUF5QkUsSUFBekIsRUFBK0JDLEtBQS9CLENBQVI7O0FBRUEsT0FBTSxJQUFJSyxDQUFDLEdBQUdGLENBQUMsQ0FBQ0csSUFBaEIsRUFBc0JELENBQUMsR0FBRyxDQUExQixFQUE2QkEsQ0FBQyxFQUE5QixFQUFtQztBQUNsQ0YsSUFBQUEsQ0FBQyxDQUFDRyxJQUFGO0FBQ0FQLElBQUFBLElBQUksQ0FBRUksQ0FBQyxDQUFDSSxJQUFKLEVBQVVKLENBQUMsQ0FBQ0csSUFBWixFQUFrQixDQUFsQixDQUFKLENBRmtDLENBRVA7O0FBQzNCSCxJQUFBQSxDQUFDLENBQUNLLE9BQUYsQ0FBVyxDQUFYLEVBSGtDLENBSWxDO0FBQ0E7O0FBRUQsU0FBT1IsS0FBUDtBQUNBOztBQUVELFNBQVNTLElBQVQsR0FBZ0I7QUFDZixNQUFJQyxPQUFPLEdBQUdaLEtBQUssQ0FBQ2EsU0FBTixFQUFkOztBQUNBLE1BQUlDLEdBQUcsc0JBQU9GLE9BQVAsQ0FBUDs7QUFDQUcsRUFBQUEsT0FBTyxDQUFDQyxJQUFSLENBQWMsVUFBZDtBQUNBLE1BQU1kLEtBQUssR0FBR1IsSUFBSSxDQUFFb0IsR0FBRixDQUFsQjtBQUNBQyxFQUFBQSxPQUFPLENBQUNFLE9BQVIsQ0FBaUIsVUFBakI7QUFFQUYsRUFBQUEsT0FBTyxDQUFDRyxHQUFSLENBQWFKLEdBQUcsQ0FBQ0ssS0FBSixDQUFXLENBQVgsRUFBYyxDQUFkLElBQW9CLE9BQXBCLEdBQThCTCxHQUFHLENBQUNLLEtBQUosQ0FBVyxDQUFDLENBQVosQ0FBM0M7QUFDQUosRUFBQUEsT0FBTyxDQUFDRyxHQUFSLENBQWEsWUFBWWxCLEtBQUssQ0FBQ29CLFdBQU4sQ0FBbUJOLEdBQW5CLEVBQXdCRixPQUF4QixDQUF6QjtBQUNBRyxFQUFBQSxPQUFPLENBQUNHLEdBQVIsQ0FBYSxRQUFiLEVBQXVCaEIsS0FBdkI7QUFDQSIsInNvdXJjZVJvb3QiOiIvVXNlcnMvYXBweS9RSS9qcy1zYW1wbGVzL2FsZ29zMi8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBVVElMUyBmcm9tIFwiLi91dGlsc1wiO1xuaW1wb3J0IHsgSGVhcCB9IGZyb20gXCIuL2hlYXBcIjtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNvcnQoIGRhdGE9W10sIHN0YXJ0PTAsIGVuZD1kYXRhLmxlbmd0aCwgeyBjb21wYXJlPSBVVElMUy5jb21wYXJlLCBzd2FwID0gVVRJTFMuc3dhcCB9ID0ge30gKSB7XG5cblx0bGV0IHN0YXRzID0geyBuQ29tcHM6IDAsIG5Xcml0ZXM6IDAgfTtcblx0bGV0IGggPSBuZXcgSGVhcCggZGF0YSwgY29tcGFyZSwgc3dhcCwgc3RhdHMgKTtcblxuXHRmb3IgKCBsZXQgaSA9IGguc2l6ZTsgaSA+IDA7IGktLSApIHtcblx0XHRoLnNpemUtLTtcblx0XHRzd2FwKCBoLmhlYXAsIGguc2l6ZSwgMCApOyAvL1N3YXAgMXN0IGFuZCBsYXN0IGVsZW1lbnRcblx0XHRoLmhlYXBpZnkoIDAgKTtcblx0XHQvL2gucHJpbnQoKTtcblx0fVxuXG5cdHJldHVybiBzdGF0cztcbn1cblxuZnVuY3Rpb24gdGVzdCgpIHtcblx0bGV0IG9yaWdBcnIgPSBVVElMUy5tYWtlQXJyYXkoKTtcblx0bGV0IGFyciA9IFsuLi5vcmlnQXJyXTtcblx0Y29uc29sZS50aW1lKCBcIkhlYXBTb3J0XCIgKTtcblx0Y29uc3Qgc3RhdHMgPSBzb3J0KCBhcnIgKTtcblx0Y29uc29sZS50aW1lRW5kKCBcIkhlYXBTb3J0XCIgKTtcblxuXHRjb25zb2xlLmxvZyggYXJyLnNsaWNlKCAwLCA1ICkgKyBcIiAuLi4gXCIgKyBhcnIuc2xpY2UoIC01ICkgKTtcblx0Y29uc29sZS5sb2coIFwiU29ydGVkOlwiICsgVVRJTFMuY2hlY2tTb3J0ZWQoIGFyciwgb3JpZ0FyciApICk7XG5cdGNvbnNvbGUubG9nKCBcIlN0YXRzOlwiLCBzdGF0cyApO1xufSJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "heapSort.js"
      ],
      "names": [
        "sort",
        "data",
        "start",
        "end",
        "length",
        "compare",
        "UTILS",
        "swap",
        "stats",
        "nComps",
        "nWrites",
        "h",
        "Heap",
        "i",
        "size",
        "heap",
        "heapify",
        "test",
        "origArr",
        "makeArray",
        "arr",
        "console",
        "time",
        "timeEnd",
        "log",
        "slice",
        "checkSorted"
      ],
      "mappings": ";;;;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;;;AAEA;;AAEe,SAASA,IAAT,GAAuG;AAAA,MAAxFC,IAAwF,uEAAnF,EAAmF;AAAA,MAA/EC,KAA+E,uEAAzE,CAAyE;AAAA,MAAtEC,GAAsE,uEAAlEF,IAAI,CAACG,MAA6D;;AAAA,iFAAL,EAAK;AAAA,0BAAnDC,OAAmD;AAAA,MAAnDA,OAAmD,6BAA1CC,KAAK,CAACD,OAAoC;AAAA,uBAA3BE,IAA2B;AAAA,MAA3BA,IAA2B,0BAApBD,KAAK,CAACC,IAAc;;AAErH,MAAIC,KAAK,GAAG;AAAEC,IAAAA,MAAM,EAAE,CAAV;AAAaC,IAAAA,OAAO,EAAE;AAAtB,GAAZ;AACA,MAAIC,CAAC,GAAG,IAAIC,UAAJ,CAAUX,IAAV,EAAgBI,OAAhB,EAAyBE,IAAzB,EAA+BC,KAA/B,CAAR;;AAEA,OAAM,IAAIK,CAAC,GAAGF,CAAC,CAACG,IAAhB,EAAsBD,CAAC,GAAG,CAA1B,EAA6BA,CAAC,EAA9B,EAAmC;AAClCF,IAAAA,CAAC,CAACG,IAAF;AACAP,IAAAA,IAAI,CAAEI,CAAC,CAACI,IAAJ,EAAUJ,CAAC,CAACG,IAAZ,EAAkB,CAAlB,CAAJ,CAFkC,CAEP;;AAC3BH,IAAAA,CAAC,CAACK,OAAF,CAAW,CAAX,EAHkC,CAIlC;AACA;;AAED,SAAOR,KAAP;AACA;;AAED,SAASS,IAAT,GAAgB;AACf,MAAIC,OAAO,GAAGZ,KAAK,CAACa,SAAN,EAAd;;AACA,MAAIC,GAAG,sBAAOF,OAAP,CAAP;;AACAG,EAAAA,OAAO,CAACC,IAAR,CAAc,UAAd;AACA,MAAMd,KAAK,GAAGR,IAAI,CAAEoB,GAAF,CAAlB;AACAC,EAAAA,OAAO,CAACE,OAAR,CAAiB,UAAjB;AAEAF,EAAAA,OAAO,CAACG,GAAR,CAAaJ,GAAG,CAACK,KAAJ,CAAW,CAAX,EAAc,CAAd,IAAoB,OAApB,GAA8BL,GAAG,CAACK,KAAJ,CAAW,CAAC,CAAZ,CAA3C;AACAJ,EAAAA,OAAO,CAACG,GAAR,CAAa,YAAYlB,KAAK,CAACoB,WAAN,CAAmBN,GAAnB,EAAwBF,OAAxB,CAAzB;AACAG,EAAAA,OAAO,CAACG,GAAR,CAAa,QAAb,EAAuBhB,KAAvB;AACA",
      "sourceRoot": "/Users/appy/QI/js-samples/algos2/",
      "sourcesContent": [
        "import * as UTILS from \"./utils\";\nimport { Heap } from \"./heap\";\n\n\"use strict\";\n\nexport default function sort( data=[], start=0, end=data.length, { compare= UTILS.compare, swap = UTILS.swap } = {} ) {\n\n\tlet stats = { nComps: 0, nWrites: 0 };\n\tlet h = new Heap( data, compare, swap, stats );\n\n\tfor ( let i = h.size; i > 0; i-- ) {\n\t\th.size--;\n\t\tswap( h.heap, h.size, 0 ); //Swap 1st and last element\n\t\th.heapify( 0 );\n\t\t//h.print();\n\t}\n\n\treturn stats;\n}\n\nfunction test() {\n\tlet origArr = UTILS.makeArray();\n\tlet arr = [...origArr];\n\tconsole.time( \"HeapSort\" );\n\tconst stats = sort( arr );\n\tconsole.timeEnd( \"HeapSort\" );\n\n\tconsole.log( arr.slice( 0, 5 ) + \" ... \" + arr.slice( -5 ) );\n\tconsole.log( \"Sorted:\" + UTILS.checkSorted( arr, origArr ) );\n\tconsole.log( \"Stats:\", stats );\n}"
      ]
    },
    "sourceType": "script",
    "mtime": 1591070614582
  },
  "{\"sourceMaps\":\"both\",\"sourceRoot\":\"/Users/appy/QI/js-samples/algos2/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/appy/QI/js-samples/algos2\",\"filename\":\"/Users/appy/QI/js-samples/algos2/insertionSort.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/appy/QI/js-samples/algos2\",\"plugins\":[{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.10.1": {
    "metadata": {},
    "options": {
      "sourceMaps": "both",
      "sourceRoot": "/Users/appy/QI/js-samples/algos2/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/appy/QI/js-samples/algos2",
      "filename": "/Users/appy/QI/js-samples/algos2/insertionSort.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/appy/QI/js-samples/algos2",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-escapes",
          "visitor": {
            "Identifier": {
              "enter": [
                null
              ]
            },
            "TemplateElement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/appy/QI/js-samples/algos2/insertionSort.js",
        "plugins": [
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/appy/QI/js-samples/algos2/insertionSort.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/appy/QI/js-samples/algos2/",
        "sourceFileName": "insertionSort.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = sort;\n\nvar UTILS = _interopRequireWildcard(require(\"./utils\"));\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction sort() {\n  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : data.length;\n\n  var _ref = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},\n      _ref$compare = _ref.compare,\n      compare = _ref$compare === void 0 ? UTILS.compare : _ref$compare;\n\n  var stats = {\n    nComps: 0,\n    nWrites: 0\n  };\n\n  for (var i = start + 1; i < end; i++) {\n    for (var j = start; j < i; j++) {\n      stats.nComps++;\n\n      if (compare(data[i], data[j]) < 0) {\n        UTILS.rotateRight(data, j, i);\n        stats.nWrites += i - j;\n        break;\n      }\n    }\n  }\n\n  return stats;\n}\n\nfunction test() {\n  var origArr = UTILS.makeArray();\n\n  var arr = _toConsumableArray(origArr);\n\n  console.time(\"InsertionSort\");\n  var stats = sort(arr);\n  console.timeEnd(\"InsertionSort\");\n  console.log(arr.slice(0, 5) + \" ... \" + arr.slice(-5));\n  console.log(\"Sorted:\" + UTILS.checkSorted(arr, origArr));\n  console.log(\"Stats:\", stats);\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluc2VydGlvblNvcnQuanMiXSwibmFtZXMiOlsic29ydCIsImRhdGEiLCJzdGFydCIsImVuZCIsImxlbmd0aCIsImNvbXBhcmUiLCJVVElMUyIsInN0YXRzIiwibkNvbXBzIiwibldyaXRlcyIsImkiLCJqIiwicm90YXRlUmlnaHQiLCJ0ZXN0Iiwib3JpZ0FyciIsIm1ha2VBcnJheSIsImFyciIsImNvbnNvbGUiLCJ0aW1lIiwidGltZUVuZCIsImxvZyIsInNsaWNlIiwiY2hlY2tTb3J0ZWQiXSwibWFwcGluZ3MiOiJBQUNBOzs7Ozs7Ozs7QUFFQTs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRWUsU0FBU0EsSUFBVCxHQUFzRjtBQUFBLE1BQXZFQyxJQUF1RSx1RUFBbEUsRUFBa0U7QUFBQSxNQUE5REMsS0FBOEQsdUVBQXhELENBQXdEO0FBQUEsTUFBckRDLEdBQXFELHVFQUFqREYsSUFBSSxDQUFDRyxNQUE0Qzs7QUFBQSxpRkFBTixFQUFNO0FBQUEsMEJBQWpDQyxPQUFpQztBQUFBLE1BQWpDQSxPQUFpQyw2QkFBeEJDLEtBQUssQ0FBQ0QsT0FBa0I7O0FBRXBHLE1BQUlFLEtBQUssR0FBRztBQUFFQyxJQUFBQSxNQUFNLEVBQUUsQ0FBVjtBQUFhQyxJQUFBQSxPQUFPLEVBQUU7QUFBdEIsR0FBWjs7QUFDQSxPQUFNLElBQUlDLENBQUMsR0FBR1IsS0FBSyxHQUFHLENBQXRCLEVBQXlCUSxDQUFDLEdBQUdQLEdBQTdCLEVBQWtDTyxDQUFDLEVBQW5DLEVBQXdDO0FBQ3ZDLFNBQU0sSUFBSUMsQ0FBQyxHQUFHVCxLQUFkLEVBQXFCUyxDQUFDLEdBQUdELENBQXpCLEVBQTRCQyxDQUFDLEVBQTdCLEVBQWtDO0FBQ2pDSixNQUFBQSxLQUFLLENBQUNDLE1BQU47O0FBQ0EsVUFBS0gsT0FBTyxDQUFFSixJQUFJLENBQUVTLENBQUYsQ0FBTixFQUFhVCxJQUFJLENBQUVVLENBQUYsQ0FBakIsQ0FBUCxHQUFrQyxDQUF2QyxFQUEyQztBQUMxQ0wsUUFBQUEsS0FBSyxDQUFDTSxXQUFOLENBQW1CWCxJQUFuQixFQUF5QlUsQ0FBekIsRUFBNEJELENBQTVCO0FBQ0FILFFBQUFBLEtBQUssQ0FBQ0UsT0FBTixJQUFpQkMsQ0FBQyxHQUFHQyxDQUFyQjtBQUNBO0FBQ0E7QUFDRDtBQUNEOztBQUNELFNBQU9KLEtBQVA7QUFDQTs7QUFFRCxTQUFTTSxJQUFULEdBQWdCO0FBQ2YsTUFBSUMsT0FBTyxHQUFHUixLQUFLLENBQUNTLFNBQU4sRUFBZDs7QUFDQSxNQUFJQyxHQUFHLHNCQUFPRixPQUFQLENBQVA7O0FBQ0FHLEVBQUFBLE9BQU8sQ0FBQ0MsSUFBUixDQUFjLGVBQWQ7QUFDQSxNQUFNWCxLQUFLLEdBQUdQLElBQUksQ0FBRWdCLEdBQUYsQ0FBbEI7QUFDQUMsRUFBQUEsT0FBTyxDQUFDRSxPQUFSLENBQWlCLGVBQWpCO0FBRUFGLEVBQUFBLE9BQU8sQ0FBQ0csR0FBUixDQUFhSixHQUFHLENBQUNLLEtBQUosQ0FBVyxDQUFYLEVBQWMsQ0FBZCxJQUFvQixPQUFwQixHQUE4QkwsR0FBRyxDQUFDSyxLQUFKLENBQVcsQ0FBQyxDQUFaLENBQTNDO0FBQ0FKLEVBQUFBLE9BQU8sQ0FBQ0csR0FBUixDQUFhLFlBQVlkLEtBQUssQ0FBQ2dCLFdBQU4sQ0FBbUJOLEdBQW5CLEVBQXdCRixPQUF4QixDQUF6QjtBQUNBRyxFQUFBQSxPQUFPLENBQUNHLEdBQVIsQ0FBYSxRQUFiLEVBQXVCYixLQUF2QjtBQUNBIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9hcHB5L1FJL2pzLXNhbXBsZXMvYWxnb3MyLyIsInNvdXJjZXNDb250ZW50IjpbIlxuXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCAqIGFzIFVUSUxTIGZyb20gXCIuL3V0aWxzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNvcnQoIGRhdGE9W10sIHN0YXJ0PTAsIGVuZD1kYXRhLmxlbmd0aCwgIHsgY29tcGFyZT0gVVRJTFMuY29tcGFyZSB9ID0ge30gICkge1xuXG5cdGxldCBzdGF0cyA9IHsgbkNvbXBzOiAwLCBuV3JpdGVzOiAwIH07XG5cdGZvciAoIGxldCBpID0gc3RhcnQgKyAxOyBpIDwgZW5kOyBpKysgKSB7XG5cdFx0Zm9yICggbGV0IGogPSBzdGFydDsgaiA8IGk7IGorKyApIHtcblx0XHRcdHN0YXRzLm5Db21wcysrO1xuXHRcdFx0aWYgKCBjb21wYXJlKCBkYXRhWyBpIF0sIGRhdGFbIGogXSApIDwgMCApIHtcblx0XHRcdFx0VVRJTFMucm90YXRlUmlnaHQoIGRhdGEsIGosIGkgKTtcblx0XHRcdFx0c3RhdHMubldyaXRlcyArPSBpIC0gajtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdHJldHVybiBzdGF0cztcbn1cblxuZnVuY3Rpb24gdGVzdCgpIHtcblx0bGV0IG9yaWdBcnIgPSBVVElMUy5tYWtlQXJyYXkoKTtcblx0bGV0IGFyciA9IFsuLi5vcmlnQXJyXTtcblx0Y29uc29sZS50aW1lKCBcIkluc2VydGlvblNvcnRcIiApO1xuXHRjb25zdCBzdGF0cyA9IHNvcnQoIGFyciApO1xuXHRjb25zb2xlLnRpbWVFbmQoIFwiSW5zZXJ0aW9uU29ydFwiICk7XG5cblx0Y29uc29sZS5sb2coIGFyci5zbGljZSggMCwgNSApICsgXCIgLi4uIFwiICsgYXJyLnNsaWNlKCAtNSApICk7XG5cdGNvbnNvbGUubG9nKCBcIlNvcnRlZDpcIiArIFVUSUxTLmNoZWNrU29ydGVkKCBhcnIsIG9yaWdBcnIgKSApO1xuXHRjb25zb2xlLmxvZyggXCJTdGF0czpcIiwgc3RhdHMgKTtcbn1cbiJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "insertionSort.js"
      ],
      "names": [
        "sort",
        "data",
        "start",
        "end",
        "length",
        "compare",
        "UTILS",
        "stats",
        "nComps",
        "nWrites",
        "i",
        "j",
        "rotateRight",
        "test",
        "origArr",
        "makeArray",
        "arr",
        "console",
        "time",
        "timeEnd",
        "log",
        "slice",
        "checkSorted"
      ],
      "mappings": "AACA;;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;AAEe,SAASA,IAAT,GAAsF;AAAA,MAAvEC,IAAuE,uEAAlE,EAAkE;AAAA,MAA9DC,KAA8D,uEAAxD,CAAwD;AAAA,MAArDC,GAAqD,uEAAjDF,IAAI,CAACG,MAA4C;;AAAA,iFAAN,EAAM;AAAA,0BAAjCC,OAAiC;AAAA,MAAjCA,OAAiC,6BAAxBC,KAAK,CAACD,OAAkB;;AAEpG,MAAIE,KAAK,GAAG;AAAEC,IAAAA,MAAM,EAAE,CAAV;AAAaC,IAAAA,OAAO,EAAE;AAAtB,GAAZ;;AACA,OAAM,IAAIC,CAAC,GAAGR,KAAK,GAAG,CAAtB,EAAyBQ,CAAC,GAAGP,GAA7B,EAAkCO,CAAC,EAAnC,EAAwC;AACvC,SAAM,IAAIC,CAAC,GAAGT,KAAd,EAAqBS,CAAC,GAAGD,CAAzB,EAA4BC,CAAC,EAA7B,EAAkC;AACjCJ,MAAAA,KAAK,CAACC,MAAN;;AACA,UAAKH,OAAO,CAAEJ,IAAI,CAAES,CAAF,CAAN,EAAaT,IAAI,CAAEU,CAAF,CAAjB,CAAP,GAAkC,CAAvC,EAA2C;AAC1CL,QAAAA,KAAK,CAACM,WAAN,CAAmBX,IAAnB,EAAyBU,CAAzB,EAA4BD,CAA5B;AACAH,QAAAA,KAAK,CAACE,OAAN,IAAiBC,CAAC,GAAGC,CAArB;AACA;AACA;AACD;AACD;;AACD,SAAOJ,KAAP;AACA;;AAED,SAASM,IAAT,GAAgB;AACf,MAAIC,OAAO,GAAGR,KAAK,CAACS,SAAN,EAAd;;AACA,MAAIC,GAAG,sBAAOF,OAAP,CAAP;;AACAG,EAAAA,OAAO,CAACC,IAAR,CAAc,eAAd;AACA,MAAMX,KAAK,GAAGP,IAAI,CAAEgB,GAAF,CAAlB;AACAC,EAAAA,OAAO,CAACE,OAAR,CAAiB,eAAjB;AAEAF,EAAAA,OAAO,CAACG,GAAR,CAAaJ,GAAG,CAACK,KAAJ,CAAW,CAAX,EAAc,CAAd,IAAoB,OAApB,GAA8BL,GAAG,CAACK,KAAJ,CAAW,CAAC,CAAZ,CAA3C;AACAJ,EAAAA,OAAO,CAACG,GAAR,CAAa,YAAYd,KAAK,CAACgB,WAAN,CAAmBN,GAAnB,EAAwBF,OAAxB,CAAzB;AACAG,EAAAA,OAAO,CAACG,GAAR,CAAa,QAAb,EAAuBb,KAAvB;AACA",
      "sourceRoot": "/Users/appy/QI/js-samples/algos2/",
      "sourcesContent": [
        "\n\"use strict\";\n\nimport * as UTILS from \"./utils\";\n\nexport default function sort( data=[], start=0, end=data.length,  { compare= UTILS.compare } = {}  ) {\n\n\tlet stats = { nComps: 0, nWrites: 0 };\n\tfor ( let i = start + 1; i < end; i++ ) {\n\t\tfor ( let j = start; j < i; j++ ) {\n\t\t\tstats.nComps++;\n\t\t\tif ( compare( data[ i ], data[ j ] ) < 0 ) {\n\t\t\t\tUTILS.rotateRight( data, j, i );\n\t\t\t\tstats.nWrites += i - j;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn stats;\n}\n\nfunction test() {\n\tlet origArr = UTILS.makeArray();\n\tlet arr = [...origArr];\n\tconsole.time( \"InsertionSort\" );\n\tconst stats = sort( arr );\n\tconsole.timeEnd( \"InsertionSort\" );\n\n\tconsole.log( arr.slice( 0, 5 ) + \" ... \" + arr.slice( -5 ) );\n\tconsole.log( \"Sorted:\" + UTILS.checkSorted( arr, origArr ) );\n\tconsole.log( \"Stats:\", stats );\n}\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1591084685986
  },
  "{\"sourceMaps\":\"both\",\"sourceRoot\":\"/Users/appy/QI/js-samples/algos2/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/appy/QI/js-samples/algos2\",\"filename\":\"/Users/appy/QI/js-samples/algos2/crossword.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/appy/QI/js-samples/algos2\",\"plugins\":[{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.10.1": {
    "metadata": {},
    "options": {
      "sourceMaps": "both",
      "sourceRoot": "/Users/appy/QI/js-samples/algos2/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/appy/QI/js-samples/algos2",
      "filename": "/Users/appy/QI/js-samples/algos2/crossword.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/appy/QI/js-samples/algos2",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-escapes",
          "visitor": {
            "Identifier": {
              "enter": [
                null
              ]
            },
            "TemplateElement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/appy/QI/js-samples/algos2/crossword.js",
        "plugins": [
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/appy/QI/js-samples/algos2/crossword.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/appy/QI/js-samples/algos2/",
        "sourceFileName": "crossword.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar _utils = require(\"./utils\");\n\nfunction xwdSearch(xwd, search, i, j, options) {\n  var totRows = xwd.length;\n  var totCols = xwd[0].length;\n\n  if (i >= totRows || j >= totCols || i < 0 || j < 0) {\n    return;\n  }\n\n  options = options || {};\n  options.visits = options.visits || (0, _utils.makeXwd)(totRows, totCols, [0]);\n  options.expectations = options.expectations || [];\n  options.visits[i][j]++;\n  var expect = options.expectations;\n  var ch = xwd[i][j];\n  {\n    // Process all Expectations for current cell\n    // This is a linear search. Can be optimized but its usually a small list\n    for (var k = 0; k < expect.length; k++) {\n      var e = expect[k];\n\n      if (e.r === i && e.c === j) {\n        if (ch === search[e.s]) {\n          //console.log( \"matched expectation \", e );\n          if (e.d > 0 && e.s === search.length - 1) {\n            // Forward Search. Last char. Entire Search string matched,\n            return {\n              start: {\n                row: e.d === 1 ? i : i - e.s,\n                col: e.d === 2 ? j : e.d === 4 ? j + e.s : j - e.s\n              },\n              end: {\n                row: i,\n                col: j\n              }\n            };\n          }\n\n          if (e.d < 0 && e.s === 0) {\n            // Reverse Search. First char. Entire Search string matched,\n            return {\n              start: {\n                row: i,\n                col: j\n              },\n              end: {\n                row: e.d === -1 ? i : i - search.length + 1,\n                col: e.d === -2 ? j : e.d === -4 ? j + search.length - 1 : j - search.length + 1\n              }\n            };\n          } //Update Expectation for next char match in string\n          //Based on direction set expected cell\n\n\n          switch (Math.abs(e.d)) {\n            case 1:\n              e.c++;\n              break;\n            //RIGHT\n\n            case 2:\n              e.r++;\n              break;\n            //DOWN\n\n            case 3:\n              e.r++;\n              e.c++;\n              break;\n            //DOWN n RIGHT\n\n            case 4:\n              e.r++;\n              e.c--;\n              break;\n            //DOWN n LEFT\n\n            default:\n              throw \"INVALID Direction \" + e.d;\n          }\n\n          e.s += e.d > 0 ? 1 : -1;\n        } else {\n          // Mark for removal of failed Expectation\n          e.remove = true;\n        }\n      }\n    }\n  }\n  {\n    //Check if this cell matches 1st/last character of search\n    //if it does, then create expectations for neighboring cells encountered in future\n    if (search.length === 1 && ch === search[0]) {\n      return {\n        start: {\n          row: i,\n          col: j\n        },\n        end: {\n          row: i,\n          col: j\n        }\n      };\n    }\n\n    if (search.length > 1 && ch === search[0]) {\n      if (totCols - j >= search.length) {\n        expect.push({\n          r: i,\n          c: j + 1,\n          s: 1,\n          d: 1\n        }); // Right\n      }\n\n      if (totRows - i >= search.length) {\n        expect.push({\n          r: i + 1,\n          c: j,\n          s: 1,\n          d: 2\n        }); // Down\n      }\n\n      if (totCols - j >= search.length && totRows - i >= search.length) {\n        expect.push({\n          r: i + 1,\n          c: j + 1,\n          s: 1,\n          d: 3\n        }); // Diag Down Right\n      }\n\n      if (j > search.length - 1 && totRows - i >= search.length) {\n        expect.push({\n          r: i + 1,\n          c: j - 1,\n          s: 1,\n          d: 4\n        }); // Diag Down left\n      }\n    }\n\n    if (search.length > 1 && ch === search[search.length - 1]) {\n      //REVERSE CASE\n      if (totCols - j >= search.length) {\n        expect.push({\n          r: i,\n          c: j + 1,\n          s: search.length - 2,\n          d: -1\n        }); // Right\n      }\n\n      if (totRows - i >= search.length) {\n        expect.push({\n          r: i + 1,\n          c: j,\n          s: search.length - 2,\n          d: -2\n        }); // Down\n      }\n\n      if (totCols - j >= search.length && totRows - i >= search.length) {\n        expect.push({\n          r: i + 1,\n          c: j + 1,\n          s: search.length - 2,\n          d: -3\n        }); // Diag Down Right\n      }\n\n      if (j > search.length - 1 && totRows - i >= search.length) {\n        expect.push({\n          r: i + 1,\n          c: j - 1,\n          s: search.length - 2,\n          d: -4\n        }); // Diag Down left\n      }\n    }\n  } //Visit next node to right or 1st node on next row\n\n  options.expectations = expect.filter(function (e) {\n    return e.remove === undefined;\n  });\n  var nextCol = (j + 1) % totCols;\n  var nextRow = nextCol > 0 ? i : i + 1;\n  return xwdSearch(xwd, search, nextRow, nextCol, options);\n}\n\nvar alpha = \"qwertyuiopasdfghjklzxcvbnm\";\nvar xwd = (0, _utils.makeXwd)(10, 10, alpha.split(\"\"));\nvar search = \"othello\".split(\"\");\nconsole.log(\"Search String=\" + search);\n(0, _utils.hideString)(xwd, search);\nconsole.log(xwd);\nvar options = {};\nvar found = xwdSearch(xwd, search, 0, 0, options);\nconsole.log(\"FOUND =\", found);\nconsole.log(options);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "crossword.js"
      ],
      "names": [
        "xwdSearch",
        "xwd",
        "search",
        "i",
        "j",
        "options",
        "totRows",
        "length",
        "totCols",
        "visits",
        "expectations",
        "expect",
        "ch",
        "k",
        "e",
        "r",
        "c",
        "s",
        "d",
        "start",
        "row",
        "col",
        "end",
        "Math",
        "abs",
        "remove",
        "push",
        "filter",
        "undefined",
        "nextCol",
        "nextRow",
        "alpha",
        "split",
        "console",
        "log",
        "found"
      ],
      "mappings": ";;AAAA;;AAGA,SAASA,SAAT,CAAoBC,GAApB,EAAyBC,MAAzB,EAAiCC,CAAjC,EAAoCC,CAApC,EAAuCC,OAAvC,EAAiD;AAChD,MAAMC,OAAO,GAAGL,GAAG,CAACM,MAApB;AACA,MAAMC,OAAO,GAAGP,GAAG,CAAE,CAAF,CAAH,CAASM,MAAzB;;AAEA,MAAKJ,CAAC,IAAIG,OAAL,IAAgBF,CAAC,IAAII,OAArB,IAAgCL,CAAC,GAAG,CAApC,IAAyCC,CAAC,GAAG,CAAlD,EAAsD;AAAE;AAAS;;AAEjEC,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAA,EAAAA,OAAO,CAACI,MAAR,GAAiBJ,OAAO,CAACI,MAAR,IAAkB,oBAASH,OAAT,EAAkBE,OAAlB,EAA2B,CAAE,CAAF,CAA3B,CAAnC;AACAH,EAAAA,OAAO,CAACK,YAAR,GAAuBL,OAAO,CAACK,YAAR,IAAwB,EAA/C;AAEAL,EAAAA,OAAO,CAACI,MAAR,CAAgBN,CAAhB,EAAqBC,CAArB;AACA,MAAIO,MAAM,GAAGN,OAAO,CAACK,YAArB;AAEA,MAAME,EAAE,GAAGX,GAAG,CAAEE,CAAF,CAAH,CAAUC,CAAV,CAAX;AAEA;AACC;AACA;AACA,SAAM,IAAIS,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAGF,MAAM,CAACJ,MAA5B,EAAoCM,CAAC,EAArC,EAA0C;AACzC,UAAIC,CAAC,GAAGH,MAAM,CAAEE,CAAF,CAAd;;AACA,UAAKC,CAAC,CAACC,CAAF,KAAQZ,CAAR,IAAaW,CAAC,CAACE,CAAF,KAAQZ,CAA1B,EAA8B;AAE7B,YAAKQ,EAAE,KAAKV,MAAM,CAAEY,CAAC,CAACG,CAAJ,CAAlB,EAA4B;AAC3B;AACA,cAAKH,CAAC,CAACI,CAAF,GAAM,CAAN,IAAWJ,CAAC,CAACG,CAAF,KAAQf,MAAM,CAACK,MAAP,GAAgB,CAAxC,EAA4C;AAC3C;AACA,mBAAO;AACNY,cAAAA,KAAK,EAAE;AACNC,gBAAAA,GAAG,EAAEN,CAAC,CAACI,CAAF,KAAQ,CAAR,GAAYf,CAAZ,GAAgBA,CAAC,GAAGW,CAAC,CAACG,CADrB;AAENI,gBAAAA,GAAG,EAAEP,CAAC,CAACI,CAAF,KAAQ,CAAR,GAAYd,CAAZ,GAAkBU,CAAC,CAACI,CAAF,KAAQ,CAAR,GAAYd,CAAC,GAAGU,CAAC,CAACG,CAAlB,GAAsBb,CAAC,GAAGU,CAAC,CAACG;AAF7C,eADD;AAKNK,cAAAA,GAAG,EAAE;AAAEF,gBAAAA,GAAG,EAAEjB,CAAP;AAAUkB,gBAAAA,GAAG,EAAEjB;AAAf;AALC,aAAP;AAOA;;AAED,cAAKU,CAAC,CAACI,CAAF,GAAM,CAAN,IAAWJ,CAAC,CAACG,CAAF,KAAQ,CAAxB,EAA4B;AAC3B;AACA,mBAAO;AACNE,cAAAA,KAAK,EAAE;AAAEC,gBAAAA,GAAG,EAAEjB,CAAP;AAAUkB,gBAAAA,GAAG,EAAEjB;AAAf,eADD;AAENkB,cAAAA,GAAG,EAAE;AACJF,gBAAAA,GAAG,EAAEN,CAAC,CAACI,CAAF,KAAQ,CAAC,CAAT,GAAaf,CAAb,GAAiBA,CAAC,GAAGD,MAAM,CAACK,MAAX,GAAoB,CADtC;AAEJc,gBAAAA,GAAG,EAAEP,CAAC,CAACI,CAAF,KAAQ,CAAC,CAAT,GAAad,CAAb,GAAmBU,CAAC,CAACI,CAAF,KAAQ,CAAC,CAAT,GAAad,CAAC,GAAGF,MAAM,CAACK,MAAX,GAAoB,CAAjC,GAAqCH,CAAC,GAAGF,MAAM,CAACK,MAAX,GAAoB;AAF7E;AAFC,aAAP;AAOA,WAtB0B,CAwB3B;AACA;;;AACA,kBAASgB,IAAI,CAACC,GAAL,CAAUV,CAAC,CAACI,CAAZ,CAAT;AACC,iBAAK,CAAL;AACCJ,cAAAA,CAAC,CAACE,CAAF;AACA;AAAO;;AACR,iBAAK,CAAL;AACCF,cAAAA,CAAC,CAACC,CAAF;AACA;AAAO;;AACR,iBAAK,CAAL;AACCD,cAAAA,CAAC,CAACC,CAAF;AACAD,cAAAA,CAAC,CAACE,CAAF;AACA;AAAO;;AACR,iBAAK,CAAL;AACCF,cAAAA,CAAC,CAACC,CAAF;AACAD,cAAAA,CAAC,CAACE,CAAF;AACA;AAAO;;AACR;AACC,oBAAM,uBAAuBF,CAAC,CAACI,CAA/B;AAhBF;;AAkBAJ,UAAAA,CAAC,CAACG,CAAF,IAAOH,CAAC,CAACI,CAAF,GAAM,CAAN,GAAU,CAAV,GAAc,CAAC,CAAtB;AACA,SA7CD,MA6CO;AAEN;AACAJ,UAAAA,CAAC,CAACW,MAAF,GAAW,IAAX;AACA;AACD;AACD;AACD;AAED;AACC;AACA;AACA,QAAKvB,MAAM,CAACK,MAAP,KAAkB,CAAlB,IAAwBK,EAAE,KAAKV,MAAM,CAAE,CAAF,CAA1C,EAAkD;AACjD,aAAO;AAAEiB,QAAAA,KAAK,EAAE;AAAEC,UAAAA,GAAG,EAAEjB,CAAP;AAAUkB,UAAAA,GAAG,EAAEjB;AAAf,SAAT;AAA6BkB,QAAAA,GAAG,EAAE;AAAEF,UAAAA,GAAG,EAAEjB,CAAP;AAAUkB,UAAAA,GAAG,EAAEjB;AAAf;AAAlC,OAAP;AACA;;AAED,QAAKF,MAAM,CAACK,MAAP,GAAgB,CAAhB,IAAuBK,EAAE,KAAKV,MAAM,CAAE,CAAF,CAAzC,EAAiD;AAChD,UAAKM,OAAO,GAAGJ,CAAV,IAAeF,MAAM,CAACK,MAA3B,EAAoC;AACnCI,QAAAA,MAAM,CAACe,IAAP,CAAa;AAAEX,UAAAA,CAAC,EAAEZ,CAAL;AAAQa,UAAAA,CAAC,EAAEZ,CAAC,GAAG,CAAf;AAAmBa,UAAAA,CAAC,EAAE,CAAtB;AAAyBC,UAAAA,CAAC,EAAE;AAA5B,SAAb,EADmC,CACc;AACjD;;AACD,UAAKZ,OAAO,GAAGH,CAAV,IAAeD,MAAM,CAACK,MAA3B,EAAoC;AACnCI,QAAAA,MAAM,CAACe,IAAP,CAAa;AAAEX,UAAAA,CAAC,EAAEZ,CAAC,GAAG,CAAT;AAAYa,UAAAA,CAAC,EAAEZ,CAAf;AAAkBa,UAAAA,CAAC,EAAE,CAArB;AAAwBC,UAAAA,CAAC,EAAE;AAA3B,SAAb,EADmC,CACY;AAC/C;;AACD,UAAKV,OAAO,GAAGJ,CAAV,IAAeF,MAAM,CAACK,MAAtB,IAAgCD,OAAO,GAAGH,CAAV,IAAeD,MAAM,CAACK,MAA3D,EAAoE;AACnEI,QAAAA,MAAM,CAACe,IAAP,CAAa;AAAEX,UAAAA,CAAC,EAAEZ,CAAC,GAAG,CAAT;AAAYa,UAAAA,CAAC,EAAEZ,CAAC,GAAG,CAAnB;AAAsBa,UAAAA,CAAC,EAAE,CAAzB;AAA4BC,UAAAA,CAAC,EAAE;AAA/B,SAAb,EADmE,CAChB;AACnD;;AACD,UAAKd,CAAC,GAAKF,MAAM,CAACK,MAAP,GAAiB,CAAvB,IAA8BD,OAAO,GAAGH,CAAV,IAAeD,MAAM,CAACK,MAAzD,EAAkE;AACjEI,QAAAA,MAAM,CAACe,IAAP,CAAa;AAAEX,UAAAA,CAAC,EAAEZ,CAAC,GAAG,CAAT;AAAYa,UAAAA,CAAC,EAAEZ,CAAC,GAAG,CAAnB;AAAsBa,UAAAA,CAAC,EAAE,CAAzB;AAA4BC,UAAAA,CAAC,EAAE;AAA/B,SAAb,EADiE,CACd;AACnD;AACD;;AACD,QAAKhB,MAAM,CAACK,MAAP,GAAgB,CAAhB,IAAsBK,EAAE,KAAKV,MAAM,CAAEA,MAAM,CAACK,MAAP,GAAgB,CAAlB,CAAxC,EAAgE;AAC/D;AACA,UAAKC,OAAO,GAAGJ,CAAV,IAAeF,MAAM,CAACK,MAA3B,EAAoC;AACnCI,QAAAA,MAAM,CAACe,IAAP,CAAa;AAAEX,UAAAA,CAAC,EAAEZ,CAAL;AAAQa,UAAAA,CAAC,EAAEZ,CAAC,GAAG,CAAf;AAAkBa,UAAAA,CAAC,EAAEf,MAAM,CAACK,MAAP,GAAgB,CAArC;AAAwCW,UAAAA,CAAC,EAAE,CAAC;AAA5C,SAAb,EADmC,CAC6B;AAChE;;AACD,UAAKZ,OAAO,GAAGH,CAAV,IAAeD,MAAM,CAACK,MAA3B,EAAoC;AACnCI,QAAAA,MAAM,CAACe,IAAP,CAAa;AAAEX,UAAAA,CAAC,EAAEZ,CAAC,GAAG,CAAT;AAAYa,UAAAA,CAAC,EAAEZ,CAAf;AAAkBa,UAAAA,CAAC,EAAEf,MAAM,CAACK,MAAP,GAAgB,CAArC;AAAwCW,UAAAA,CAAC,EAAE,CAAC;AAA5C,SAAb,EADmC,CAC6B;AAChE;;AACD,UAAKV,OAAO,GAAGJ,CAAV,IAAeF,MAAM,CAACK,MAAtB,IAAgCD,OAAO,GAAGH,CAAV,IAAeD,MAAM,CAACK,MAA3D,EAAoE;AACnEI,QAAAA,MAAM,CAACe,IAAP,CAAa;AAAEX,UAAAA,CAAC,EAAEZ,CAAC,GAAG,CAAT;AAAYa,UAAAA,CAAC,EAAEZ,CAAC,GAAG,CAAnB;AAAsBa,UAAAA,CAAC,EAAEf,MAAM,CAACK,MAAP,GAAgB,CAAzC;AAA4CW,UAAAA,CAAC,EAAE,CAAC;AAAhD,SAAb,EADmE,CACC;AACpE;;AACD,UAAKd,CAAC,GAAKF,MAAM,CAACK,MAAP,GAAiB,CAAvB,IAA8BD,OAAO,GAAGH,CAAV,IAAeD,MAAM,CAACK,MAAzD,EAAkE;AACjEI,QAAAA,MAAM,CAACe,IAAP,CAAa;AAAEX,UAAAA,CAAC,EAAEZ,CAAC,GAAG,CAAT;AAAYa,UAAAA,CAAC,EAAEZ,CAAC,GAAG,CAAnB;AAAsBa,UAAAA,CAAC,EAAEf,MAAM,CAACK,MAAP,GAAgB,CAAzC;AAA4CW,UAAAA,CAAC,EAAE,CAAC;AAAhD,SAAb,EADiE,CACG;AACpE;AACD;AAED,GAjH+C,CAmHhD;;AACAb,EAAAA,OAAO,CAACK,YAAR,GAAuBC,MAAM,CAACgB,MAAP,CAAe,UAAAb,CAAC;AAAA,WAAIA,CAAC,CAACW,MAAF,KAAaG,SAAjB;AAAA,GAAhB,CAAvB;AACA,MAAIC,OAAO,GAAG,CAAEzB,CAAC,GAAG,CAAN,IAAYI,OAA1B;AACA,MAAIsB,OAAO,GAAGD,OAAO,GAAG,CAAV,GAAc1B,CAAd,GAAkBA,CAAC,GAAG,CAApC;AACA,SAAOH,SAAS,CAAEC,GAAF,EAAOC,MAAP,EAAe4B,OAAf,EAAwBD,OAAxB,EAAiCxB,OAAjC,CAAhB;AACA;;AAGD,IAAM0B,KAAK,GAAG,4BAAd;AACA,IAAI9B,GAAG,GAAG,oBAAS,EAAT,EAAa,EAAb,EAAiB8B,KAAK,CAACC,KAAN,CAAa,EAAb,CAAjB,CAAV;AACA,IAAI9B,MAAM,GAAG,UAAU8B,KAAV,CAAiB,EAAjB,CAAb;AACAC,OAAO,CAACC,GAAR,CAAa,mBAAmBhC,MAAhC;AAEA,uBAAYD,GAAZ,EAAiBC,MAAjB;AACA+B,OAAO,CAACC,GAAR,CAAajC,GAAb;AAEA,IAAII,OAAO,GAAG,EAAd;AACA,IAAI8B,KAAK,GAAGnC,SAAS,CAAEC,GAAF,EAAOC,MAAP,EAAe,CAAf,EAAkB,CAAlB,EAAqBG,OAArB,CAArB;AACA4B,OAAO,CAACC,GAAR,CAAa,SAAb,EAAwBC,KAAxB;AACAF,OAAO,CAACC,GAAR,CAAa7B,OAAb",
      "sourceRoot": "/Users/appy/QI/js-samples/algos2/",
      "sourcesContent": [
        "import { hideString, makeXwd } from \"./utils\";\n\n\nfunction xwdSearch( xwd, search, i, j, options ) {\n\tconst totRows = xwd.length;\n\tconst totCols = xwd[ 0 ].length;\n\n\tif ( i >= totRows || j >= totCols || i < 0 || j < 0 ) { return; }\n\n\toptions = options || {};\n\toptions.visits = options.visits || makeXwd( totRows, totCols, [ 0 ] );\n\toptions.expectations = options.expectations || [];\n\n\toptions.visits[ i ][ j ]++;\n\tlet expect = options.expectations;\n\n\tconst ch = xwd[ i ][ j ];\n\n\t{\n\t\t// Process all Expectations for current cell\n\t\t// This is a linear search. Can be optimized but its usually a small list\n\t\tfor ( let k = 0; k < expect.length; k++ ) {\n\t\t\tlet e = expect[ k ];\n\t\t\tif ( e.r === i && e.c === j ) {\n\n\t\t\t\tif ( ch === search[ e.s ] ) {\n\t\t\t\t\t//console.log( \"matched expectation \", e );\n\t\t\t\t\tif ( e.d > 0 && e.s === search.length - 1 ) {\n\t\t\t\t\t\t// Forward Search. Last char. Entire Search string matched,\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tstart: {\n\t\t\t\t\t\t\t\trow: e.d === 1 ? i : i - e.s,\n\t\t\t\t\t\t\t\tcol: e.d === 2 ? j : ( e.d === 4 ? j + e.s : j - e.s ),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tend: { row: i, col: j }\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( e.d < 0 && e.s === 0 ) {\n\t\t\t\t\t\t// Reverse Search. First char. Entire Search string matched,\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tstart: { row: i, col: j },\n\t\t\t\t\t\t\tend: {\n\t\t\t\t\t\t\t\trow: e.d === -1 ? i : i - search.length + 1,\n\t\t\t\t\t\t\t\tcol: e.d === -2 ? j : ( e.d === -4 ? j + search.length - 1 : j - search.length + 1 ),\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\t//Update Expectation for next char match in string\n\t\t\t\t\t//Based on direction set expected cell\n\t\t\t\t\tswitch ( Math.abs( e.d ) ) {\n\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\te.c++;\n\t\t\t\t\t\t\tbreak; //RIGHT\n\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\te.r++;\n\t\t\t\t\t\t\tbreak; //DOWN\n\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\te.r++;\n\t\t\t\t\t\t\te.c++;\n\t\t\t\t\t\t\tbreak; //DOWN n RIGHT\n\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\te.r++;\n\t\t\t\t\t\t\te.c--;\n\t\t\t\t\t\t\tbreak; //DOWN n LEFT\n\t\t\t\t\t\tdefault :\n\t\t\t\t\t\t\tthrow \"INVALID Direction \" + e.d;\n\t\t\t\t\t}\n\t\t\t\t\te.s += e.d > 0 ? 1 : -1;\n\t\t\t\t} else {\n\n\t\t\t\t\t// Mark for removal of failed Expectation\n\t\t\t\t\te.remove = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t{\n\t\t//Check if this cell matches 1st/last character of search\n\t\t//if it does, then create expectations for neighboring cells encountered in future\n\t\tif ( search.length === 1 &&  ch === search[ 0 ] ) {\n\t\t\treturn { start: { row: i, col: j }, end: { row: i, col: j } };\n\t\t}\n\n\t\tif ( search.length > 1 &&   ch === search[ 0 ] ) {\n\t\t\tif ( totCols - j >= search.length ) {\n\t\t\t\texpect.push( { r: i, c: j + 1 , s: 1, d: 1 }  ); // Right\n\t\t\t}\n\t\t\tif ( totRows - i >= search.length ) {\n\t\t\t\texpect.push( { r: i + 1, c: j, s: 1, d: 2 } ); // Down\n\t\t\t}\n\t\t\tif ( totCols - j >= search.length && totRows - i >= search.length ) {\n\t\t\t\texpect.push( { r: i + 1, c: j + 1, s: 1, d: 3 } ); // Diag Down Right\n\t\t\t}\n\t\t\tif ( j > ( search.length  - 1 ) && totRows - i >= search.length ) {\n\t\t\t\texpect.push( { r: i + 1, c: j - 1, s: 1, d: 4 } ); // Diag Down left\n\t\t\t}\n\t\t}\n\t\tif ( search.length > 1 &&  ch === search[ search.length - 1 ] ) {\n\t\t\t//REVERSE CASE\n\t\t\tif ( totCols - j >= search.length ) {\n\t\t\t\texpect.push( { r: i, c: j + 1, s: search.length - 2, d: -1 } ); // Right\n\t\t\t}\n\t\t\tif ( totRows - i >= search.length ) {\n\t\t\t\texpect.push( { r: i + 1, c: j, s: search.length - 2, d: -2 } ); // Down\n\t\t\t}\n\t\t\tif ( totCols - j >= search.length && totRows - i >= search.length ) {\n\t\t\t\texpect.push( { r: i + 1, c: j + 1, s: search.length - 2, d: -3 } ); // Diag Down Right\n\t\t\t}\n\t\t\tif ( j > ( search.length  - 1 ) && totRows - i >= search.length ) {\n\t\t\t\texpect.push( { r: i + 1, c: j - 1, s: search.length - 2, d: -4 } ); // Diag Down left\n\t\t\t}\n\t\t}\n\n\t}\n\n\t//Visit next node to right or 1st node on next row\n\toptions.expectations = expect.filter( e => e.remove === undefined );\n\tlet nextCol = ( j + 1 ) % totCols;\n\tlet nextRow = nextCol > 0 ? i : i + 1;\n\treturn xwdSearch( xwd, search, nextRow, nextCol, options );\n}\n\n\nconst alpha = \"qwertyuiopasdfghjklzxcvbnm\";\nlet xwd = makeXwd( 10, 10, alpha.split( \"\" ) );\nlet search = \"othello\".split( \"\" );\nconsole.log( \"Search String=\" + search );\n\nhideString( xwd, search );\nconsole.log( xwd );\n\nlet options = {};\nlet found = xwdSearch( xwd, search, 0, 0, options );\nconsole.log( \"FOUND =\", found );\nconsole.log( options );\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1590992357491
  },
  "{\"sourceMaps\":\"both\",\"sourceRoot\":\"/Users/appy/QI/js-samples/algos2/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/appy/QI/js-samples/algos2\",\"filename\":\"/Users/appy/QI/js-samples/algos2/crossword2.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/appy/QI/js-samples/algos2\",\"plugins\":[{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.10.1": {
    "metadata": {},
    "options": {
      "sourceMaps": "both",
      "sourceRoot": "/Users/appy/QI/js-samples/algos2/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/appy/QI/js-samples/algos2",
      "filename": "/Users/appy/QI/js-samples/algos2/crossword2.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/appy/QI/js-samples/algos2",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-escapes",
          "visitor": {
            "Identifier": {
              "enter": [
                null
              ]
            },
            "TemplateElement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/appy/QI/js-samples/algos2/crossword2.js",
        "plugins": [
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/appy/QI/js-samples/algos2/crossword2.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/appy/QI/js-samples/algos2/",
        "sourceFileName": "crossword2.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar _utils = require(\"./utils\");\n\nfunction nextCell(loc, steps) {\n  steps = steps || 1;\n\n  switch (Math.abs(loc.dir)) {\n    case 1:\n      loc.col += steps;\n      break;\n    //Horizontal\n\n    case 2:\n      loc.row += steps;\n      break;\n    //Vertical\n\n    case 3:\n      loc.row += steps;\n      loc.col += steps;\n      break;\n    //Diagonal Left to Right\n\n    case 4:\n      loc.row += steps;\n      loc.col -= steps;\n      break;\n    //Diagonal Right to Left\n\n    default:\n      throw \"INVALID direction \" + loc.dir;\n  }\n\n  return loc;\n}\n\nfunction xwdSearch(xwd, search, i, j, options) {\n  var totRows = xwd.length;\n  var totCols = xwd[0].length;\n\n  if (i >= totRows || j >= totCols || i < 0 || j < 0) {\n    return;\n  }\n\n  options = options || {};\n  options.visits = options.visits || (0, _utils.makeXwd)(totRows, totCols, [0]);\n  options.expectations = options.expectations || [];\n  options.visits[i][j]++;\n  var expect = options.expectations;\n  var ch = xwd[i][j];\n  {\n    // Process all Expectations for current cell\n    // This is a linear search. Can be optimized but its usually a small list\n    for (var k = 0; k < expect.length; k++) {\n      var e = expect[k];\n\n      if (e.row === i && e.col === j) {\n        //Match current node\n        if (ch === search[e.sIdx]) {\n          //console.log( \"matched expectation \", e );\n          if (e.sIdx === search.length - 1 || e.sIdx === 0) {\n            // FOUND search string. Entire Search string matched\n            var cur = {\n              row: i,\n              col: j\n            };\n            var other = nextCell(e, 0 - (search.length - 1));\n            delete other.dir;\n            delete other.sIdx;\n            return {\n              start: e.dir > 0 ? other : cur,\n              end: e.dir > 0 ? cur : other\n            };\n          } //Update Expectation for next char match in string\n          //Based on direction set expected cell\n\n\n          nextCell(e, 1);\n          e.sIdx += e.dir > 0 ? 1 : -1;\n        } else {\n          // current cell doesnt matched expectation\n          // Mark for removal of Remove failed Expectation\n          e.remove = true;\n        }\n      }\n    }\n  }\n  {\n    //Check if this cell matches 1st/last character of search\n    //if it does, then create expectations for neighboring cells encountered in future\n    if (search.length === 1 && ch === search[0]) {\n      //Simple case\n      return {\n        start: {\n          row: i,\n          col: j\n        },\n        end: {\n          row: i,\n          col: j\n        }\n      };\n    }\n\n    if (search.length > 1 && ch === search[0]) {\n      //FORWARD CASE. matched 1st char of search string\n      if (totCols - j >= search.length) {\n        expect.push(nextCell({\n          row: i,\n          col: j,\n          dir: 1,\n          sIdx: 1\n        }, 1)); // 1 Right\n      }\n\n      if (totRows - i >= search.length) {\n        expect.push(nextCell({\n          row: i,\n          col: j,\n          dir: 2,\n          sIdx: 1\n        }, 1)); // 1 Down\n      }\n\n      if (totCols - j >= search.length && totRows - i >= search.length) {\n        expect.push(nextCell({\n          row: i,\n          col: j,\n          dir: 3,\n          sIdx: 1\n        }, 1)); // 1 Diag Down Right\n      }\n\n      if (j >= search.length - 1 && totRows - i >= search.length) {\n        expect.push(nextCell({\n          row: i,\n          col: j,\n          dir: 4,\n          sIdx: 1\n        }, 1)); // 1 Diag Down left\n      }\n    }\n\n    if (search.length > 1 && ch === search[search.length - 1]) {\n      //REVERSE CASE. matched last char of search string\n      if (totCols - j >= search.length) {\n        expect.push(nextCell({\n          row: i,\n          col: j,\n          dir: -1,\n          sIdx: search.length - 2\n        }, 1)); // Right\n      }\n\n      if (totRows - i >= search.length) {\n        expect.push(nextCell({\n          row: i,\n          col: j,\n          dir: -2,\n          sIdx: search.length - 2\n        }, 1)); // Down\n      }\n\n      if (totCols - j >= search.length && totRows - i >= search.length) {\n        expect.push(nextCell({\n          row: i,\n          col: j,\n          dir: -3,\n          sIdx: search.length - 2\n        }, 1)); // Diag Down Right\n      }\n\n      if (j >= search.length - 1 && totRows - i >= search.length) {\n        expect.push(nextCell({\n          row: i,\n          col: j,\n          dir: -4,\n          sIdx: search.length - 2\n        }, 1)); // Diag Down left\n      }\n    }\n  } //Visit next node to right or 1st node on next row\n\n  options.expectations = expect.filter(function (e) {\n    return e.remove === undefined;\n  });\n  var nextCol = (j + 1) % totCols;\n  var nextRow = nextCol > 0 ? i : i + 1;\n  return xwdSearch(xwd, search, nextRow, nextCol, options);\n}\n\nvar alpha = \"qwertyuiopasdfghjklzxcvbnm\";\nvar xwd = (0, _utils.makeXwd)(10, 10, alpha.split(\"\"));\nvar search = \"othello\".split(\"\");\nconsole.log(\"Search String=\" + search);\n(0, _utils.hideString)(xwd, search);\nconsole.log(xwd);\nvar options = {};\nvar found = xwdSearch(xwd, search, 0, 0, options);\nconsole.log(\"FOUND =\", found);\nconsole.log(options);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "crossword2.js"
      ],
      "names": [
        "nextCell",
        "loc",
        "steps",
        "Math",
        "abs",
        "dir",
        "col",
        "row",
        "xwdSearch",
        "xwd",
        "search",
        "i",
        "j",
        "options",
        "totRows",
        "length",
        "totCols",
        "visits",
        "expectations",
        "expect",
        "ch",
        "k",
        "e",
        "sIdx",
        "cur",
        "other",
        "start",
        "end",
        "remove",
        "push",
        "filter",
        "undefined",
        "nextCol",
        "nextRow",
        "alpha",
        "split",
        "console",
        "log",
        "found"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/appy/QI/js-samples/algos2/",
      "sourcesContent": [
        "import { hideString, makeXwd } from \"./utils\";\n\n\nfunction nextCell( loc, steps ) {\n\n\tsteps = steps || 1;\n\tswitch ( Math.abs( loc.dir ) ) {\n\t\tcase  1:                   loc.col += steps; break; //Horizontal\n\t\tcase  2: loc.row += steps;                   break; //Vertical\n\t\tcase  3: loc.row += steps; loc.col += steps; break; //Diagonal Left to Right\n\t\tcase  4: loc.row += steps; loc.col -= steps; break; //Diagonal Right to Left\n\n\t\tdefault :\n\t\t\tthrow \"INVALID direction \" + loc.dir;\n\t}\n\treturn loc;\n}\n\nfunction xwdSearch( xwd, search, i, j, options ) {\n\tconst totRows = xwd.length;\n\tconst totCols = xwd[ 0 ].length;\n\n\tif ( i >= totRows || j >= totCols || i < 0 || j < 0 ) { return; }\n\n\toptions = options || {};\n\toptions.visits = options.visits || makeXwd( totRows, totCols, [ 0 ] );\n\toptions.expectations = options.expectations || [];\n\n\toptions.visits[ i ][ j ]++;\n\tlet expect = options.expectations;\n\n\tconst ch = xwd[ i ][ j ];\n\n\t{\n\t\t// Process all Expectations for current cell\n\t\t// This is a linear search. Can be optimized but its usually a small list\n\t\tfor ( let k = 0; k < expect.length; k++ ) {\n\t\t\tlet e = expect[ k ];\n\t\t\tif ( e.row === i && e.col === j ) { //Match current node\n\n\t\t\t\tif ( ch === search[ e.sIdx ] ) {\n\t\t\t\t\t//console.log( \"matched expectation \", e );\n\n\t\t\t\t\tif ( e.sIdx === search.length - 1 || e.sIdx === 0 ) {\n\t\t\t\t\t\t// FOUND search string. Entire Search string matched\n\n\t\t\t\t\t\tconst cur = { row: i, col: j };\n\t\t\t\t\t\tconst other = nextCell( e, 0 - ( search.length - 1 ) );\n\t\t\t\t\t\tdelete other.dir; delete other.sIdx;\n\n\t\t\t\t\t\treturn { start: e.dir > 0 ? other : cur, end: e.dir > 0 ? cur : other };\n\t\t\t\t\t}\n\n\t\t\t\t\t//Update Expectation for next char match in string\n\t\t\t\t\t//Based on direction set expected cell\n\t\t\t\t\tnextCell( e, 1 );\n\t\t\t\t\te.sIdx += e.dir > 0 ? 1 : -1;\n\t\t\t\t} else {\n\n\t\t\t\t\t// current cell doesnt matched expectation\n\t\t\t\t\t// Mark for removal of Remove failed Expectation\n\t\t\t\t\te.remove = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t{\n\t\t//Check if this cell matches 1st/last character of search\n\t\t//if it does, then create expectations for neighboring cells encountered in future\n\t\tif ( search.length === 1 &&  ch === search[ 0 ] ) {\n\t\t\t//Simple case\n\t\t\treturn { start: { row: i, col: j }, end: { row: i, col: j } };\n\t\t}\n\n\t\tif ( search.length > 1 && ch === search[ 0 ] ) {\n\t\t\t//FORWARD CASE. matched 1st char of search string\n\t\t\tif ( totCols - j >= search.length ) {\n\t\t\t\texpect.push( nextCell( { row: i, col: j, dir: 1, sIdx: 1 }, 1 ) ); // 1 Right\n\t\t\t}\n\t\t\tif ( totRows - i >= search.length ) {\n\t\t\t\texpect.push( nextCell( { row: i, col: j, dir: 2, sIdx: 1 }, 1 ) ); // 1 Down\n\t\t\t}\n\t\t\tif ( totCols - j >= search.length && totRows - i >= search.length ) {\n\t\t\t\texpect.push( nextCell( { row: i, col: j, dir: 3, sIdx: 1 }, 1 ) ); // 1 Diag Down Right\n\t\t\t}\n\t\t\tif ( j >= ( search.length - 1 ) && totRows - i >= search.length ) {\n\t\t\t\texpect.push( nextCell( { row: i, col: j, dir: 4, sIdx: 1 }, 1 ) ); // 1 Diag Down left\n\t\t\t}\n\t\t}\n\n\t\tif ( search.length > 1 && ch === search[ search.length - 1 ] ) {\n\t\t\t//REVERSE CASE. matched last char of search string\n\t\t\tif ( totCols - j >= search.length ) {\n\t\t\t\texpect.push( nextCell( { row: i, col: j, dir: -1, sIdx: search.length - 2 }, 1 ) ); // Right\n\t\t\t}\n\t\t\tif ( totRows - i >= search.length ) {\n\t\t\t\texpect.push( nextCell( { row: i, col: j, dir: -2, sIdx: search.length - 2 }, 1 ) ); // Down\n\t\t\t}\n\t\t\tif ( totCols - j >= search.length && totRows - i >= search.length ) {\n\t\t\t\texpect.push( nextCell( { row: i, col: j, dir: -3, sIdx: search.length - 2 }, 1 ) ); // Diag Down Right\n\t\t\t}\n\t\t\tif ( j >= ( search.length - 1 ) && totRows - i >= search.length ) {\n\t\t\t\texpect.push( nextCell( { row: i, col: j, dir: -4, sIdx: search.length - 2 }, 1 ) ); // Diag Down left\n\t\t\t}\n\t\t}\n\n\t}\n\n\t//Visit next node to right or 1st node on next row\n\toptions.expectations = expect.filter( e => e.remove === undefined );\n\tlet nextCol = ( j + 1 ) % totCols;\n\tlet nextRow = nextCol > 0 ? i : i + 1;\n\treturn xwdSearch( xwd, search, nextRow, nextCol, options );\n}\n\n\nconst alpha = \"qwertyuiopasdfghjklzxcvbnm\";\nlet xwd = makeXwd( 10, 10, alpha.split( \"\" ) );\nlet search = \"othello\".split( \"\" );\nconsole.log( \"Search String=\" + search );\n\nhideString( xwd, search );\nconsole.log( xwd );\n\nlet options = {};\nlet found = xwdSearch( xwd, search, 0, 0, options );\nconsole.log( \"FOUND =\", found );\nconsole.log( options );\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1590989681117
  },
  "{\"sourceMaps\":\"both\",\"sourceRoot\":\"/Users/appy/QI/js-samples/algos2/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/appy/QI/js-samples/algos2\",\"filename\":\"/Users/appy/QI/js-samples/algos2/crossword3.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/appy/QI/js-samples/algos2\",\"plugins\":[{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.10.1": {
    "metadata": {},
    "options": {
      "sourceMaps": "both",
      "sourceRoot": "/Users/appy/QI/js-samples/algos2/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/appy/QI/js-samples/algos2",
      "filename": "/Users/appy/QI/js-samples/algos2/crossword3.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/appy/QI/js-samples/algos2",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-escapes",
          "visitor": {
            "Identifier": {
              "enter": [
                null
              ]
            },
            "TemplateElement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/appy/QI/js-samples/algos2/crossword3.js",
        "plugins": [
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/appy/QI/js-samples/algos2/crossword3.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/appy/QI/js-samples/algos2/",
        "sourceFileName": "crossword3.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar _utils = require(\"./utils\");\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nvar INCREMENTS = new Array([], [0, 1], [1, 0], [1, 1], [1, -1]);\n\nfunction xwdSearch(xwd, search, i, j, options) {\n  var totRows = xwd.length;\n  var totCols = xwd[0].length;\n\n  if (i >= totRows || j >= totCols || i < 0 || j < 0) {\n    return;\n  }\n\n  if (search.length > totCols || search.length > totRows) {\n    return;\n  }\n\n  options = options || {};\n  options.visits = options.visits || (0, _utils.makeXwd)(totRows, totCols, [0]);\n  options.visits[i][j]++;\n\n  var matchString = function matchString(dir) {\n    var _INCREMENTS$Math$abs = _slicedToArray(INCREMENTS[Math.abs(dir)], 2),\n        xr = _INCREMENTS$Math$abs[0],\n        xc = _INCREMENTS$Math$abs[1];\n\n    var r = i,\n        c = j;\n\n    if (dir > 0) {\n      for (var s = 0; s < search.length; s++, r += xr, c += xc) {\n        if (r < 0 || r >= totRows || c < 0 || c >= totCols) {\n          return;\n        }\n\n        if (r !== i || c !== j) {\n          options.visits[r][c]++;\n        }\n\n        if (search[s] !== xwd[r][c]) {\n          return;\n        }\n      }\n    }\n\n    if (dir < 0) {\n      for (var _s2 = search.length - 1; _s2 >= 0; _s2--, r += xr, c += xc) {\n        if (r < 0 || r >= totRows || c < 0 || c >= totCols) {\n          return;\n        }\n\n        var sch = search[_s2];\n        var xch = xwd[r][c];\n\n        if (r !== i || c !== j) {\n          options.visits[r][c]++;\n        }\n\n        if (search[_s2] !== xwd[r][c]) {\n          return;\n        }\n      }\n    }\n\n    return {\n      row: r - xr,\n      col: c - xc\n    };\n  };\n\n  {\n    //Check if this cell matches 1st/last character of search\n    //if it does, match entire string in each direction\n    var ch = xwd[i][j];\n\n    if (search.length === 1 && ch === search[0]) {\n      return {\n        start: {\n          row: i,\n          col: j\n        },\n        end: {\n          row: i,\n          col: j\n        }\n      };\n    }\n\n    if (search.length > 1 && ch === search[0]) {\n      //FORWARD CASE. matched 1st char of search string\n      var _found = matchString(1) || matchString(2) || matchString(3) || matchString(4);\n\n      if (_found) {\n        return {\n          start: {\n            row: i,\n            col: j\n          },\n          end: _found\n        };\n      }\n    }\n\n    if (search.length > 1 && ch === search[search.length - 1]) {\n      //REVERSE CASE. matched last char of search string\n      var _found2 = matchString(-1) || matchString(-2) || matchString(-3) || matchString(-4);\n\n      if (_found2) {\n        return {\n          start: _found2,\n          end: {\n            row: i,\n            col: j\n          }\n        };\n      }\n    }\n  } //Visit next node to right or 1st node on next row\n\n  var nextCol = (j + 1) % totCols;\n  var nextRow = nextCol > 0 ? i : i + 1;\n  return xwdSearch(xwd, search, nextRow, nextCol, options);\n}\n\nvar alpha = \"othelo\"; //\"qwertyuiopasdfghjklzxcvbnm\";\n\nvar xwd = (0, _utils.makeXwd)(10, 10, alpha.split(\"\"));\nvar search = \"othello\".split(\"\");\nconsole.log(\"Search String=\" + search);\n(0, _utils.hideString)(xwd, search);\nconsole.log(xwd);\nvar options = {};\nvar found = xwdSearch(xwd, search, 0, 0, options);\nconsole.log(\"FOUND =\", found);\nconsole.log(options);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "crossword3.js"
      ],
      "names": [
        "INCREMENTS",
        "Array",
        "xwdSearch",
        "xwd",
        "search",
        "i",
        "j",
        "options",
        "totRows",
        "length",
        "totCols",
        "visits",
        "matchString",
        "dir",
        "Math",
        "abs",
        "xr",
        "xc",
        "r",
        "c",
        "s",
        "sch",
        "xch",
        "row",
        "col",
        "ch",
        "start",
        "end",
        "found",
        "nextCol",
        "nextRow",
        "alpha",
        "split",
        "console",
        "log"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/appy/QI/js-samples/algos2/",
      "sourcesContent": [
        "import { hideString, makeXwd } from \"./utils\";\n\n\nvar INCREMENTS = new Array( [], [0, 1], [1, 0], [1, 1], [1, -1] );\n\nfunction xwdSearch( xwd, search, i, j, options ) {\n\tconst totRows = xwd.length;\n\tconst totCols = xwd[ 0 ].length;\n\n\tif ( i >= totRows || j >= totCols || i < 0 || j < 0 ) { return; }\n\n\tif ( search.length > totCols || search.length > totRows ) {\n\t\treturn;\n\t}\n\n\toptions = options || {};\n\toptions.visits = options.visits || makeXwd( totRows, totCols, [ 0 ] );\n\toptions.visits[ i ][ j ]++;\n\n\tlet matchString = function( dir ) {\n\n\t\tlet [ xr, xc ] = INCREMENTS[ Math.abs( dir ) ];\n\n\t\tlet r = i, c = j;\n\t\tif ( dir > 0 ) {\n\t\t\tfor ( let s = 0; s < search.length; s++, r += xr, c += xc ) {\n\t\t\t\tif ( r < 0 || r >= totRows || c < 0 || c >= totCols ) { return; }\n\t\t\t\tif ( r !== i || c !== j ) { options.visits[ r ][ c ]++; }\n\t\t\t\tif ( search[ s ] !== xwd[ r ][ c ] ) { return; }\n\t\t\t}\n\t\t}\n\t\tif ( dir < 0 ) {\n\t\t\tfor ( let s = search.length - 1; s >= 0; s--, r += xr, c += xc ) {\n\t\t\t\tif ( r < 0 || r >= totRows || c < 0 || c >= totCols ) { return; }\n\t\t\t\tlet sch = search[s];\n\t\t\t\tlet xch= xwd[r][c];\n\t\t\t\tif ( r !== i || c !== j ) { options.visits[ r ][ c ]++; }\n\t\t\t\tif ( search[ s ] !== xwd[ r ][ c ] ) { return; }\n\t\t\t}\n\t\t}\n\n\t\treturn { row: r - xr, col: c - xc };\n\t};\n\n\t{\n\t\t//Check if this cell matches 1st/last character of search\n\t\t//if it does, match entire string in each direction\n\t\tconst ch = xwd[ i ][ j ];\n\n\t\tif ( search.length === 1 &&  ch === search[ 0 ] ) {\n\t\t\treturn { start: { row: i, col: j }, end: { row: i, col: j } };\n\t\t}\n\n\t\tif ( search.length > 1 && ch === search[ 0 ] ) {\n\t\t\t//FORWARD CASE. matched 1st char of search string\n\t\t\tlet found = matchString( 1 ) || matchString( 2 ) || matchString( 3 ) || matchString( 4 );\n\t\t\tif ( found ) {\n\t\t\t\treturn { start: { row:i, col:j }, end: found };\n\t\t\t}\n\t\t}\n\n\t\tif ( search.length > 1 && ch === search[ search.length - 1 ] ) {\n\t\t\t//REVERSE CASE. matched last char of search string\n\t\t\tlet found = matchString( -1 ) || matchString( -2 ) || matchString( -3 ) || matchString( -4 );\n\t\t\tif ( found ) {\n\t\t\t\treturn { start: found, end: { row: i, col: j } };\n\t\t\t}\n\t\t}\n\t}\n\n\t//Visit next node to right or 1st node on next row\n\tlet nextCol = ( j + 1 ) % totCols;\n\tlet nextRow = nextCol > 0 ? i : i + 1;\n\treturn xwdSearch( xwd, search, nextRow, nextCol, options );\n}\n\n\nconst alpha = \"othelo\"; //\"qwertyuiopasdfghjklzxcvbnm\";\nlet xwd = makeXwd( 10, 10, alpha.split( \"\" ) );\nlet search = \"othello\".split( \"\" );\nconsole.log( \"Search String=\" + search );\n\nhideString( xwd, search );\nconsole.log( xwd );\n\nlet options = {};\nlet found = xwdSearch( xwd, search, 0, 0, options );\nconsole.log( \"FOUND =\", found );\nconsole.log( options );\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1590992092585
  },
  "{\"sourceMaps\":\"both\",\"sourceRoot\":\"/Users/appy/QI/js-samples/algos2/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/appy/QI/js-samples/algos2\",\"filename\":\"/Users/appy/QI/js-samples/algos2/proxmapSort.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/appy/QI/js-samples/algos2\",\"plugins\":[{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.10.1": {
    "metadata": {},
    "options": {
      "sourceMaps": "both",
      "sourceRoot": "/Users/appy/QI/js-samples/algos2/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/appy/QI/js-samples/algos2",
      "filename": "/Users/appy/QI/js-samples/algos2/proxmapSort.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/appy/QI/js-samples/algos2",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-escapes",
          "visitor": {
            "Identifier": {
              "enter": [
                null
              ]
            },
            "TemplateElement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/appy/QI/js-samples/algos2/proxmapSort.js",
        "plugins": [
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/appy/QI/js-samples/algos2/proxmapSort.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/appy/QI/js-samples/algos2/",
        "sourceFileName": "proxmapSort.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = sort;\n\nvar UTILS = _interopRequireWildcard(require(\"./utils\"));\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n\"use strict\";\n\nfunction bucket(val) {\n  //console.log( `Bucket( ${elem} ) =`+ Math.ceil( Math.log2( elem ) ));\n  if (typeof val === \"number\") return Math.floor(val / 3); //return Math.ceil( Math.log2( elem ) );\n\n  return 0; //default Bucket???\n}\n\nfunction sort() {\n  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : data.length;\n\n  var _ref = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},\n      _ref$mapFn = _ref.mapFn,\n      mapFn = _ref$mapFn === void 0 ? bucket : _ref$mapFn,\n      _ref$compare = _ref.compare,\n      compare = _ref$compare === void 0 ? UTILS.compare : _ref$compare,\n      _ref$max = _ref.max,\n      max = _ref$max === void 0 ? 10000 : _ref$max;\n\n  var stats = {\n    nComps: 0,\n    nWrites: 0\n  };\n  var numBuckets = mapFn(max) + 1; //Create frequency table aka size of each bucket\n\n  var H = new Array(numBuckets).fill(0); // Initialized to 0\n\n  for (var i = 0; i < data.length; i++) {\n    H[mapFn(data[i])]++;\n  } //Find Bucket positions in array\n\n\n  var P = new Array(numBuckets);\n  P[0] = H[0] ? 0 : -1;\n\n  for (var _i = 1, pos = 0; _i < numBuckets; _i++) {\n    pos += H[_i - 1] ? H[_i - 1] : 0;\n    P[_i] = H[_i] ? pos : -1;\n  } //Find bucket Location for each data element\n\n\n  var L = new Array(data.length);\n\n  for (var _i2 = 0; _i2 < L.length; _i2++) {\n    L[_i2] = P[mapFn(data[_i2])];\n  }\n  /*\tconsole.log( \"H:\",H);\n  \tconsole.log( \"P:\",P);\n  \tconsole.log( \"L:\",L);*/\n  //Place elements in Buckets\n\n\n  var A = new Array(data.length);\n  H.fill(0); //reuse it as bucket's current Size\n\n  for (var _i3 = 0; _i3 < data.length; _i3++) {\n    var b = mapFn(data[_i3]);\n\n    var _pos = L[_i3],\n        _end = _pos + H[b];\n\n    A[_end] = data[_i3]; //place data at the end of bucket\n\n    H[b]++;\n\n    for (var j = _pos; j < _end; j++) {\n      if (A[j] !== undefined) {\n        stats.nComps++;\n\n        if (compare(A[j], data[_i3]) > 0) {\n          //make slot for data elems. move 1 elem down\n          UTILS.rotateRight(A, j, _end);\n          stats.nWrites += _end - j + 1;\n          break; //insert done\n        }\n      }\n    }\n  } //copy back sorted elements\n\n\n  for (var _i4 = 0; _i4 < data.length; _i4++) {\n    data[_i4] = A[_i4];\n  }\n\n  stats.nWrites += data.length;\n  return stats;\n}\n\nfunction test() {\n  var origArr = UTILS.makeArray();\n\n  var arr = _toConsumableArray(origArr);\n\n  console.time(\"ProxMapSort\");\n  var stats = sort(arr, 0, arr.length, {\n    mapFn: bucket\n  });\n  console.timeEnd(\"ProxMapSort\");\n  console.log(arr.slice(0, 5) + \" ... \" + arr.slice(-5));\n  console.log(\"Sorted:\" + UTILS.checkSorted(arr, origArr));\n  console.log(\"Stats:\", stats);\n} //test();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByb3htYXBTb3J0LmpzIl0sIm5hbWVzIjpbImJ1Y2tldCIsInZhbCIsIk1hdGgiLCJmbG9vciIsInNvcnQiLCJkYXRhIiwic3RhcnQiLCJlbmQiLCJsZW5ndGgiLCJtYXBGbiIsImNvbXBhcmUiLCJVVElMUyIsIm1heCIsInN0YXRzIiwibkNvbXBzIiwibldyaXRlcyIsIm51bUJ1Y2tldHMiLCJIIiwiQXJyYXkiLCJmaWxsIiwiaSIsIlAiLCJwb3MiLCJMIiwiQSIsImIiLCJqIiwidW5kZWZpbmVkIiwicm90YXRlUmlnaHQiLCJ0ZXN0Iiwib3JpZ0FyciIsIm1ha2VBcnJheSIsImFyciIsImNvbnNvbGUiLCJ0aW1lIiwidGltZUVuZCIsImxvZyIsInNsaWNlIiwiY2hlY2tTb3J0ZWQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFQTs7QUFFQSxTQUFTQSxNQUFULENBQWlCQyxHQUFqQixFQUFzQjtBQUNyQjtBQUNBLE1BQUssT0FBT0EsR0FBUCxLQUFlLFFBQXBCLEVBQStCLE9BQU9DLElBQUksQ0FBQ0MsS0FBTCxDQUFXRixHQUFHLEdBQUcsQ0FBakIsQ0FBUCxDQUZWLENBRXVDOztBQUM1RCxTQUFPLENBQVAsQ0FIcUIsQ0FHWDtBQUNWOztBQUVjLFNBQVNHLElBQVQsR0FDMkU7QUFBQSxNQUQ1REMsSUFDNEQsdUVBRHJELEVBQ3FEO0FBQUEsTUFEakRDLEtBQ2lELHVFQUR6QyxDQUN5QztBQUFBLE1BRHRDQyxHQUNzQyx1RUFEaENGLElBQUksQ0FBQ0csTUFDMkI7O0FBQUEsaUZBQUwsRUFBSztBQUFBLHdCQUExREMsS0FBMEQ7QUFBQSxNQUExREEsS0FBMEQsMkJBQXBEVCxNQUFvRDtBQUFBLDBCQUE1Q1UsT0FBNEM7QUFBQSxNQUE1Q0EsT0FBNEMsNkJBQW5DQyxLQUFLLENBQUNELE9BQTZCO0FBQUEsc0JBQXBCRSxHQUFvQjtBQUFBLE1BQXBCQSxHQUFvQix5QkFBZixLQUFlOztBQUN6RixNQUFJQyxLQUFL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TyxDQUFDRyxHQUFSLENBQWEsWUFBWXpCLEtBQUssQ0FBQzJCLFdBQU4sQ0FBbUJOLEdBQW5CLEVBQXdCRixPQUF4QixDQUF6QjtBQUNBRyxFQUFBQSxPQUFPLENBQUNHLEdBQVIsQ0FBYSxRQUFiLEVBQXVCdkIsS0FBdkI7QUFDQSxDLENBRUQiLCJzb3VyY2VSb290IjoiL1VzZXJzL2FwcHkvUUkvanMtc2FtcGxlcy9hbGdvczIvIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgVVRJTFMgZnJvbSBcIi4vdXRpbHNcIjtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIGJ1Y2tldCggdmFsICl7XG5cdC8vY29uc29sZS5sb2coIGBCdWNrZXQoICR7ZWxlbX0gKSA9YCsgTWF0aC5jZWlsKCBNYXRoLmxvZzIoIGVsZW0gKSApKTtcblx0aWYgKCB0eXBlb2YgdmFsID09PSBcIm51bWJlclwiICkgcmV0dXJuIE1hdGguZmxvb3IodmFsIC8gMyApOyAvL3JldHVybiBNYXRoLmNlaWwoIE1hdGgubG9nMiggZWxlbSApICk7XG5cdHJldHVybiAwOyAvL2RlZmF1bHQgQnVja2V0Pz8/XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNvcnQoIGRhdGEgPSBbXSwgc3RhcnQgPSAwLCBlbmQgPSBkYXRhLmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgbWFwRm49YnVja2V0LCBjb21wYXJlPSBVVElMUy5jb21wYXJlLCBtYXg9IDEwMDAwIH0gPSB7fSApIHtcblx0bGV0IHN0YXRzID0geyBuQ29tcHM6IDAsIG5Xcml0ZXM6IDAgfTtcblxuXHRsZXQgbnVtQnVja2V0cyA9IG1hcEZuKCBtYXggKSArIDE7XG5cdC8vQ3JlYXRlIGZyZXF1ZW5jeSB0YWJsZSBha2Egc2l6ZSBvZiBlYWNoIGJ1Y2tldFxuXHRsZXQgSCA9IG5ldyBBcnJheSggbnVtQnVja2V0cyApLmZpbGwoIDAgKTsgLy8gSW5pdGlhbGl6ZWQgdG8gMFxuXHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrICkge1xuXHRcdEhbIG1hcEZuKCBkYXRhWyBpIF0gKSBdKys7XG5cdH1cblxuXHQvL0ZpbmQgQnVja2V0IHBvc2l0aW9ucyBpbiBhcnJheVxuXHRsZXQgUCA9IG5ldyBBcnJheSggbnVtQnVja2V0cyApO1xuXHRQWyAwIF0gPSAgSFsgMCBdID8gMCA6IC0xO1xuXHRmb3IgKCBsZXQgaSA9IDEsIHBvcyA9IDA7IGkgPCBudW1CdWNrZXRzOyBpKysgKSB7XG5cdFx0cG9zICs9IEhbIGkgLSAxIF0gPyBIWyBpIC0gMSBdIDogMDtcblx0XHRQWyBpIF0gPSBIWyBpIF0gPyBwb3MgOiAtMTtcblx0fVxuXG5cdC8vRmluZCBidWNrZXQgTG9jYXRpb24gZm9yIGVhY2ggZGF0YSBlbGVtZW50XG5cdGxldCBMID0gbmV3IEFycmF5KCBkYXRhLmxlbmd0aCApO1xuXHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBMLmxlbmd0aDsgaSsrICkge1xuXHRcdExbIGkgXSA9IFBbIG1hcEZuKCBkYXRhWyBpIF0gKSBdO1xuXHR9XG5cbi8qXHRjb25zb2xlLmxvZyggXCJIOlwiLEgpO1xuXHRjb25zb2xlLmxvZyggXCJQOlwiLFApO1xuXHRjb25zb2xlLmxvZyggXCJMOlwiLEwpOyovXG5cblx0Ly9QbGFjZSBlbGVtZW50cyBpbiBCdWNrZXRzXG5cdGxldCBBID0gbmV3IEFycmF5KCBkYXRhLmxlbmd0aCApO1xuXHRILmZpbGwoIDAgKTsgLy9yZXVzZSBpdCBhcyBidWNrZXQncyBjdXJyZW50IFNpemVcblx0Zm9yICggbGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKyApIHtcblx0XHRjb25zdCBiID0gbWFwRm4oIGRhdGFbIGkgXSApO1xuXHRcdGNvbnN0IHBvcyA9IExbIGkgXSwgZW5kID0gcG9zICsgSFsgYiBdO1xuXHRcdEFbIGVuZCBdID0gZGF0YVsgaSBdOyAvL3BsYWNlIGRhdGEgYXQgdGhlIGVuZCBvZiBidWNrZXRcblx0XHRIWyBiIF0rKztcblx0XHRmb3IgKCBsZXQgaiA9IHBvczsgaiA8IGVuZDsgaisrICkge1xuXHRcdFx0aWYgKCBBWyBqIF0gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0c3RhdHMubkNvbXBzKys7XG5cdFx0XHRcdGlmICggY29tcGFyZSggQVsgaiBdLCBkYXRhWyBpIF0gKSA+IDAgKSB7XG5cdFx0XHRcdFx0Ly9tYWtlIHNsb3QgZm9yIGRhdGEgZWxlbXMuIG1vdmUgMSBlbGVtIGRvd25cblx0XHRcdFx0XHRVVElMUy5yb3RhdGVSaWdodChBLGosZW5kKTtcblx0XHRcdFx0XHRzdGF0cy5uV3JpdGVzICs9IGVuZCAtIGogKzE7XG5cdFx0XHRcdFx0YnJlYWs7IC8vaW5zZXJ0IGRvbmVcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHQvL2NvcHkgYmFjayBzb3J0ZWQgZWxlbWVudHNcblx0Zm9yICggbGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKyApIHtcblx0XHRkYXRhWyBpIF0gPSBBWyBpIF07XG5cdH1cblx0c3RhdHMubldyaXRlcyArPSBkYXRhLmxlbmd0aDtcblxuXHRyZXR1cm4gc3RhdHM7XG59XG5cbmZ1bmN0aW9uIHRlc3QoKSB7XG5cdGxldCBvcmlnQXJyID0gVVRJTFMubWFrZUFycmF5KCk7XG5cdGxldCBhcnIgPSBbIC4uLiBvcmlnQXJyIF07XG5cdGNvbnNvbGUudGltZSggXCJQcm94TWFwU29ydFwiICk7XG5cdGNvbnN0IHN0YXRzID0gc29ydCggYXJyLDAsYXJyLmxlbmd0aCwgeyAgbWFwRm46YnVja2V0IH0gKTtcblx0Y29uc29sZS50aW1lRW5kKCBcIlByb3hNYXBTb3J0XCIgKTtcblxuXHRjb25zb2xlLmxvZyggYXJyLnNsaWNlKCAwLCA1ICkgKyBcIiAuLi4gXCIgKyBhcnIuc2xpY2UoIC01ICkgKTtcblx0Y29uc29sZS5sb2coIFwiU29ydGVkOlwiICsgVVRJTFMuY2hlY2tTb3J0ZWQoIGFyciwgb3JpZ0FyciApICk7XG5cdGNvbnNvbGUubG9nKCBcIlN0YXRzOlwiLCBzdGF0cyApO1xufVxuXG4vL3Rlc3QoKTtcbiJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "proxmapSort.js"
      ],
      "names": [
        "bucket",
        "val",
        "Math",
        "floor",
        "sort",
        "data",
        "start",
        "end",
        "length",
        "mapFn",
        "compare",
        "UTILS",
        "max",
        "stats",
        "nComps",
        "nWrites",
        "numBuckets",
        "H",
        "Array",
        "fill",
        "i",
        "P",
        "pos",
        "L",
        "A",
        "b",
        "j",
        "undefined",
        "rotateRight",
        "test",
        "origArr",
        "makeArray",
        "arr",
        "console",
        "time",
        "timeEnd",
        "log",
        "slice",
        "checkSorted"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/appy/QI/js-samples/algos2/",
      "sourcesContent": [
        "import * as UTILS from \"./utils\";\n\n\"use strict\";\n\nfunction bucket( val ){\n\t//console.log( `Bucket( ${elem} ) =`+ Math.ceil( Math.log2( elem ) ));\n\tif ( typeof val === \"number\" ) return Math.floor(val / 3 ); //return Math.ceil( Math.log2( elem ) );\n\treturn 0; //default Bucket???\n}\n\nexport default function sort( data = [], start = 0, end = data.length,\n                              { mapFn=bucket, compare= UTILS.compare, max= 10000 } = {} ) {\n\tlet stats = { nComps: 0, nWrites: 0 };\n\n\tlet numBuckets = mapFn( max ) + 1;\n\t//Create frequency table aka size of each bucket\n\tlet H = new Array( numBuckets ).fill( 0 ); // Initialized to 0\n\tfor ( let i = 0; i < data.length; i++ ) {\n\t\tH[ mapFn( data[ i ] ) ]++;\n\t}\n\n\t//Find Bucket positions in array\n\tlet P = new Array( numBuckets );\n\tP[ 0 ] =  H[ 0 ] ? 0 : -1;\n\tfor ( let i = 1, pos = 0; i < numBuckets; i++ ) {\n\t\tpos += H[ i - 1 ] ? H[ i - 1 ] : 0;\n\t\tP[ i ] = H[ i ] ? pos : -1;\n\t}\n\n\t//Find bucket Location for each data element\n\tlet L = new Array( data.length );\n\tfor ( let i = 0; i < L.length; i++ ) {\n\t\tL[ i ] = P[ mapFn( data[ i ] ) ];\n\t}\n\n/*\tconsole.log( \"H:\",H);\n\tconsole.log( \"P:\",P);\n\tconsole.log( \"L:\",L);*/\n\n\t//Place elements in Buckets\n\tlet A = new Array( data.length );\n\tH.fill( 0 ); //reuse it as bucket's current Size\n\tfor ( let i = 0; i < data.length; i++ ) {\n\t\tconst b = mapFn( data[ i ] );\n\t\tconst pos = L[ i ], end = pos + H[ b ];\n\t\tA[ end ] = data[ i ]; //place data at the end of bucket\n\t\tH[ b ]++;\n\t\tfor ( let j = pos; j < end; j++ ) {\n\t\t\tif ( A[ j ] !== undefined ) {\n\t\t\t\tstats.nComps++;\n\t\t\t\tif ( compare( A[ j ], data[ i ] ) > 0 ) {\n\t\t\t\t\t//make slot for data elems. move 1 elem down\n\t\t\t\t\tUTILS.rotateRight(A,j,end);\n\t\t\t\t\tstats.nWrites += end - j +1;\n\t\t\t\t\tbreak; //insert done\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t//copy back sorted elements\n\tfor ( let i = 0; i < data.length; i++ ) {\n\t\tdata[ i ] = A[ i ];\n\t}\n\tstats.nWrites += data.length;\n\n\treturn stats;\n}\n\nfunction test() {\n\tlet origArr = UTILS.makeArray();\n\tlet arr = [ ... origArr ];\n\tconsole.time( \"ProxMapSort\" );\n\tconst stats = sort( arr,0,arr.length, {  mapFn:bucket } );\n\tconsole.timeEnd( \"ProxMapSort\" );\n\n\tconsole.log( arr.slice( 0, 5 ) + \" ... \" + arr.slice( -5 ) );\n\tconsole.log( \"Sorted:\" + UTILS.checkSorted( arr, origArr ) );\n\tconsole.log( \"Stats:\", stats );\n}\n\n//test();\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1591087183314
  },
  "{\"sourceMaps\":\"both\",\"sourceRoot\":\"/Users/appy/QI/js-samples/algos2/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/appy/QI/js-samples/algos2\",\"filename\":\"/Users/appy/QI/js-samples/algos2/allSorts.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/appy/QI/js-samples/algos2\",\"plugins\":[{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.10.1": {
    "metadata": {},
    "options": {
      "sourceMaps": "both",
      "sourceRoot": "/Users/appy/QI/js-samples/algos2/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/appy/QI/js-samples/algos2",
      "filename": "/Users/appy/QI/js-samples/algos2/allSorts.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/appy/QI/js-samples/algos2",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-escapes",
          "visitor": {
            "Identifier": {
              "enter": [
                null
              ]
            },
            "TemplateElement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/appy/QI/js-samples/algos2/allSorts.js",
        "plugins": [
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/appy/QI/js-samples/algos2/allSorts.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/appy/QI/js-samples/algos2/",
        "sourceFileName": "allSorts.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar _bubbleSort = _interopRequireDefault(require(\"./bubbleSort\"));\n\nvar _insertionSort = _interopRequireDefault(require(\"./insertionSort\"));\n\nvar _mergeSort = _interopRequireDefault(require(\"./mergeSort\"));\n\nvar _heapSort = _interopRequireDefault(require(\"./heapSort\"));\n\nvar _quickSort = _interopRequireDefault(require(\"./quickSort\"));\n\nvar _proxmapSort = _interopRequireDefault(require(\"./proxmapSort\"));\n\nvar UTILS = _interopRequireWildcard(require(\"./utils\"));\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar allSorts = {\n  bubble: _bubbleSort[\"default\"],\n  insertion: _insertionSort[\"default\"],\n  merge: _mergeSort[\"default\"],\n  heap: _heapSort[\"default\"],\n  quick: _quickSort[\"default\"],\n  proxMap: _proxmapSort[\"default\"]\n};\n\nfunction testSort(name, arr, origArr) {\n  var sort = allSorts[name];\n  if (!sort) throw \"Invalid sort algo name: \" + name;\n  console.time(name);\n  var start = process.hrtime();\n  var stats = sort(arr);\n  stats.elapsedTime = process.hrtime(start);\n  console.timeEnd(name);\n  console.log(name + \" Array:\", arr.slice(0, 5) + \" ... \" + arr.slice(-5));\n  console.log(name + \" Sorted:\" + UTILS.checkSorted(arr, origArr)); //console.log( name + \" Stats:\", stats );\n\n  return stats;\n}\n\nvar origArr = UTILS.makeArray(); //testSort( \"bubble\", [ ...origArr ] );\n\nvar Comps = [];\nObject.getOwnPropertyNames(allSorts).forEach(function (algo) {\n  var stats = testSort(algo, _toConsumableArray(origArr));\n  Comps.push({\n    name: algo,\n    stats: stats\n  });\n});\nvar start = process.hrtime();\norigArr.sort(UTILS.compare);\nvar elapsedTime = process.hrtime(start);\nComps.push({\n  name: \"JS Internal\",\n  stats: {\n    elapsedTime: elapsedTime\n  }\n});\nconsole.log(\"\\n\\n\\n\");\n\nvar printf = require('printf');\n\nconsole.log(printf(\"%15s %15s  %15s %15s\", \"Algo   \", \"Time     \", \"#Comps   \", \"#Writes   \"));\nComps.forEach(function (c) {\n  console.log(printf(\"%15s %5d.%09d %15d %15d\", c.name, c.stats.elapsedTime[0], c.stats.elapsedTime[1], c.stats.nComps || 0, c.stats.nWrites || 0));\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFsbFNvcnRzLmpzIl0sIm5hbWVzIjpbImFsbFNvcnRzIiwiYnViYmxlIiwiYnViYmxlU29ydCIsImluc2VydGlvbiIsImluc2VydGlvblNvcnQiLCJtZXJnZSIsIm1lcmdlU29ydCIsImhlYXAiLCJoZWFwU29ydCIsInF1aWNrIiwicXVpY2tTb3J0IiwicHJveE1hcCIsInByb3htYXBTb3J0IiwidGVzdFNvcnQiLCJuYW1lIiwiYXJyIiwib3JpZ0FyciIsInNvcnQiLCJjb25zb2xlIiwidGltZSIsInN0YXJ0IiwicHJvY2VzcyIsImhydGltZSIsInN0YXRzIiwiZWxhcHNlZFRpbWUiLCJ0aW1lRW5kIiwibG9nIiwic2xpY2UiLCJVVElMUyIsImNoZWNrU29ydGVkIiwibWFrZUFycmF5IiwiQ29tcHMiLCJPYmplY3QiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZm9yRWFjaCIsImFsZ28iLCJwdXNoIiwiY29tcGFyZSIsInByaW50ZiIsInJlcXVpcmUiLCJjIiwibkNvbXBzIiwibldyaXRlcyJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUdBLElBQU1BLFFBQVEsR0FBRztBQUNoQkMsRUFBQUEsTUFBTSxFQUFFQyxzQkFEUTtBQUVoQkMsRUFBQUEsU0FBUyxFQUFFQyx5QkFGSztBQUdoQkMsRUFBQUEsS0FBSyxFQUFFQyxxQkFIUztBQUloQkMsRUFBQUEsSUFBSSxFQUFFQyxvQkFKVTtBQUtoQkMsRUFBQUEsS0FBSyxFQUFFQyxxQkFMUztBQU1oQkMsRUFBQUEsT0FBTyxFQUFFQztBQU5PLENBQWpCOztBQVNBLFNBQVNDLFFBQVQsQ0FBbUJDLElBQW5CLEVBQXlCQyxHQUF6QixFQUE4QkMsT0FBOUIsRUFBd0M7QUFDdkMsTUFBTUMsSUFBSSxHQUFHakIsUUFBUSxDQUFFYyxJQUFGLENBQXJCO0FBQ0EsTUFBSyxDQUFDRyxJQUFOLEVBQWEsTUFBTSw2QkFBNkJILElBQW5DO0FBRWJJLEVBQUFBLE9BQU8sQ0FBQ0MsSUFBUixDQUFjTCxJQUFkO0FBQ0EsTUFBTU0sS0FBSyxHQUFHQyxPQUFPLENBQUNDLE1BQVIsRUFBZDtBQUNBLE1BQU1DLEtBQUssR0FBR04sSUFBSSxDQUFFRixHQUFGLENBQWxCO0FBQ0FRLEVBQUFBLEtBQUssQ0FBQ0MsV0FBTixHQUFvQkgsT0FBTyxDQUFDQyxNQUFSLENBQWVGLEtBQWYsQ0FBcEI7QUFDQUYsRUFBQUEsT0FBTyxDQUFDTyxPQUFSLENBQWlCWCxJQUFqQjtBQUVBSSxFQUFBQSxPQUFPLENBQUNRLEdBQVIsQ0FBYVosSUFBSSxHQUFHLFNBQXBCLEVBQStCQyxHQUFHLENBQUNZLEtBQUosQ0FBVyxDQUFYLEVBQWMsQ0FBZCxJQUFvQixPQUFwQixHQUE4QlosR0FBRyxDQUFDWSxLQUFKLENBQVcsQ0FBQyxDQUFaLENBQTdEO0FBQ0FULEVBQUFBLE9BQU8sQ0FBQ1EsR0FBUixDQUFhWixJQUFJLEdBQUcsVUFBUCxHQUFvQmMsS0FBSyxDQUFDQyxXQUFOLENBQW1CZCxHQUFuQixFQUF3QkMsT0FBeEIsQ0FBakMsRUFYdUMsQ0FZdkM7O0FBQ0EsU0FBT08sS0FBUDtBQUNBOztBQUVELElBQUlQLE9BQU8sR0FBR1ksS0FBSyxDQUFDRSxTQUFOLEVBQWQsQyxDQUVBOztBQUNBLElBQUlDLEtBQUssR0FBRyxFQUFaO0FBQ0FDLE1BQU0sQ0FBQ0MsbUJBQVAsQ0FBNEJqQyxRQUE1QixFQUF1Q2tDLE9BQXZDLENBQWdELFVBQUNDLElBQUQsRUFBVTtBQUN6RCxNQUFNWixLQUFLLEdBQUdWLFFBQVEsQ0FBRXNCLElBQUYscUJBQWFuQixPQUFiLEVBQXRCO0FBQ0FlLEVBQUFBLEtBQUssQ0FBQ0ssSUFBTixDQUFZO0FBQUV0QixJQUFBQSxJQUFJLEVBQUVxQixJQUFSO0FBQWNaLElBQUFBLEtBQUssRUFBRUE7QUFBckIsR0FBWjtBQUNBLENBSEQ7QUFLQSxJQUFNSCxLQUFLLEdBQUdDLE9BQU8sQ0FBQ0MsTUFBUixFQUFkO0FBQ0FOLE9BQU8sQ0FBQ0MsSUFBUixDQUFjVyxLQUFLLENBQUNTLE9BQXBCO0FBQ0EsSUFBTWIsV0FBVyxHQUFHSCxPQUFPLENBQUNDLE1BQVIsQ0FBZUYsS0FBZixDQUFwQjtBQUVBVyxLQUFLLENBQUNLLElBQU4sQ0FBWTtBQUFFdEIsRUFBQUEsSUFBSSxFQUFFLGFBQVI7QUFBdUJTLEVBQUFBLEtBQUssRUFBRTtBQUFFQyxJQUFBQSxXQUFXLEVBQUVBO0FBQWY7QUFBOUIsQ0FBWjtBQUNBTixPQUFPLENBQUNRLEdBQVIsQ0FBYSxRQUFiOztBQUNBLElBQUlZLE1BQU0sR0FBR0MsT0FBTyxDQUFDLFFBQUQsQ0FBcEI7O0FBRUFyQixPQUFPLENBQUNRLEdBQVIsQ0FBYVksTUFBTSxDQUFFLHNCQUFGLEVBQTBCLFNBQTFCLEVBQXFDLFdBQXJDLEVBQWtELFdBQWxELEVBQStELFlBQS9ELENBQW5CO0FBQ0FQLEtBQUssQ0FBQ0csT0FBTixDQUFlLFVBQUFNLENBQUMsRUFBSTtBQUVuQnRCLEVBQUFBLE9BQU8sQ0FBQ1EsR0FBUixDQUFhWSxNQUFNLENBQUUseUJBQUYsRUFDbEJFLENBQUMsQ0FBQzFCLElBRGdCLEVBQ1YwQixDQUFDLENBQUNqQixLQUFGLENBQVFDLFdBQVIsQ0FBcUIsQ0FBckIsQ0FEVSxFQUNnQmdCLENBQUMsQ0FBQ2pCLEtBQUYsQ0FBUUMsV0FBUixDQUFxQixDQUFyQixDQURoQixFQUVsQmdCLENBQUMsQ0FBQ2pCLEtBQUYsQ0FBUWtCLE1BQVIsSUFBa0IsQ0FGQSxFQUVHRCxDQUFDLENBQUNqQixLQUFGLENBQVFtQixPQUFSLElBQW1CLENBRnRCLENBQW5CO0FBR0EsQ0FMRCIsInNvdXJjZVJvb3QiOiIvVXNlcnMvYXBweS9RSS9qcy1zYW1wbGVzL2FsZ29zMi8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYnViYmxlU29ydCBmcm9tIFwiLi9idWJibGVTb3J0XCI7XG5pbXBvcnQgaW5zZXJ0aW9uU29ydCBmcm9tIFwiLi9pbnNlcnRpb25Tb3J0XCI7XG5pbXBvcnQgbWVyZ2VTb3J0IGZyb20gXCIuL21lcmdlU29ydFwiO1xuaW1wb3J0IGhlYXBTb3J0IGZyb20gXCIuL2hlYXBTb3J0XCI7XG5pbXBvcnQgcXVpY2tTb3J0IGZyb20gXCIuL3F1aWNrU29ydFwiO1xuaW1wb3J0IHByb3htYXBTb3J0IGZyb20gXCIuL3Byb3htYXBTb3J0XCI7XG5pbXBvcnQgKiBhcyBVVElMUyBmcm9tIFwiLi91dGlsc1wiO1xuXG5cbmNvbnN0IGFsbFNvcnRzID0ge1xuXHRidWJibGU6IGJ1YmJsZVNvcnQsXG5cdGluc2VydGlvbjogaW5zZXJ0aW9uU29ydCxcblx0bWVyZ2U6IG1lcmdlU29ydCxcblx0aGVhcDogaGVhcFNvcnQsXG5cdHF1aWNrOiBxdWlja1NvcnQsXG5cdHByb3hNYXA6IHByb3htYXBTb3J0XG59O1xuXG5mdW5jdGlvbiB0ZXN0U29ydCggbmFtZSwgYXJyLCBvcmlnQXJyICkge1xuXHRjb25zdCBzb3J0ID0gYWxsU29ydHNbIG5hbWUgXTtcblx0aWYgKCAhc29ydCApIHRocm93IFwiSW52YWxpZCBzb3J0IGFsZ28gbmFtZTogXCIgKyBuYW1lO1xuXG5cdGNvbnNvbGUudGltZSggbmFtZSApO1xuXHRjb25zdCBzdGFydCA9IHByb2Nlc3MuaHJ0aW1lKCk7XG5cdGNvbnN0IHN0YXRzID0gc29ydCggYXJyICk7XG5cdHN0YXRzLmVsYXBzZWRUaW1lID0gcHJvY2Vzcy5ocnRpbWUoc3RhcnQpXG5cdGNvbnNvbGUudGltZUVuZCggbmFtZSApO1xuXG5cdGNvbnNvbGUubG9nKCBuYW1lICsgXCIgQXJyYXk6XCIsIGFyci5zbGljZSggMCwgNSApICsgXCIgLi4uIFwiICsgYXJyLnNsaWNlKCAtNSApICk7XG5cdGNvbnNvbGUubG9nKCBuYW1lICsgXCIgU29ydGVkOlwiICsgVVRJTFMuY2hlY2tTb3J0ZWQoIGFyciwgb3JpZ0FyciApICk7XG5cdC8vY29uc29sZS5sb2coIG5hbWUgKyBcIiBTdGF0czpcIiwgc3RhdHMgKTtcblx0cmV0dXJuIHN0YXRzO1xufVxuXG5sZXQgb3JpZ0FyciA9IFVUSUxTLm1ha2VBcnJheSgpO1xuXG4vL3Rlc3RTb3J0KCBcImJ1YmJsZVwiLCBbIC4uLm9yaWdBcnIgXSApO1xubGV0IENvbXBzID0gW107XG5PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyggYWxsU29ydHMgKS5mb3JFYWNoKCAoYWxnbykgPT4ge1xuXHRjb25zdCBzdGF0cyA9IHRlc3RTb3J0KCBhbGdvLCBbIC4uLm9yaWdBcnIgXSApO1xuXHRDb21wcy5wdXNoKCB7IG5hbWU6IGFsZ28sIHN0YXRzOiBzdGF0cyB9ICk7XG59ICk7XG5cbmNvbnN0IHN0YXJ0ID0gcHJvY2Vzcy5ocnRpbWUoKTtcbm9yaWdBcnIuc29ydCggVVRJTFMuY29tcGFyZSApO1xuY29uc3QgZWxhcHNlZFRpbWUgPSBwcm9jZXNzLmhydGltZShzdGFydCk7XG5cbkNvbXBzLnB1c2goIHsgbmFtZTogXCJKUyBJbnRlcm5hbFwiLCBzdGF0czogeyBlbGFwc2VkVGltZTogZWxhcHNlZFRpbWUgfSB9ICk7XG5jb25zb2xlLmxvZyggXCJcXG5cXG5cXG5cIiApO1xudmFyIHByaW50ZiA9IHJlcXVpcmUoJ3ByaW50ZicpO1xuXG5jb25zb2xlLmxvZyggcHJpbnRmKCBcIiUxNXMgJTE1cyAgJTE1cyAlMTVzXCIsIFwiQWxnbyAgIFwiLCBcIlRpbWUgICAgIFwiLCBcIiNDb21wcyAgIFwiLCBcIiNXcml0ZXMgICBcIiApICk7XG5Db21wcy5mb3JFYWNoKCBjID0+IHtcblxuXHRjb25zb2xlLmxvZyggcHJpbnRmKCBcIiUxNXMgJTVkLiUwOWQgJTE1ZCAlMTVkXCIsXG5cdFx0Yy5uYW1lLCBjLnN0YXRzLmVsYXBzZWRUaW1lWyAwIF0sIGMuc3RhdHMuZWxhcHNlZFRpbWVbIDEgXSxcblx0XHRjLnN0YXRzLm5Db21wcyB8fCAwLCBjLnN0YXRzLm5Xcml0ZXMgfHwgMCApICk7XG59KTtcbiJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "allSorts.js"
      ],
      "names": [
        "allSorts",
        "bubble",
        "bubbleSort",
        "insertion",
        "insertionSort",
        "merge",
        "mergeSort",
        "heap",
        "heapSort",
        "quick",
        "quickSort",
        "proxMap",
        "proxmapSort",
        "testSort",
        "name",
        "arr",
        "origArr",
        "sort",
        "console",
        "time",
        "start",
        "process",
        "hrtime",
        "stats",
        "elapsedTime",
        "timeEnd",
        "log",
        "slice",
        "UTILS",
        "checkSorted",
        "makeArray",
        "Comps",
        "Object",
        "getOwnPropertyNames",
        "forEach",
        "algo",
        "push",
        "compare",
        "printf",
        "require",
        "c",
        "nComps",
        "nWrites"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/appy/QI/js-samples/algos2/",
      "sourcesContent": [
        "import bubbleSort from \"./bubbleSort\";\nimport insertionSort from \"./insertionSort\";\nimport mergeSort from \"./mergeSort\";\nimport heapSort from \"./heapSort\";\nimport quickSort from \"./quickSort\";\nimport proxmapSort from \"./proxmapSort\";\nimport * as UTILS from \"./utils\";\n\n\nconst allSorts = {\n\tbubble: bubbleSort,\n\tinsertion: insertionSort,\n\tmerge: mergeSort,\n\theap: heapSort,\n\tquick: quickSort,\n\tproxMap: proxmapSort\n};\n\nfunction testSort( name, arr, origArr ) {\n\tconst sort = allSorts[ name ];\n\tif ( !sort ) throw \"Invalid sort algo name: \" + name;\n\n\tconsole.time( name );\n\tconst start = process.hrtime();\n\tconst stats = sort( arr );\n\tstats.elapsedTime = process.hrtime(start)\n\tconsole.timeEnd( name );\n\n\tconsole.log( name + \" Array:\", arr.slice( 0, 5 ) + \" ... \" + arr.slice( -5 ) );\n\tconsole.log( name + \" Sorted:\" + UTILS.checkSorted( arr, origArr ) );\n\t//console.log( name + \" Stats:\", stats );\n\treturn stats;\n}\n\nlet origArr = UTILS.makeArray();\n\n//testSort( \"bubble\", [ ...origArr ] );\nlet Comps = [];\nObject.getOwnPropertyNames( allSorts ).forEach( (algo) => {\n\tconst stats = testSort( algo, [ ...origArr ] );\n\tComps.push( { name: algo, stats: stats } );\n} );\n\nconst start = process.hrtime();\norigArr.sort( UTILS.compare );\nconst elapsedTime = process.hrtime(start);\n\nComps.push( { name: \"JS Internal\", stats: { elapsedTime: elapsedTime } } );\nconsole.log( \"\\n\\n\\n\" );\nvar printf = require('printf');\n\nconsole.log( printf( \"%15s %15s  %15s %15s\", \"Algo   \", \"Time     \", \"#Comps   \", \"#Writes   \" ) );\nComps.forEach( c => {\n\n\tconsole.log( printf( \"%15s %5d.%09d %15d %15d\",\n\t\tc.name, c.stats.elapsedTime[ 0 ], c.stats.elapsedTime[ 1 ],\n\t\tc.stats.nComps || 0, c.stats.nWrites || 0 ) );\n});\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1591085193504
  },
  "{\"sourceMaps\":\"both\",\"sourceRoot\":\"/Users/appy/QI/js-samples/algos2/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/appy/QI/js-samples/algos2\",\"filename\":\"/Users/appy/QI/js-samples/algos2/binaryTree.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/appy/QI/js-samples/algos2\",\"plugins\":[{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.10.1": {
    "metadata": {},
    "options": {
      "sourceMaps": "both",
      "sourceRoot": "/Users/appy/QI/js-samples/algos2/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/appy/QI/js-samples/algos2",
      "filename": "/Users/appy/QI/js-samples/algos2/binaryTree.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/appy/QI/js-samples/algos2",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-escapes",
          "visitor": {
            "Identifier": {
              "enter": [
                null
              ]
            },
            "TemplateElement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/appy/QI/js-samples/algos2/binaryTree.js",
        "plugins": [
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/appy/QI/js-samples/algos2/binaryTree.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/appy/QI/js-samples/algos2/",
        "sourceFileName": "binaryTree.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar UTILS = _interopRequireWildcard(require(\"./utils\"));\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Node = /*#__PURE__*/function () {\n  function Node(val) {\n    _classCallCheck(this, Node);\n\n    this.value = val;\n    this.left = this.right = null;\n  }\n\n  _createClass(Node, [{\n    key: \"postorder\",\n    value: /*#__PURE__*/regeneratorRuntime.mark(function postorder() {\n      return regeneratorRuntime.wrap(function postorder$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(this.left !== null)) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.delegateYield(this.left, \"t0\", 2);\n\n            case 2:\n              if (!(this.right !== null)) {\n                _context.next = 4;\n                break;\n              }\n\n              return _context.delegateYield(this.right, \"t1\", 4);\n\n            case 4:\n              _context.next = 6;\n              return this.value;\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, postorder, this);\n    })\n  }, {\n    key: \"inorder\",\n    value: /*#__PURE__*/regeneratorRuntime.mark(function inorder() {\n      return regeneratorRuntime.wrap(function inorder$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(this.left !== null)) {\n                _context2.next = 2;\n                break;\n              }\n\n              return _context2.delegateYield(this.left, \"t0\", 2);\n\n            case 2:\n              _context2.next = 4;\n              return this.value;\n\n            case 4:\n              if (!(this.right !== null)) {\n                _context2.next = 6;\n                break;\n              }\n\n              return _context2.delegateYield(this.right, \"t1\", 6);\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, inorder, this);\n    })\n  }, {\n    key: \"preorder\",\n    value: /*#__PURE__*/regeneratorRuntime.mark(function preorder() {\n      return regeneratorRuntime.wrap(function preorder$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return this.value;\n\n            case 2:\n              if (!(this.left !== null)) {\n                _context3.next = 4;\n                break;\n              }\n\n              return _context3.delegateYield(this.left, \"t0\", 4);\n\n            case 4:\n              if (!(this.right !== null)) {\n                _context3.next = 6;\n                break;\n              }\n\n              return _context3.delegateYield(this.right, \"t1\", 6);\n\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, preorder, this);\n    })\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this.value;\n    }\n  }, {\n    key: \"left\",\n    get: function get() {\n      return this.left;\n    },\n    set: function set(child) {\n      this.left = child;\n    }\n  }, {\n    key: \"right\",\n    get: function get() {\n      return this.right;\n    },\n    set: function set(child) {\n      this.right = child;\n    }\n  }]);\n\n  return Node;\n}();\n\nvar BinaryTree = /*#__PURE__*/function () {\n  function BinaryTree(value) {\n    _classCallCheck(this, BinaryTree);\n\n    if (value) {\n      this.root = new Node(value);\n    }\n  }\n\n  _createClass(BinaryTree, [{\n    key: \"find\",\n    value: function find(val) {\n      if (val === undefined) return null;\n      var nodeCompare = val instanceof Node;\n      var valCompare = !nodeCompare;\n\n      var _iterator = _createForOfIteratorHelper(this.DFS()),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var n = _step.value;\n\n          if (nodeCompare && n === val || valCompare && n.value === val) {\n            return n;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return null;\n    }\n  }, {\n    key: \"addLeft\",\n    value: function addLeft(parent, val) {\n      if (!parent) {\n        return null;\n      }\n\n      var parNode = this.find(parent);\n\n      if (val instanceof Node && this.find(val) !== null) {\n        throw \"Cant add pre-existing node in tree.\";\n      }\n\n      if (parNode && parNode.left() === null) {\n        var valNode = new Node(val);\n        parNode.setLeft(valNode);\n        return valNode;\n      }\n    }\n  }, {\n    key: \"addRight\",\n    value: function addRight(parent, val) {\n      if (!parent) {\n        return null;\n      }\n\n      var parNode = this.find(parent);\n\n      if (val instanceof Node && this.find(val) !== null) {\n        throw \"Cant add pre-existing node in tree.\";\n      }\n\n      if (parNode && parNode.right() === null) {\n        var valNode = new Node(val);\n        parNode.setRight(valNode);\n        return valNode;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"BFS\",\n    value: /*#__PURE__*/regeneratorRuntime.mark(function BFS() {\n      var root,\n          bfs,\n          last,\n          current,\n          _args4 = arguments;\n      return regeneratorRuntime.wrap(function BFS$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              root = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : this.root;\n              bfs = [root];\n              last = 0, current = bfs[last];\n\n            case 3:\n              if (!current) {\n                _context4.next = 11;\n                break;\n              }\n\n              _context4.next = 6;\n              return current.value();\n\n            case 6:\n              if (current.left) {\n                bfs.push(current.left());\n              }\n\n              if (current.right) {\n                bfs.push(current.right());\n              }\n\n            case 8:\n              ++last, current = bfs[last];\n              _context4.next = 3;\n              break;\n\n            case 11:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, BFS, this);\n    })\n  }, {\n    key: \"DFS\",\n    value: /*#__PURE__*/regeneratorRuntime.mark(function DFS() {\n      var root,\n          _args5 = arguments;\n      return regeneratorRuntime.wrap(function DFS$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              root = _args5.length > 0 && _args5[0] !== undefined ? _args5[0] : this.root;\n              return _context5.delegateYield(root.postorder(), \"t0\", 2);\n\n            case 2:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, DFS, this);\n    })\n  }]);\n\n  return BinaryTree;\n}();\n\nfunction test() {\n  var arr = UTILS.makeArray(true);\n  var tree = new BinaryTree(\"ROOT\");\n  tree.addLeft(\"ROOT\", \"fruits\");\n  tree.addRight(\"ROOT\", \"veggies\");\n  tree.addLeft(\"fruits\", \"apple\");\n  tree.addRight(\"fruits\", \"orange\");\n  tree.addLeft(\"veggies\", \"broccolli\");\n  tree.addRight(\"veggies\", \"carrot\");\n\n  var _iterator2 = _createForOfIteratorHelper(tree.DFS()),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var v = _step2.value;\n      console.log(v);\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n}\n\ntest();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "binaryTree.js"
      ],
      "names": [
        "Node",
        "val",
        "value",
        "left",
        "right",
        "child",
        "BinaryTree",
        "root",
        "undefined",
        "nodeCompare",
        "valCompare",
        "DFS",
        "n",
        "parent",
        "parNode",
        "find",
        "valNode",
        "setLeft",
        "setRight",
        "bfs",
        "last",
        "current",
        "push",
        "postorder",
        "test",
        "arr",
        "UTILS",
        "makeArray",
        "tree",
        "addLeft",
        "addRight",
        "v",
        "console",
        "log"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/appy/QI/js-samples/algos2/",
      "sourcesContent": [
        "import * as UTILS from \"./utils\";\n\nclass Node {\n\n\tconstructor(val) {\n\t\tthis.value=val;\n\t\tthis.left=this.right=null;\n\t}\n\n\tget value() { return this.value; }\n\tget left()  { return this.left; }\n\tget right() { return this.right; }\n\tset left( child ) { this.left = child; }\n\tset right( child ) { this.right = child; }\n\n\t*postorder(){ //DFS\n\t\tif ( this.left !== null ) { yield* this.left; }\n\t\tif ( this.right !== null ) { yield* this.right; }\n\t\tyield this.value;\n\t}\n\n\t*inorder(){\n\t\tif ( this.left !== null ) { yield* this.left; }\n\t\tyield this.value;\n\t\tif ( this.right !== null ) { yield* this.right; }\n\t}\n\n\t*preorder() {\n\t\tyield this.value;\n\t\tif ( this.left !== null ) { yield* this.left; }\n\t\tif ( this.right !== null ) { yield* this.right; }\n\t}\n}\n\n\nclass BinaryTree {\n\n\tconstructor( value ) {\n\t\tif ( value ) {\n\t\t\tthis.root = new Node( value );\n\t\t}\n\t}\n\n\tfind( val ) {\n\t\tif ( val === undefined ) return null;\n\n\t\tconst nodeCompare = val instanceof Node;\n\t\tconst valCompare = ! nodeCompare;\n\t\tfor( const n of this.DFS() ) {\n\t\t\tif ( (nodeCompare && n === val) || (valCompare && n.value === val) ) {\n\t\t\t\treturn n;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\taddLeft( parent, val ){\n\t\tif( !parent ) { return null; }\n\n\t\tlet parNode = this.find(parent);\n\t\tif ( val instanceof Node && this.find(val) !== null ){\n\t\t\tthrow \"Cant add pre-existing node in tree.\";\n\t\t}\n\n\t\tif ( parNode && parNode.left() === null ){\n\t\t\tconst valNode = new Node( val );\n\t\t\tparNode.setLeft( valNode );\n\t\t\treturn valNode;\n\t\t}\n\t}\n\t\n\taddRight( parent, val ){\n\t\tif( !parent ) { return null; }\n\n\t\tlet parNode = this.find(parent);\n\t\tif ( val instanceof Node && this.find(val) !== null ){\n\t\t\tthrow \"Cant add pre-existing node in tree.\";\n\t\t}\n\n\t\tif ( parNode && parNode.right() === null ){\n\t\t\tconst valNode = new Node( val );\n\t\t\tparNode.setRight( valNode );\n\t\t\treturn valNode;\n\t\t}\n\t\treturn false;\n\t}\n\t\n\t*BFS( root=this.root ){\n\t\tlet bfs=[ root ];\n\t\tfor (let last=0, current=bfs[last]; current ; ++last, current = bfs[ last ]){\n\t\t\tyield current.value();\n\t\t\tif(current.left) { bfs.push(current.left()); }\n\t\t\tif(current.right) { bfs.push(current.right()); }\n\t\t}\n\t}\n\n\t*DFS( root = this.root ) {\n\t\tyield* root.postorder();\n\t}\n\n}\n\n\nfunction test(){\n\tlet arr=UTILS.makeArray(true);\n\tlet tree=new BinaryTree(\"ROOT\" );\n\ttree.addLeft(\"ROOT\", \"fruits\"); \ttree.addRight(\"ROOT\", \"veggies\");\n\n\ttree.addLeft(\"fruits\", \"apple\"); tree.addRight(\"fruits\", \"orange\");\n\ttree.addLeft(\"veggies\", \"broccolli\"); tree.addRight(\"veggies\", \"carrot\");\n\tfor( const v of tree.DFS() ) {\n\t\tconsole.log( v );\n\t}\n}\n\ntest();\n\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1591484140922
  },
  "{\"sourceMaps\":\"both\",\"sourceRoot\":\"/Users/appy/QI/js-samples/algos2/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/appy/QI/js-samples/algos2\",\"filename\":\"/Users/appy/QI/js-samples/algos2/binaryTree.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/appy/QI/js-samples/algos2\",\"plugins\":[{\"key\":\"transform-runtime\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"MemberExpression\":{\"enter\":[null],\"exit\":[null]},\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.10.1": {
    "metadata": {},
    "options": {
      "sourceMaps": "both",
      "sourceRoot": "/Users/appy/QI/js-samples/algos2/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/appy/QI/js-samples/algos2",
      "filename": "/Users/appy/QI/js-samples/algos2/binaryTree.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/appy/QI/js-samples/algos2",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-runtime",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "MemberExpression": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-escapes",
          "visitor": {
            "Identifier": {
              "enter": [
                null
              ]
            },
            "TemplateElement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/appy/QI/js-samples/algos2/binaryTree.js",
        "plugins": [
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/appy/QI/js-samples/algos2/binaryTree.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/appy/QI/js-samples/algos2/",
        "sourceFileName": "binaryTree.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n// import * as UTILS from \"./utils\";\nvar Node = /*#__PURE__*/function () {\n  function Node(val) {\n    (0, _classCallCheck2[\"default\"])(this, Node);\n    this._value = val;\n    this._left = this._right = null;\n  }\n\n  (0, _createClass2[\"default\"])(Node, [{\n    key: \"postorder\",\n    value: /*#__PURE__*/_regenerator[\"default\"].mark(function postorder() {\n      return _regenerator[\"default\"].wrap(function postorder$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(this.left !== null)) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.delegateYield(this.left.postorder(), \"t0\", 2);\n\n            case 2:\n              if (!(this.right !== null)) {\n                _context.next = 4;\n                break;\n              }\n\n              return _context.delegateYield(this.right.postorder(), \"t1\", 4);\n\n            case 4:\n              _context.next = 6;\n              return this;\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, postorder, this);\n    })\n  }, {\n    key: \"inorder\",\n    value: /*#__PURE__*/_regenerator[\"default\"].mark(function inorder() {\n      return _regenerator[\"default\"].wrap(function inorder$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(this.left !== null)) {\n                _context2.next = 2;\n                break;\n              }\n\n              return _context2.delegateYield(this.left.inorder(), \"t0\", 2);\n\n            case 2:\n              _context2.next = 4;\n              return this;\n\n            case 4:\n              if (!(this.right !== null)) {\n                _context2.next = 6;\n                break;\n              }\n\n              return _context2.delegateYield(this.right.inorder(), \"t1\", 6);\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, inorder, this);\n    })\n  }, {\n    key: \"preorder\",\n    value: /*#__PURE__*/_regenerator[\"default\"].mark(function preorder() {\n      return _regenerator[\"default\"].wrap(function preorder$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return this;\n\n            case 2:\n              if (!(this.left !== null)) {\n                _context3.next = 4;\n                break;\n              }\n\n              return _context3.delegateYield(this.left.preorder(), \"t0\", 4);\n\n            case 4:\n              if (!(this.right !== null)) {\n                _context3.next = 6;\n                break;\n              }\n\n              return _context3.delegateYield(this.right.preorder(), \"t1\", 6);\n\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, preorder, this);\n    })\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._value;\n    },\n    set: function set(x) {\n      this._value = x;\n    }\n  }, {\n    key: \"left\",\n    get: function get() {\n      return this._left;\n    },\n    set: function set(child) {\n      this._left = child;\n    }\n  }, {\n    key: \"right\",\n    get: function get() {\n      return this._right;\n    },\n    set: function set(child) {\n      this._right = child;\n    }\n  }]);\n  return Node;\n}();\n\nvar BinaryTree = /*#__PURE__*/function () {\n  function BinaryTree(value) {\n    (0, _classCallCheck2[\"default\"])(this, BinaryTree);\n\n    if (value) {\n      this.root = new Node(value);\n    }\n  }\n\n  (0, _createClass2[\"default\"])(BinaryTree, [{\n    key: \"find\",\n    value: function find(val) {\n      if (val === undefined) return null;\n      var nodeCompare = val instanceof Node;\n      var valCompare = !nodeCompare;\n\n      var _iterator = _createForOfIteratorHelper(this.DFS()),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var n = _step.value;\n\n          if (nodeCompare && n === val || valCompare && n.value === val) {\n            return n;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return null;\n    }\n  }, {\n    key: \"addLeft\",\n    value: function addLeft(parent, val) {\n      if (!parent) {\n        return null;\n      }\n\n      var parNode = this.find(parent);\n\n      if (val instanceof Node && this.find(val) !== null) {\n        throw \"Cant add pre-existing node in tree.\";\n      }\n\n      if (parNode && parNode.left === null) {\n        var valNode = new Node(val);\n        parNode.left = valNode;\n        return valNode;\n      }\n    }\n  }, {\n    key: \"addRight\",\n    value: function addRight(parent, val) {\n      if (!parent) {\n        return null;\n      }\n\n      var parNode = this.find(parent);\n\n      if (val instanceof Node && this.find(val) !== null) {\n        throw \"Cant add pre-existing node in tree.\";\n      }\n\n      if (parNode && parNode.right === null) {\n        var valNode = new Node(val);\n        parNode.right = valNode;\n        return valNode;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"BFS\",\n    value: /*#__PURE__*/_regenerator[\"default\"].mark(function BFS() {\n      var root,\n          bfs,\n          last,\n          current,\n          _args4 = arguments;\n      return _regenerator[\"default\"].wrap(function BFS$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              root = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : this.root;\n              bfs = [root];\n              last = 0, current = bfs[last];\n\n            case 3:\n              if (!current) {\n                _context4.next = 11;\n                break;\n              }\n\n              _context4.next = 6;\n              return current.value;\n\n            case 6:\n              if (current.left) {\n                bfs.push(current.left);\n              }\n\n              if (current.right) {\n                bfs.push(current.right);\n              }\n\n            case 8:\n              ++last, current = bfs[last];\n              _context4.next = 3;\n              break;\n\n            case 11:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, BFS, this);\n    })\n  }, {\n    key: \"DFS\",\n    value: /*#__PURE__*/_regenerator[\"default\"].mark(function DFS() {\n      var root,\n          _args5 = arguments;\n      return _regenerator[\"default\"].wrap(function DFS$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              root = _args5.length > 0 && _args5[0] !== undefined ? _args5[0] : this.root;\n              return _context5.delegateYield(root.postorder(), \"t0\", 2);\n\n            case 2:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, DFS, this);\n    })\n  }, {\n    key: \"inorder\",\n    value: /*#__PURE__*/_regenerator[\"default\"].mark(function inorder() {\n      var root,\n          _args6 = arguments;\n      return _regenerator[\"default\"].wrap(function inorder$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              root = _args6.length > 0 && _args6[0] !== undefined ? _args6[0] : this.root;\n              return _context6.delegateYield(root.inorder(), \"t0\", 2);\n\n            case 2:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, inorder, this);\n    })\n  }, {\n    key: \"preorder\",\n    value: /*#__PURE__*/_regenerator[\"default\"].mark(function preorder() {\n      var root,\n          _args7 = arguments;\n      return _regenerator[\"default\"].wrap(function preorder$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              root = _args7.length > 0 && _args7[0] !== undefined ? _args7[0] : this.root;\n              return _context7.delegateYield(root.preorder(), \"t0\", 2);\n\n            case 2:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, preorder, this);\n    })\n  }, {\n    key: \"postorder\",\n    value: /*#__PURE__*/_regenerator[\"default\"].mark(function postorder() {\n      var root,\n          _args8 = arguments;\n      return _regenerator[\"default\"].wrap(function postorder$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              root = _args8.length > 0 && _args8[0] !== undefined ? _args8[0] : this.root;\n              return _context8.delegateYield(root.postorder(), \"t0\", 2);\n\n            case 2:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, postorder, this);\n    })\n  }]);\n  return BinaryTree;\n}();\n\nfunction test() {\n  var tree = new BinaryTree(\"ROOT\");\n  tree.addLeft(\"ROOT\", \"fruits\");\n  tree.addRight(\"ROOT\", \"veggies\");\n  tree.addLeft(\"fruits\", \"apple\");\n  tree.addRight(\"fruits\", \"orange\");\n  tree.addLeft(\"veggies\", \"green\");\n  tree.addRight(\"veggies\", \"red\");\n  tree.addLeft(\"green\", \"broccolli\");\n  tree.addRight(\"red\", \"carrot\");\n  tree.addLeft(\"apple\", \"fuji\");\n  console.log(JSON.stringify(tree.root, null, 2));\n  console.log(\"==========\\nROOT Breadth First\\n==========\");\n\n  var _iterator2 = _createForOfIteratorHelper(tree.BFS()),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var node = _step2.value;\n      console.log(node);\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  console.log(\"==========\\nROOT In Order Traversal \\n==========\");\n\n  var _iterator3 = _createForOfIteratorHelper(tree.inorder()),\n      _step3;\n\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var _node = _step3.value;\n      console.log(_node.value);\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n\n  console.log(\"==========\\nROOT Pre Order Traversal \\n==========\");\n\n  var _iterator4 = _createForOfIteratorHelper(tree.preorder()),\n      _step4;\n\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var _node2 = _step4.value;\n      console.log(_node2.value);\n    }\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n\n  console.log(\"==========\\nROOT Post Order Traversal \\n==========\");\n\n  var _iterator5 = _createForOfIteratorHelper(tree.postorder()),\n      _step5;\n\n  try {\n    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n      var _node3 = _step5.value;\n      console.log(_node3.value);\n    }\n  } catch (err) {\n    _iterator5.e(err);\n  } finally {\n    _iterator5.f();\n  }\n\n  console.log(\"==========\\nVeggies Depth First\\n==========\");\n  var veg = tree.find('veggies');\n\n  var _iterator6 = _createForOfIteratorHelper(tree.DFS(veg)),\n      _step6;\n\n  try {\n    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n      var _node4 = _step6.value;\n      console.log(_node4.value);\n    }\n  } catch (err) {\n    _iterator6.e(err);\n  } finally {\n    _iterator6.f();\n  }\n}\n\ntest();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "binaryTree.js"
      ],
      "names": [
        "Node",
        "val",
        "_value",
        "_left",
        "_right",
        "left",
        "postorder",
        "right",
        "inorder",
        "preorder",
        "x",
        "child",
        "BinaryTree",
        "value",
        "root",
        "undefined",
        "nodeCompare",
        "valCompare",
        "DFS",
        "n",
        "parent",
        "parNode",
        "find",
        "valNode",
        "bfs",
        "last",
        "current",
        "push",
        "test",
        "tree",
        "addLeft",
        "addRight",
        "console",
        "log",
        "JSON",
        "stringify",
        "BFS",
        "node",
        "veg"
      ],
      "mappings": ";;;;;;;;;;;;;;;;AAAA;IAEMA,I;AAEL,gBAAaC,GAAb,EAAmB;AAAA;AAClB,SAAKC,MAAL,GAAcD,GAAd;AACA,SAAKE,KAAL,GAAa,KAAKC,MAAL,GAAc,IAA3B;AACA;;;;;;;;;oBAYK,KAAKC,IAAL,KAAc,I;;;;;AAAS,4CAAO,KAAKA,IAAL,CAAUC,SAAV,EAAP;;;oBACvB,KAAKC,KAAL,KAAe,I;;;;;AAAS,4CAAO,KAAKA,KAAL,CAAWD,SAAX,EAAP;;;;AAC7B,qBAAM,IAAN;;;;;;;;;;;;;;;;oBAIK,KAAKD,IAAL,KAAc,I;;;;;AAAS,6CAAO,KAAKA,IAAL,CAAUG,OAAV,EAAP;;;;AAC5B,qBAAM,IAAN;;;oBACK,KAAKD,KAAL,KAAe,I;;;;;AAAS,6CAAO,KAAKA,KAAL,CAAWC,OAAX,EAAP;;;;;;;;;;;;;;;;;AAI7B,qBAAM,IAAN;;;oBACK,KAAKH,IAAL,KAAc,I;;;;;AAAS,6CAAO,KAAKA,IAAL,CAAUI,QAAV,EAAP;;;oBACvB,KAAKF,KAAL,KAAe,I;;;;;AAAS,6CAAO,KAAKA,KAAL,CAAWE,QAAX,EAAP;;;;;;;;;;;wBAxBlB;AAAE,aAAO,KAAKP,MAAZ;AAAqB,K;sBACxBQ,C,EAAI;AAAE,WAAKR,MAAL,GAAcQ,CAAd;AAAkB;;;wBAEvB;AAAE,aAAO,KAAKP,KAAZ;AAAoB,K;sBACxBQ,K,EAAQ;AAAE,WAAKR,KAAL,GAAaQ,KAAb;AAAqB;;;wBAE7B;AAAE,aAAO,KAAKP,MAAZ;AAAqB,K;sBACxBO,K,EAAQ;AAAE,WAAKP,MAAL,GAAcO,KAAd;AAAsB;;;;;IAsBtCC,U;AAEL,sBAAaC,KAAb,EAAqB;AAAA;;AACpB,QAAKA,KAAL,EAAa;AACZ,WAAKC,IAAL,GAAY,IAAId,IAAJ,CAAUa,KAAV,CAAZ;AACA;AACD;;;;yBAEKZ,G,EAAM;AACX,UAAKA,GAAG,KAAKc,SAAb,EAAyB,OAAO,IAAP;AAEzB,UAAMC,WAAW,GAAGf,GAAG,YAAYD,IAAnC;AACA,UAAMiB,UAAU,GAAG,CAACD,WAApB;;AAJW,iDAKM,KAAKE,GAAL,EALN;AAAA;;AAAA;AAKX,4DAA8B;AAAA,cAAlBC,CAAkB;;AAC7B,cAAOH,WAAW,IAAIG,CAAC,KAAKlB,GAAvB,IAAkCgB,UAAU,IAAIE,CAAC,CAACN,KAAF,KAAYZ,GAAjE,EAAyE;AACxE,mBAAOkB,CAAP;AACA;AACD;AATU;AAAA;AAAA;AAAA;AAAA;;AAUX,aAAO,IAAP;AACA;;;4BAEQC,M,EAAQnB,G,EAAM;AACtB,UAAK,CAACmB,MAAN,EAAe;AAAE,eAAO,IAAP;AAAc;;AAE/B,UAAIC,OAAO,GAAG,KAAKC,IAAL,CAAWF,MAAX,CAAd;;AACA,UAAKnB,GAAG,YAAYD,IAAf,IAAuB,KAAKsB,IAAL,CAAWrB,GAAX,MAAqB,IAAjD,EAAwD;AACvD,cAAM,qCAAN;AACA;;AAED,UAAKoB,OAAO,IAAIA,OAAO,CAAChB,IAAR,KAAiB,IAAjC,EAAwC;AACvC,YAAMkB,OAAO,GAAG,IAAIvB,IAAJ,CAAUC,GAAV,CAAhB;AACAoB,QAAAA,OAAO,CAAChB,IAAR,GAAekB,OAAf;AACA,eAAOA,OAAP;AACA;AACD;;;6BAESH,M,EAAQnB,G,EAAM;AACvB,UAAI,CAACmB,MAAL,EAAc;AAAE,eAAO,IAAP;AAAc;;AAE9B,UAAIC,OAAO,GAAG,KAAKC,IAAL,CAAWF,MAAX,CAAd;;AACA,UAAKnB,GAAG,YAAYD,IAAf,IAAuB,KAAKsB,IAAL,CAAWrB,GAAX,MAAqB,IAAjD,EAAwD;AACvD,cAAM,qCAAN;AACA;;AAED,UAAKoB,OAAO,IAAIA,OAAO,CAACd,KAAR,KAAkB,IAAlC,EAAyC;AACxC,YAAMgB,OAAO,GAAG,IAAIvB,IAAJ,CAAUC,GAAV,CAAhB;AACAoB,QAAAA,OAAO,CAACd,KAAR,GAAgBgB,OAAhB;AACA,eAAOA,OAAP;AACA;;AACD,aAAO,KAAP;AACA;;;;;;;;;;;;;AAEKT,cAAAA,I,8DAAK,KAAKA,I;AACXU,cAAAA,G,GAAM,CAAEV,IAAF,C;AACAW,cAAAA,I,GAAO,C,EAAGC,O,GAAUF,GAAG,CAAEC,IAAF,C;;;mBAAUC,O;;;;;;AAC1C,qBAAMA,OAAO,CAACb,KAAd;;;AACA,kBAAKa,OAAO,CAACrB,IAAb,EAAoB;AAAEmB,gBAAAA,GAAG,CAACG,IAAJ,CAAUD,OAAO,CAACrB,IAAlB;AAA2B;;AACjD,kBAAKqB,OAAO,CAACnB,KAAb,EAAqB;AAAEiB,gBAAAA,GAAG,CAACG,IAAJ,CAAUD,OAAO,CAACnB,KAAlB;AAA4B;;;AAHA,gBAAEkB,IAAF,EAAQC,OAAO,GAAGF,GAAG,CAAEC,IAAF,C;;;;;;;;;;;;;;;;;;;;AAOpEX,cAAAA,I,8DAAO,KAAKA,I;AACjB,6CAAOA,IAAI,CAACR,SAAL,EAAP;;;;;;;;;;;;;;;;;;AAGSQ,cAAAA,I,8DAAO,KAAKA,I;AACrB,6CAAOA,IAAI,CAACN,OAAL,EAAP;;;;;;;;;;;;;;;;;;AAEUM,cAAAA,I,8DAAO,KAAKA,I;AACtB,6CAAOA,IAAI,CAACL,QAAL,EAAP;;;;;;;;;;;;;;;;;;AAEWK,cAAAA,I,8DAAO,KAAKA,I;AACvB,6CAAOA,IAAI,CAACR,SAAL,EAAP;;;;;;;;;;;;;AAKF,SAASsB,IAAT,GAAe;AACd,MAAIC,IAAI,GAAC,IAAIjB,UAAJ,CAAe,MAAf,CAAT;AACAiB,EAAAA,IAAI,CAACC,OAAL,CAAa,MAAb,EAAqB,QAArB;AAAiCD,EAAAA,IAAI,CAACE,QAAL,CAAc,MAAd,EAAsB,SAAtB;AAEjCF,EAAAA,IAAI,CAACC,OAAL,CAAa,QAAb,EAAuB,OAAvB;AAAiCD,EAAAA,IAAI,CAACE,QAAL,CAAc,QAAd,EAAwB,QAAxB;AACjCF,EAAAA,IAAI,CAACC,OAAL,CAAa,SAAb,EAAwB,OAAxB;AAAkCD,EAAAA,IAAI,CAACE,QAAL,CAAc,SAAd,EAAyB,KAAzB;AAClCF,EAAAA,IAAI,CAACC,OAAL,CAAa,OAAb,EAAsB,WAAtB;AACAD,EAAAA,IAAI,CAACE,QAAL,CAAc,KAAd,EAAqB,QAArB;AACAF,EAAAA,IAAI,CAACC,OAAL,CAAa,OAAb,EAAqB,MAArB;AAEAE,EAAAA,OAAO,CAACC,GAAR,CAAaC,IAAI,CAACC,SAAL,CAAgBN,IAAI,CAACf,IAArB,EAA2B,IAA3B,EAAiC,CAAjC,CAAb;AAEAkB,EAAAA,OAAO,CAACC,GAAR,CAAY,4CAAZ;;AAZc,8CAaMJ,IAAI,CAACO,GAAL,EAbN;AAAA;;AAAA;AAad,2DAAiC;AAAA,UAArBC,IAAqB;AAChCL,MAAAA,OAAO,CAACC,GAAR,CAAaI,IAAb;AACA;AAfa;AAAA;AAAA;AAAA;AAAA;;AAiBdL,EAAAA,OAAO,CAACC,GAAR,CAAY,kDAAZ;;AAjBc,8CAkBMJ,IAAI,CAACrB,OAAL,EAlBN;AAAA;;AAAA;AAkBd,2DAAsC;AAAA,UAA1B6B,KAA0B;AACrCL,MAAAA,OAAO,CAACC,GAAR,CAAaI,KAAI,CAACxB,KAAlB;AACA;AApBa;AAAA;AAAA;AAAA;AAAA;;AAsBdmB,EAAAA,OAAO,CAACC,GAAR,CAAY,mDAAZ;;AAtBc,8CAuBMJ,IAAI,CAACpB,QAAL,EAvBN;AAAA;;AAAA;AAuBd,2DAAuC;AAAA,UAA3B4B,MAA2B;AACtCL,MAAAA,OAAO,CAACC,GAAR,CAAaI,MAAI,CAACxB,KAAlB;AACA;AAzBa;AAAA;AAAA;AAAA;AAAA;;AA2BdmB,EAAAA,OAAO,CAACC,GAAR,CAAY,oDAAZ;;AA3Bc,8CA4BMJ,IAAI,CAACvB,SAAL,EA5BN;AAAA;;AAAA;AA4Bd,2DAAwC;AAAA,UAA5B+B,MAA4B;AACvCL,MAAAA,OAAO,CAACC,GAAR,CAAaI,MAAI,CAACxB,KAAlB;AACA;AA9Ba;AAAA;AAAA;AAAA;AAAA;;AAgCdmB,EAAAA,OAAO,CAACC,GAAR,CAAY,6CAAZ;AACA,MAAMK,GAAG,GAAGT,IAAI,CAACP,IAAL,CAAW,SAAX,CAAZ;;AAjCc,8CAkCMO,IAAI,CAACX,GAAL,CAAUoB,GAAV,CAlCN;AAAA;;AAAA;AAkCd,2DAAsC;AAAA,UAA1BD,MAA0B;AACrCL,MAAAA,OAAO,CAACC,GAAR,CAAaI,MAAI,CAACxB,KAAlB;AACA;AApCa;AAAA;AAAA;AAAA;AAAA;AAsCd;;AAEDe,IAAI",
      "sourceRoot": "/Users/appy/QI/js-samples/algos2/",
      "sourcesContent": [
        "// import * as UTILS from \"./utils\";\n\nclass Node {\n\n\tconstructor( val ) {\n\t\tthis._value = val;\n\t\tthis._left = this._right = null;\n\t}\n\n\tget value() { return this._value; }\n\tset value( x ) { this._value = x; }\n\n\tget left()  { return this._left; }\n\tset left( child ) { this._left = child; }\n\n\tget right() { return this._right; }\n\tset right( child ) { this._right = child; }\n\n\t*postorder() { //DFS\n\t\tif ( this.left !== null ) { yield* this.left.postorder(); }\n\t\tif ( this.right !== null ) { yield* this.right.postorder(); }\n\t\tyield this;\n\t}\n\n\t*inorder() {\n\t\tif ( this.left !== null ) { yield* this.left.inorder(); }\n\t\tyield this;\n\t\tif ( this.right !== null ) { yield* this.right.inorder(); }\n\t}\n\n\t*preorder() {\n\t\tyield this;\n\t\tif ( this.left !== null ) { yield* this.left.preorder(); }\n\t\tif ( this.right !== null ) { yield* this.right.preorder(); }\n\t}\n}\n\n\nclass BinaryTree {\n\n\tconstructor( value ) {\n\t\tif ( value ) {\n\t\t\tthis.root = new Node( value );\n\t\t}\n\t}\n\n\tfind( val ) {\n\t\tif ( val === undefined ) return null;\n\n\t\tconst nodeCompare = val instanceof Node;\n\t\tconst valCompare = !nodeCompare;\n\t\tfor ( const n of this.DFS() ) {\n\t\t\tif ( ( nodeCompare && n === val ) || ( valCompare && n.value === val ) ) {\n\t\t\t\treturn n;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\taddLeft( parent, val ) {\n\t\tif ( !parent ) { return null; }\n\n\t\tlet parNode = this.find( parent );\n\t\tif ( val instanceof Node && this.find( val ) !== null ) {\n\t\t\tthrow \"Cant add pre-existing node in tree.\";\n\t\t}\n\n\t\tif ( parNode && parNode.left === null ) {\n\t\t\tconst valNode = new Node( val );\n\t\t\tparNode.left = valNode;\n\t\t\treturn valNode;\n\t\t}\n\t}\n\t\n\taddRight( parent, val ) {\n\t\tif( !parent ) { return null; }\n\n\t\tlet parNode = this.find( parent );\n\t\tif ( val instanceof Node && this.find( val ) !== null ) {\n\t\t\tthrow \"Cant add pre-existing node in tree.\";\n\t\t}\n\n\t\tif ( parNode && parNode.right === null ) {\n\t\t\tconst valNode = new Node( val );\n\t\t\tparNode.right = valNode;\n\t\t\treturn valNode;\n\t\t}\n\t\treturn false;\n\t}\n\t\n\t*BFS( root=this.root ){\n\t\tlet bfs = [ root ];\n\t\tfor ( let last = 0, current = bfs[ last ]; current; ++last, current = bfs[ last ] ) {\n\t\t\tyield current.value;\n\t\t\tif ( current.left ) { bfs.push( current.left ); }\n\t\t\tif ( current.right ) { bfs.push( current.right ); }\n\t\t}\n\t}\n\n\t*DFS( root = this.root ) {\n\t\tyield* root.postorder();\n\t}\n\n\t*inorder( root = this.root ) {\n\t\tyield* root.inorder();\n\t}\n\t*preorder( root = this.root ) {\n\t\tyield* root.preorder();\n\t}\n\t*postorder( root = this.root ) {\n\t\tyield* root.postorder();\n\t}\n}\n\n\nfunction test(){\n\tlet tree=new BinaryTree(\"ROOT\" );\n\ttree.addLeft(\"ROOT\", \"fruits\"); \ttree.addRight(\"ROOT\", \"veggies\");\n\n\ttree.addLeft(\"fruits\", \"apple\"); tree.addRight(\"fruits\", \"orange\");\n\ttree.addLeft(\"veggies\", \"green\"); tree.addRight(\"veggies\", \"red\");\n\ttree.addLeft(\"green\", \"broccolli\");\n\ttree.addRight(\"red\", \"carrot\");\n\ttree.addLeft(\"apple\",\"fuji\");\n\n\tconsole.log( JSON.stringify( tree.root, null, 2 ) );\n\n\tconsole.log(\"==========\\nROOT Breadth First\\n==========\")\n\tfor ( const node of tree.BFS() ) {\n\t\tconsole.log( node );\n\t}\n\n\tconsole.log(\"==========\\nROOT In Order Traversal \\n==========\")\n\tfor ( const node of tree.inorder( ) ) {\n\t\tconsole.log( node.value );\n\t}\n\n\tconsole.log(\"==========\\nROOT Pre Order Traversal \\n==========\")\n\tfor ( const node of tree.preorder( ) ) {\n\t\tconsole.log( node.value );\n\t}\n\n\tconsole.log(\"==========\\nROOT Post Order Traversal \\n==========\")\n\tfor ( const node of tree.postorder( ) ) {\n\t\tconsole.log( node.value );\n\t}\n\n\tconsole.log(\"==========\\nVeggies Depth First\\n==========\")\n\tconst veg = tree.find( 'veggies');\n\tfor ( const node of tree.DFS( veg ) ) {\n\t\tconsole.log( node.value );\n\t}\n\t\n}\n\ntest();\n\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1591487411123
  },
  "{\"sourceMaps\":\"both\",\"sourceRoot\":\"/Users/appy/QI/js-samples/algos2/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/appy/QI/js-samples/algos2\",\"filename\":\"/Users/appy/QI/js-samples/algos2/utils.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/appy/QI/js-samples/algos2\",\"plugins\":[{\"key\":\"transform-runtime\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"MemberExpression\":{\"enter\":[null],\"exit\":[null]},\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.10.1": {
    "metadata": {},
    "options": {
      "sourceMaps": "both",
      "sourceRoot": "/Users/appy/QI/js-samples/algos2/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/appy/QI/js-samples/algos2",
      "filename": "/Users/appy/QI/js-samples/algos2/utils.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/appy/QI/js-samples/algos2",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-runtime",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "MemberExpression": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-escapes",
          "visitor": {
            "Identifier": {
              "enter": [
                null
              ]
            },
            "TemplateElement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/appy/QI/js-samples/algos2/utils.js",
        "plugins": [
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/appy/QI/js-samples/algos2/utils.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/appy/QI/js-samples/algos2/",
        "sourceFileName": "utils.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.swap = swap;\nexports.isGreater = isGreater;\nexports.compare = compare;\nexports.checkSorted = checkSorted;\nexports.makeArray = makeArray;\nexports.makeXwd = makeXwd;\nexports.hideString = hideString;\nexports.rotateRight = rotateRight;\n\nfunction swap(ar, i, j) {\n  var tmp = ar[i];\n  ar[i] = ar[j];\n  ar[j] = tmp;\n}\n\nfunction isGreater(a, b) {\n  return a - b;\n}\n\nfunction compare(a, b) {\n  return a - b;\n}\n\nfunction checkSorted(data) {\n  var origArr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var compare = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : isGreater;\n\n  if (origArr.length <= 0) {\n    var last = data.length - 1;\n\n    for (var i = 0; i < last; i++) {\n      if (isGreater(data[i], data[i + 1]) > 0) {\n        throw \"Data is NOT sorted @ index \" + i;\n      }\n    }\n  } else {\n    if (origArr.length === data.length) {\n      origArr.sort(compare);\n\n      for (var _i = 0; _i < data.length; _i++) {\n        if (data[_i] !== origArr[_i]) {\n          console.log(origArr.slice(0, 5) + \" ... \" + origArr.slice(-5));\n          throw \"Data is NOT sorted @ index \" + _i;\n        }\n      }\n    } else {\n      throw \"Data size does not match origArray \".concat(data.length, \". Expected = \").concat(origArr.length);\n    }\n  }\n\n  return true;\n}\n\nfunction makeArray() {\n  var small = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  return small ? [1, 83, 3, 97, 31, 4, 6, 1, 10] : Array(30000).fill(0).map(function () {\n    return Math.floor(Math.random() * 10000);\n  });\n}\n\nfunction makeXwd(n, m, init) {\n  var xwd = new Array(n);\n\n  for (var i = 0; i < n; i++) {\n    xwd[i] = new Array(m);\n\n    if (init) {\n      for (var j = 0; j < m; j++) {\n        xwd[i][j] = init[Math.floor(Math.random() * init.length)];\n      }\n    }\n  } //console.log( xwd );\n\n\n  return xwd;\n} //B console.log(makeArray());\n\n\nfunction hideString(xwd, search) {\n  var totRows = xwd.length;\n  var totCols = xwd[0].length;\n  var maxRowOff = totRows - search.length; //To accommodate search string\n\n  var maxColOff = totCols - search.length; //To accommodate search string\n\n  var reverse = Math.floor(Math.random() * 2); // 0 => Normal , 1=> Reverse\n\n  var dir = Math.floor(Math.random() * 4) + 1;\n\n  switch (dir) {\n    case 1:\n      {\n        //Horizontal Left\n        var row = Math.floor(Math.random() * totRows);\n        var col = Math.floor(Math.random() * maxColOff);\n\n        for (var i = 0; i < search.length; i++) {\n          xwd[row][col + i] = search[reverse ? search.length - 1 - i : i];\n        }\n      }\n      break;\n\n    case 2:\n      {\n        //Vertical Down\n        var _row = Math.floor(Math.random() * maxRowOff);\n\n        var _col = Math.floor(Math.random() * totCols);\n\n        for (var _i2 = 0; _i2 < search.length; _i2++) {\n          xwd[_row + _i2][_col] = search[reverse ? search.length - 1 - _i2 : _i2];\n        }\n      }\n      break;\n\n    case 3:\n      {\n        // Diagonal Down Right\n        var _row2 = Math.floor(Math.random() * maxRowOff);\n\n        var _col2 = Math.floor(Math.random() * maxColOff);\n\n        for (var _i3 = 0; _i3 < search.length; _i3++) {\n          xwd[_row2 + _i3][_col2 + _i3] = search[reverse ? search.length - 1 - _i3 : _i3];\n        }\n      }\n      break;\n\n    case 4:\n      {\n        // Diagonal  Down Left\n        var _row3 = Math.floor(Math.random() * maxRowOff);\n\n        var _col3 = Math.floor(Math.random() * maxColOff) + search.length;\n\n        for (var _i4 = 0; _i4 < search.length; _i4++) {\n          xwd[_row3 + _i4][_col3 - _i4] = search[reverse ? search.length - 1 - _i4 : _i4];\n        }\n      }\n      break;\n\n    default:\n      throw \"Invalid Direction\";\n  }\n}\n\nfunction rotateRight(ar, start, end) {\n  //end is inclusive\n  var tmp = ar[end];\n\n  for (var i = end; i > start; i--) {\n    ar[i] = ar[i - 1];\n  }\n\n  ar[start] = tmp;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "utils.js"
      ],
      "names": [
        "swap",
        "ar",
        "i",
        "j",
        "tmp",
        "isGreater",
        "a",
        "b",
        "compare",
        "checkSorted",
        "data",
        "origArr",
        "length",
        "last",
        "sort",
        "console",
        "log",
        "slice",
        "makeArray",
        "small",
        "Array",
        "fill",
        "map",
        "Math",
        "floor",
        "random",
        "makeXwd",
        "n",
        "m",
        "init",
        "xwd",
        "hideString",
        "search",
        "totRows",
        "totCols",
        "maxRowOff",
        "maxColOff",
        "reverse",
        "dir",
        "row",
        "col",
        "rotateRight",
        "start",
        "end"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/appy/QI/js-samples/algos2/",
      "sourcesContent": [
        "\nexport function swap( ar, i, j ) {\n\tconst tmp = ar[ i ];\n\tar[ i ] = ar[ j ];\n\tar[ j ] = tmp;\n}\n\nexport function isGreater( a, b ) {\n\treturn a - b;\n}\n\nexport function compare( a, b ) {\n\treturn a - b;\n}\n\nexport function checkSorted( data, origArr=[],  compare = isGreater ) {\n\n\tif ( origArr.length <= 0 ) {\n\t\tconst last = data.length - 1;\n\t\tfor ( let i = 0; i < last; i++ ) {\n\t\t\tif ( isGreater( data[ i ], data[ i + 1 ] ) > 0 ) {\n\t\t\t\tthrow \"Data is NOT sorted @ index \" + i;\n\t\t\t}\n\t\t}\n\t} else {\n\t\tif ( origArr.length === data.length ) {\n\t\t\torigArr.sort( compare );\n\t\t\tfor ( let i = 0; i < data.length; i++ ) {\n\t\t\t\tif ( data[ i ] !== origArr[ i ] ) {\n\t\t\t\t\tconsole.log( origArr.slice( 0, 5 ) + \" ... \" + origArr.slice( -5 ) );\n\t\t\t\t\tthrow \"Data is NOT sorted @ index \" + i;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthrow `Data size does not match origArray ${data.length}. Expected = ${origArr.length}`;\n\t\t}\n\t}\n\treturn true;\n}\n\nexport function makeArray( small=false ) {\n\treturn small ?\n\t\t[ 1, 83, 3, 97, 31, 4, 6, 1, 10 ] :\n\t\tArray( 30000).fill( 0 ).map( () => Math.floor( Math.random() * 10000 ) );\n}\n\nexport function makeXwd( n, m, init ) {\n\tlet xwd = new Array( n );\n\tfor ( let i = 0; i < n; i++ ) {\n\t\txwd[ i ] = new Array( m );\n\t\tif ( init ) {\n\t\t\tfor ( let j = 0; j < m; j++ ) {\n\t\t\t\txwd[ i ][ j ] = init[ ( Math.floor( Math.random() * init.length ) ) ];\n\t\t\t}\n\t\t}\n\t}\n\t//console.log( xwd );\n\treturn xwd;\n}\n\n//B console.log(makeArray());\nexport function hideString( xwd, search ) {\n\tconst totRows = xwd.length;\n\tconst totCols = xwd[ 0 ].length;\n\n\tconst maxRowOff = totRows - search.length; //To accommodate search string\n\tconst maxColOff = totCols - search.length; //To accommodate search string\n\n\tconst reverse = Math.floor( Math.random() * 2 );  // 0 => Normal , 1=> Reverse\n\tconst dir = Math.floor( Math.random() * 4 ) + 1;\n\n\tswitch ( dir ) {\n\t\tcase 1: { //Horizontal Left\n\t\t\tconst row = Math.floor( Math.random() * totRows );\n\t\t\tconst col = Math.floor( Math.random() * maxColOff );\n\t\t\tfor ( let i = 0; i < search.length; i++ ) {\n\t\t\t\txwd[ row ][ col + i ] = search[ reverse ? search.length - 1 - i : i ];\n\t\t\t}\n\t\t}\n\t\t\tbreak;\n\t\tcase 2 : { //Vertical Down\n\t\t\tconst row = Math.floor( Math.random() * maxRowOff );\n\t\t\tconst col = Math.floor( Math.random() * totCols );\n\t\t\tfor ( let i = 0; i < search.length; i++ ) {\n\t\t\t\txwd[ row + i ][ col ] = search[ reverse ? search.length - 1 - i : i ];\n\t\t\t}\n\t\t}\n\t\t\tbreak;\n\t\tcase 3: { // Diagonal Down Right\n\t\t\tconst row = Math.floor( Math.random() * maxRowOff );\n\t\t\tconst col = Math.floor( Math.random() * maxColOff );\n\t\t\tfor ( let i = 0; i < search.length; i++ ) {\n\t\t\t\txwd[ row + i ][ col + i ] = search[ reverse ? search.length - 1 - i : i ];\n\t\t\t}\n\t\t}\n\t\t\tbreak;\n\t\tcase 4: { // Diagonal  Down Left\n\t\t\tconst row = Math.floor( Math.random() * maxRowOff );\n\t\t\tconst col = Math.floor( Math.random() * maxColOff ) + search.length;\n\t\t\tfor ( let i = 0; i < search.length; i++ ) {\n\t\t\t\txwd[ row + i ][ col - i ] = search[ reverse ? search.length - 1 - i : i ];\n\t\t\t}\n\t\t}\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow \"Invalid Direction\";\n\t}\n}\n\nexport function rotateRight( ar, start, end ) { //end is inclusive\n\tlet tmp = ar[ end ];\n\tfor ( let i = end; i > start; i-- ) {\n\t\tar[ i ] = ar[ i - 1 ];\n\t}\n\tar[ start ] = tmp;\n}"
      ]
    },
    "sourceType": "script",
    "mtime": 1591084692898
  }
}